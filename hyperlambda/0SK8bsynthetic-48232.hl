
// This snippet uses the '**' iterator to retrieve all descendant nodes. - With Python equivalent
.tree
   branch1
      leaf1:A
   branch2
      leaf2:B
for-each:x:@.tree/**
   set-value:x:@.dp/#
      :visited

// The expression @.tree/** selects all descendants of .tree (branch1, leaf1, branch2, leaf2). The loop marks each found node by setting its value to "visited".


/*

# Python equivalent
def mark_descendants_as_visited(tree):
    # Recursive function to mark all descendant nodes as visited
    def visit_nodes(node):
        for key, value in node.items():
            if isinstance(value, dict):
                visit_nodes(value)
            node[key] = "visited"

    # Start the visiting process
    visit_nodes(tree)
    return tree

# Example usage
tree = {
    'branch1': {
        'leaf1': 'A'
    },
    'branch2': {
        'leaf2': 'B'
    }
}
visited_tree = mark_descendants_as_visited(tree)
print(visited_tree)  # Output: {'branch1': {'leaf1': 'visited'}, 'branch2': {'leaf2': 'visited'}}

*/