
// Hyperlambda file that takes a lambda objects as an argument, and exceutes the lambda object from within the file, once for each role that exists in the system. - With Python equivalent
.arguments
   .execute:*

// Retrieving roles from magic database
data.connect:magic
   data.read
      table:roles

   // Iterating through each role, executing [.execute] lambda object once for each role.
   for-each:x:@data.read/*
      unwrap:x:+/*
      invoke:x:@.arguments/*/.execute
         role:x:@.dp/#/*/name

/*
 * To execute the file, you can use something such as follows:
 * 
 * io.file.execute:/modules/slett/foo.get.hl
 * .execute
 * 
 * // You will be getting the role in as an argument from the above Hyperlambda file here.
 * log.info:x:@.arguments/*/role
 */


/*

# Python equivalent
import sqlite3

def execute_for_each_role(database_name, execute_lambda):
    # Connect to the magic database
    conn = sqlite3.connect(database_name)
    cursor = conn.cursor()

    try:
        # Read roles from the roles table
        cursor.execute("SELECT name FROM roles")
        roles = cursor.fetchall()

        # Execute the lambda for each role
        for role in roles:
            role_name = role[0]
            execute_lambda(role_name)
    finally:
        conn.close()

# Example lambda function to execute
def example_lambda(role):
    print(f"Executing for role: {role}")

# Example usage
database_name = 'magic.db'
execute_for_each_role(database_name, example_lambda)

*/