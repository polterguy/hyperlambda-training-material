
// The SQL aggregates and returns the top 25 artists with the most albums from the chinook database. - With Python equivalent
.arguments

// Making sure user is authorized to invoke endpoint.
auth.ticket.verify:root,admin

// Connecting to database.
data.connect:chinook
   database-type:sqlite

   // Executing [data.select] slot with our SQL.
   data.select:"\n/*\n * Script to aggregate records for each artist in chinook database.\n * Make sure you select the chinook database before execxuting the script.\n */\nselect ar.Name, count(*) as count\n  from Album al, Artist ar where al.ArtistId = ar.ArtistId\n  group by al.ArtistId\n  order by count desc\n  limit 25\n"
      database-type:sqlite

   // Returning a result of above invocation to caller.
   return-nodes:x:@data.select/*


/*

# Python equivalent
import sqlite3

def get_top_artists():
    """
    This function aggregates and returns the top 25 artists with the most albums from the chinook database.
    
    :return: A list of dictionaries containing artist names and album counts
    """
    # Verify authentication
    verify_authentication(["root", "admin"])
    
    # Connect to the SQLite database
    conn = sqlite3.connect('chinook.db')
    cursor = conn.cursor()
    
    # Execute the query to get top 25 artists with the most albums
    query = """
    SELECT ar.Name, COUNT(*) AS count
    FROM Album al, Artist ar
    WHERE al.ArtistId = ar.ArtistId
    GROUP BY al.ArtistId
    ORDER BY count DESC
    LIMIT 25
    """
    cursor.execute(query)
    artists = [{"Name": row[0], "Count": row[1]} for row in cursor.fetchall()]
    
    # Close the connection
    cursor.close()
    conn.close()
    
    # Return the list of top artists
    return artists

def verify_authentication(roles):
    # Placeholder for authentication verification logic
    pass

# Example usage
# get_top_artists()

*/