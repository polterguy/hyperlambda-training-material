
// Search the web - With Python equivalent
.arguments

   // Mandatory argument being the actual query to submit to DuckDuckGo.
   query:string

   // Optional argument being the maximum number of tokens to return.
   max_tokens:int
.type:public

// Returns [max_tokens] context for the specified [query] by searching DuckDuckGo.
execute:magic.workflows.actions.execute
   name:openai-context-from-search
   filename:/modules/openai/workflows/actions/openai-context-from-search.hl
   arguments
      query:x:@.arguments/*/query
      max_tokens:x:@.arguments/*/max_tokens

// Returns the result of your last action.
return-nodes:x:@execute/*


/*

# Python equivalent
def get_context(type: str, query: str, threshold: float = 0.3, max_tokens: int = 4000):
    import requests
    
    if not type or not query:
        raise ValueError("Type and query are mandatory")
    
    url = "https://api.example.com/get-context"
    params = {
        "type": type,
        "prompt": query,
        "threshold": float(threshold),
        "max_tokens": int(max_tokens)
    }
    
    response = requests.get(url, params=params)
    return response.json().get('context', '')

*/