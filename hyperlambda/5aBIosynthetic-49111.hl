
// Read or list records from your categories table in your cms database - With Python equivalent
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.

   // Offset into the dataset of where to start retrieving records

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   categories.id.eq:long
   categories.name.like:string
   categories.name.eq:string
   categories.description.like:string
   categories.description.eq:string

// Meta data description for endpoint

// Type of endpoint
.type:crud-read

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:categories
      columns
         categories.id
         categories.name
         categories.description
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*


/*

# Python equivalent
import sqlite3

def read_categories(filters=None):
    """
    This function reads or lists records from the categories table in the cms database.
    
    :param filters: A dictionary containing filter conditions
    :return: A list of dictionaries containing category details
    """
    # Verify authentication
    verify_authentication(["guest"])
    
    # Connect to the SQLite database
    conn = sqlite3.connect('cms.db')
    cursor = conn.cursor()
    
    # Build the query
    query = "SELECT id, name, description FROM categories WHERE 1=1"
    params = []
    
    if filters:
        for key, value in filters.items():
            if key.endswith(".eq"):
                column = key.split(".")[1]
                query += f" AND {column} = ?"
                params.append(value)
            elif key.endswith(".like"):
                column = key.split(".")[1]
                query += f" AND {column} LIKE ?"
                params.append(f"%{value}%")
    
    # Execute the query
    cursor.execute(query, params)
    categories = [{"id": row[0], "name": row[1], "description": row[2]} for row in cursor.fetchall()]
    
    # Close the connection
    cursor.close()
    conn.close()
    
    # Return the list of categories
    return categories

def verify_authentication(roles):
    # Placeholder for authentication verification logic
    pass

# Example usage
# read_categories({"categories.name.like": "example"})

*/