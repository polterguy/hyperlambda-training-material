
// Returns all plans that exists - With Python equivalent

/*
 * Ensures user is authorized to access endpoint.
 * 
 * If you don't supply a list of [roles] this action only verifies the user is authenticated,
 * and does not care about what roles the user belongs to.
 */
execute:magic.workflows.actions.execute
   name:authorize
   filename:/misc/workflows/actions/security/authorize.hl
   arguments
      roles
         .:root
         .:gpt

// Returns all plans in the system.
execute:magic.workflows.actions.execute
   name:hub-plans-get
   filename:/modules/hub/workflows/actions/hub-plans-get.hl
   arguments

// Returns the result of your last action.
return-nodes:x:@execute/*


/*

# Python equivalent
def get_all_plans():
    # Dummy function to simulate authorization
    def authorize_user(roles):
        # Simulate authorization logic
        return True

    # Dummy function to simulate fetching plans
    def hub_plans_get():
        # Simulate fetching plans logic
        return [{"plan_id": 1, "name": "Basic"}, {"plan_id": 2, "name": "Premium"}]

    # Authorize the user
    if not authorize_user(['root', 'gpt']):
        raise PermissionError("Unauthorized access")

    # Fetch all plans
    plans = hub_plans_get()

    return plans

# Example usage
plans = get_all_plans()
print(plans)  # Output: [{'plan_id': 1, 'name': 'Basic'}, {'plan_id': 2, 'name': 'Premium'}]

*/