
// Count unique and distinct items from your Customer table in your chinook database
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Customer.CustomerId.mt:long
   Customer.CustomerId.lt:long
   Customer.CustomerId.mteq:long
   Customer.CustomerId.lteq:long
   Customer.CustomerId.neq:long
   Customer.CustomerId.eq:long
   Customer.FirstName.like:string
   Customer.FirstName.mt:string
   Customer.FirstName.lt:string
   Customer.FirstName.mteq:string
   Customer.FirstName.lteq:string
   Customer.FirstName.neq:string
   Customer.FirstName.eq:string
   Customer.LastName.like:string
   Customer.LastName.mt:string
   Customer.LastName.lt:string
   Customer.LastName.mteq:string
   Customer.LastName.lteq:string
   Customer.LastName.neq:string
   Customer.LastName.eq:string
   Customer.Company.like:string
   Customer.Company.mt:string
   Customer.Company.lt:string
   Customer.Company.mteq:string
   Customer.Company.lteq:string
   Customer.Company.neq:string
   Customer.Company.eq:string
   Customer.Address.like:string
   Customer.Address.mt:string
   Customer.Address.lt:string
   Customer.Address.mteq:string
   Customer.Address.lteq:string
   Customer.Address.neq:string
   Customer.Address.eq:string
   Customer.City.like:string
   Customer.City.mt:string
   Customer.City.lt:string
   Customer.City.mteq:string
   Customer.City.lteq:string
   Customer.City.neq:string
   Customer.City.eq:string
   Customer.State.like:string
   Customer.State.mt:string
   Customer.State.lt:string
   Customer.State.mteq:string
   Customer.State.lteq:string
   Customer.State.neq:string
   Customer.State.eq:string
   Customer.Country.like:string
   Customer.Country.mt:string
   Customer.Country.lt:string
   Customer.Country.mteq:string
   Customer.Country.lteq:string
   Customer.Country.neq:string
   Customer.Country.eq:string
   Customer.PostalCode.like:string
   Customer.PostalCode.mt:string
   Customer.PostalCode.lt:string
   Customer.PostalCode.mteq:string
   Customer.PostalCode.lteq:string
   Customer.PostalCode.neq:string
   Customer.PostalCode.eq:string
   Customer.Phone.like:string
   Customer.Phone.mt:string
   Customer.Phone.lt:string
   Customer.Phone.mteq:string
   Customer.Phone.lteq:string
   Customer.Phone.neq:string
   Customer.Phone.eq:string
   Customer.Fax.like:string
   Customer.Fax.mt:string
   Customer.Fax.lt:string
   Customer.Fax.mteq:string
   Customer.Fax.lteq:string
   Customer.Fax.neq:string
   Customer.Fax.eq:string
   Customer.Email.like:string
   Customer.Email.mt:string
   Customer.Email.lt:string
   Customer.Email.mteq:string
   Customer.Email.lteq:string
   Customer.Email.neq:string
   Customer.Email.eq:string
   Customer.SupportRepId.mt:long
   Customer.SupportRepId.lt:long
   Customer.SupportRepId.mteq:long
   Customer.SupportRepId.lteq:long
   Customer.SupportRepId.neq:long
   Customer.SupportRepId.eq:long
   SupportRepId.LastName.eq:string
   SupportRepId.LastName.like:string

// Type of endpoint
.type:crud-count-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Customer.CustomerId
   .:Customer.FirstName
   .:Customer.LastName
   .:Customer.Company
   .:Customer.Address
   .:Customer.City
   .:Customer.State
   .:Customer.Country
   .:Customer.PostalCode
   .:Customer.Phone
   .:Customer.Fax
   .:Customer.Email
   .:Customer.SupportRepId
   .:SupportRepId.LastName

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customer
         join:Employee
            as:SupportRepId
            type:left
            on
               and
                  Customer.SupportRepId:SupportRepId.EmployeeId
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
