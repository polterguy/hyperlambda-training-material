
// Returns unique and distinct values from your Customers table in your northwind database
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Customers.CustomerID.like:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.eq:string

// Meta data description for endpoint
.description:Returns unique and distinct values from your Customers table in your northwind database

// Type of endpoint
.type:crud-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Customers.CustomerID
   .:Customers.CompanyName
   .:Customers.ContactName
   .:Customers.ContactTitle
   .:Customers.Address
   .:Customers.City
   .:Customers.Region
   .:Customers.PostalCode
   .:Customers.Country
   .:Customers.Phone
   .:Customers.Fax

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
