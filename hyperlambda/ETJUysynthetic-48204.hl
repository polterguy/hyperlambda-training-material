
/*
 * Counts usage of slots in our training material
 * 
 * Returns all slots, and how many times each slot is mentioned in training material - With Python equivalent
 */
.arguments
.type:public

// Used as buffer to hold result.
.result

// Fetching vocabulary of server.
vocabulary

// Iterating through each slot
for-each:x:@vocabulary/*

   // Executing file that actually counts how many instances we can find of slot.
   execute-file:/modules/fine-tune-hyperlambda/api/hyperlambda-search-count.get.hl
      query:x:@.dp/#

   // Adding result of above invocation to [.result] folder.
   set-name:x:+/+/*/*
      get-value:x:@.dp/#
   unwrap:x:+/*/*
   add:x:@.result
      .
         .:x:@execute-file/*/count

// Sorting result.
sort:x:@.result/*
   if
      lt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:-1
   else-if
      mt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:1
   else
      set-value:x:@.result
         .:int:0

// Returning result to caller.
return-nodes:x:@sort/*


/*

# Python equivalent
def count_slot_usage(vocabulary):
    # Initialize the result list
    result = []

    # Count the usage of each slot
    for slot in vocabulary:
        count = search_count(slot)
        result.append((slot, count))

    # Sort the result by count
    result.sort(key=lambda x: x[1], reverse=True)

    return result

def search_count(slot):
    # Dummy function to simulate search count
    # Replace with actual implementation
    return len(slot)  # Example: return the length of the slot name as the count

# Example usage
vocabulary = ["slot1", "slot2", "slot3"]
slot_usage = count_slot_usage(vocabulary)
print(slot_usage)

*/