
// Create a Hyperlambda script for a CRUD update endpoint that updates one record in the ml_requests table in the magic database, filtering which item to update with ID and updating type, prompt, completion, and finish_reason fields, ensuring authentication and authorization for root roles. - With Python equivalent
.arguments
   id:long
   type:string
   prompt:string
   completion:string
   finish_reason:string
   cached:int
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:ml_requests
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update


/*

# Python equivalent
import sqlite3

def create_ml_training_snippet(database, snippet_data):
    # Simulate verifying root access
    if not verify_root_access():
        raise PermissionError("Root access required")

    # Simulate checking if snippet creation is allowed
    if not can_create_snippet():
        raise PermissionError("Not authorized to create snippet")

    # Connect to the specified database
    connection = sqlite3.connect(database)
    cursor = connection.cursor()

    # Build the SQL query
    columns = ", ".join(snippet_data.keys())
    placeholders = ", ".join(["?" for _ in snippet_data])
    query = f"INSERT INTO ml_training_snippets ({columns}) VALUES ({placeholders})"

    # Execute the query
    cursor.execute(query, tuple(snippet_data.values()))
    connection.commit()

    # Get the ID of the newly created record
    new_id = cursor.lastrowid

    # Close the connection
    connection.close()

    # Return the ID of the new record
    return {"id": new_id, "status": 201}

def verify_root_access():
    # Simulate root access verification
    return True

def can_create_snippet():
    # Simulate checking if snippet creation is allowed
    return True

# Example usage
snippet_data = {
    "pushed": 1627849200,
    "uri": "example_uri",
    "prompt": "example_prompt",
    "completion": "example_completion",
    "meta": "example_meta",
    "type": "example_type",
    "cached": 1
}
try:
    result = create_ml_training_snippet("magic.db", snippet_data)
    print(result)
except PermissionError as e:
    print(e)

*/