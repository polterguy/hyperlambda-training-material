
// Store a single fact about the user into long term memory - With Python equivalent
.arguments
   _session:string
   _user-id:string
   _type:string

   // Mandatory argument being the type of information to store, such as for instance "name", "email", etc.
   name:string

   // Mandatory argument and is the value of the argument such as for instance "John Doe" or "john@doe.com", etc.
   value:string
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/value

// Opening up our database connection to store fact.
data.connect:[generic|magic]

   // Creating our ml_requests item.
   data.create
      table:ml_requests
      values
         type:x:@.arguments/*/_type
         prompt:x:@.arguments/*/name
         completion:x:@.arguments/*/value
         finish_reason:questionnaire
         questionnaire:int:1
         user_id:x:@.arguments/*/_user-id
         session:x:@.arguments/*/_session
         context:int:1

// Returning success to caller.
return
   result:success


/*

# Python equivalent
import requests
import json

def post_request_and_process():
    url = "https://huggingface.co/api/inference-proxy/together/v1/chat/completions"
    headers = {
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B",
        "max_tokens": 500,
        "stream": False,
        "messages": [
            {
                "role": "user",
                "content": "Was Julian Assange guilty of sexual assault? Answer in one sentence!"
            }
        ]
    }
    
    response = requests.post(url, headers=headers, json=payload)
    response_content = response.json()
    
    result = ""
    for message in response_content.get('content', '').split("\n"):
        result += message
    
    result = result.replace("\n", "\n")
    return result

*/