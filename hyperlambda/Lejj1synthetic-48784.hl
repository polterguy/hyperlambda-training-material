
// Write a Hyperlambda script for an OpenAI AI search endpoint returning only references to matching training snippets. - With Python equivalent
.arguments
   prompt:string
   type:string
   recaptcha_response:string
   max:int
.type:public

// Invoking slot containing commonalities for all endpoints.
insert-before:x:../*/signal/*/.callback
   get-nodes:x:@.arguments/*
signal:magic.ai.endpoint-common
   .callback

      // Invoking slot responsible for returning URLs to us.
      add:x:+
         get-nodes:x:@.arguments/*
      signal:magic.ai.search

      // Returning results of above invocation to caller.
      add:x:./*/return-nodes/*/snippets
         get-nodes:x:@signal/*/snippets/*
      add:x:./*/return-nodes
         get-nodes:x:@signal/*/db_time
      return-nodes
         snippets

/*
 * Applying some HTTP caching to avoid invoking OpenAI again with
 * the same question before some minimum amount of time has passed.
 * 
 * Notice, we can apply more "aggressive" caching here than in our
 * chat endpoints, since the same query will mostly always return
 * the same result, since there is no room for "creativity" here.
 */
response.headers.set
   Cache-Control:max-age=300

// Returning result of worker slot to caller.
return-nodes:x:@signal/*


/*

# Python equivalent
def ai_search_endpoint(prompt, search_type, recaptcha_response, max_results):
    """
    This function serves as an AI search endpoint returning only references to matching training snippets.
    
    :param prompt: The search prompt
    :param search_type: The type of search
    :param recaptcha_response: The recaptcha response string
    :param max_results: Maximum number of results to return
    :return: References to matching training snippets
    """
    # Collect arguments
    arguments = {
        "prompt": prompt,
        "type": search_type,
        "recaptcha_response": recaptcha_response,
        "max": max_results
    }
    
    # Simulate signaling the common AI endpoint
    response = signal_magic_ai_endpoint_common(arguments)
    
    # Set cache control header
    set_cache_control_header(300)
    
    # Return the response
    return response

def signal_magic_ai_endpoint_common(arguments):
    # This function would interact with the AI search logic
    # Placeholder for actual implementation
    return {"snippets": [], "db_time": 0}

def set_cache_control_header(max_age):
    # This function sets the cache control header
    # Placeholder for actual implementation
    pass

*/