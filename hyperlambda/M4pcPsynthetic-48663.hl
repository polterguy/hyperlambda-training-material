
// Create a Hyperlambda script for an endpoint that counts items from the roles table in the magic database according to specified arguments, ensuring authentication and authorization for root roles. - With Python equivalent
.arguments
   operator:string
   name.eq:string
   name.like:string
   description.like:string
.type:crud-count

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/operator
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:roles
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*


/*

# Python equivalent
import sqlite3

def delete_role_record(database, name):
    # Simulate verifying root access
    if not verify_root_access():
        raise PermissionError("Root access required")

    # Validate the name
    if not name:
        raise ValueError("Name is mandatory")

    # Connect to the specified database
    connection = sqlite3.connect(database)
    cursor = connection.cursor()

    # Build the SQL query
    query = "DELETE FROM roles WHERE name = ?"

    # Execute the query
    cursor.execute(query, (name,))
    connection.commit()

    # Get the number of affected rows
    affected_rows = cursor.rowcount

    # Close the connection
    connection.close()

    # Return the number of affected rows
    return {"affected": affected_rows}

def verify_root_access():
    # Simulate root access verification
    return True

# Example usage
try:
    result = delete_role_record("magic.db", "admin")
    print(result)
except (ValueError, PermissionError) as e:
    print(e)

*/