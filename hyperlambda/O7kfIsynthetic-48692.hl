
// Create a Hyperlambda script that generates a long-lasting JWT token with the specified username and role, expiring on the specified date, ensuring the user is authorized. - With Python equivalent
.arguments

   // Mandatory username for token we should generate. Does not need to be an existing user from the database.
   username:string

   // Mandatory argument being the role the returned JWT token should be associated with.
   role:string

   // Mandatory expiration date for the token. Can be any future date and time.
   expires:date
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/role
validators.mandatory:x:@.arguments/*/expires

/*
 * Invokes [auth.ticket.create] to create our JWT token,
 * making sure we return the token to the caller.
 */
auth.ticket.create
   username:x:@.arguments/*/username
   expires:x:@.arguments/*/expires
   roles
      .:x:@.arguments/*/role

// Returns the authentication JWT ticket created above to caller.
unwrap:x:+/*
return
   ticket:x:@auth.ticket.create


/*

# Python equivalent
def join_values(values, separator=""):
    # Validate the values
    if not values:
        raise ValueError("Values are mandatory")

    # Join the values with the specified separator
    joined_result = separator.join(values)

    # Return the joined result
    return {"result": joined_result}

# Example usage
try:
    result = join_values(["apple", "banana", "cherry"], ", ")
    print(result)
except ValueError as e:
    print(e)

*/