
// Registers the specified [username] as a user in the system, with the specified [password]. - With Python equivalent
.arguments
   username
      type:string
      mandatory:bool:true
   password
      type:string
      mandatory:bool:true
.icon:supervisor_account

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password
validators.regex:x:@.arguments/*/username
   regex:[a-z0-9-]{2,20}
validators.string:x:@.arguments/*/password
   min:12

// Hashing user's password.
crypto.password.hash:x:@.arguments/*/password

// Opens up database connection.
data.connect:[generic|magic]

   // Inserting user into database.
   data.create
      table:users
      values
         username:x:@.arguments/*/username
         password:x:@crypto.password.hash


/*

# Python equivalent
import sqlite3
import re
import hashlib

def register_user(username, password):
    """
    This function registers the specified username as a user in the system, with the specified password.
    
    :param username: The username to register
    :param password: The password for the user
    :raises ValueError: If username or password is not provided, or if they do not meet validation criteria
    """
    # Validate mandatory fields
    if not username:
        raise ValueError("Username is mandatory")
    if not password:
        raise ValueError("Password is mandatory")
    
    # Validate username with regex
    if not re.match(r"^[a-z0-9-]{2,20}$", username):
        raise ValueError("Username must be 2-20 characters long and contain only lowercase letters, numbers, and hyphens")
    
    # Validate password length
    if len(password) < 12:
        raise ValueError("Password must be at least 12 characters long")
    
    # Hash the password
    hashed_password = hash_password(password)
    
    # Connect to the SQLite database
    conn = sqlite3.connect('magic.db')
    cursor = conn.cursor()
    
    # Insert the new user
    cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
    
    # Commit and close the connection
    conn.commit()
    cursor.close()
    conn.close()

def hash_password(password):
    # Hash the password using SHA-256
    return hashlib.sha256(password.encode()).hexdigest()

# Example usage
# register_user("example_user", "new_secure_password")

*/