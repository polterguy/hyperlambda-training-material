
// Removes the specified [extra] field(s) from the specified [username]. - With Python equivalent
.arguments
   username
      type:string
      mandatory:bool:true
   extra
      type:array
      mandatory:bool:true
.icon:supervisor_account

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/extra

// Connecting to database.
data.connect:[generic|magic]

   // Verifying user exists.
   data.read
      table:users
      columns
         username
      where
         and
            username.eq:x:@.arguments/*/username

   // Verifying above invocation returned something.
   if
      not-exists:x:@data.read/*
      .lambda

         // Oops ...!!
         throw:No such user
            username:x:@.arguments/*/username

   // Removing extra fields from user.
   for-each:x:@.arguments/*/extra/*
      data.delete
         table:users_extra
         where
            and
               user.eq:x:@.arguments/*/username
               type.eq:x:@.dp/#


/*

# Python equivalent
import sqlite3

def remove_extra_fields(username, extra):
    """
    This function removes the specified extra field(s) from the specified username.
    
    :param username: The username from which to remove extra fields
    :param extra: A list of extra fields to remove
    :raises ValueError: If username or extra fields are not provided
    :raises Exception: If the user does not exist
    """
    # Validate mandatory fields
    if not username:
        raise ValueError("Username is mandatory")
    if not extra:
        raise ValueError("Extra fields are mandatory")
    
    # Connect to the SQLite database
    conn = sqlite3.connect('magic.db')
    cursor = conn.cursor()
    
    # Check if the user exists
    cursor.execute("SELECT username FROM users WHERE username = ?", (username,))
    if not cursor.fetchone():
        raise Exception(f"No such user: {username}")
    
    # Remove the specified extra fields
    for field in extra:
        cursor.execute("DELETE FROM users_extra WHERE user = ? AND type = ?", (username, field))
    
    # Commit and close the connection
    conn.commit()
    cursor.close()
    conn.close()

# Example usage
# remove_extra_fields("example_user", ["field1", "field2"])

*/