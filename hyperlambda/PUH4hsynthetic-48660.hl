
// Create a Hyperlambda script for a CRUD create endpoint that inserts one record into the questions table in the magic database, taking question and questionnaire, ensuring authentication and authorization for root and admin roles. - With Python equivalent
.arguments
   question:string
   questionnaire:string
   type:string
   name:string
.type:crud-create

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
.foreign-keys
   .
      column:questionnaire
      table:questionnaires
      foreign_column:name
      foreign_name:name
      long:bool:true

// Opening up database connection.
data.connect:[generic|magic]
   database-type:sqlite

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      database-type:sqlite
      table:questions
      return-id:bool:true
      values

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      id:x:@data.create


/*

# Python equivalent
import sqlite3

def count_roles(database, filters=None, operator="and"):
    # Simulate verifying root access
    if not verify_root_access():
        raise PermissionError("Root access required")

    # Validate the operator
    if operator not in ["or", "and"]:
        raise ValueError("Invalid operator. Choose 'or' or 'and'")

    # Connect to the specified database
    connection = sqlite3.connect(database)
    cursor = connection.cursor()

    # Build the SQL query
    query = "SELECT COUNT(*) as count FROM roles"
    conditions = []
    parameters = []

    # Add filters to the query
    if filters:
        for key, value in filters.items():
            if key.endswith(".like"):
                conditions.append(f"{key.split('.')[0]} LIKE ?")
                parameters.append(f"%{value}%")
            elif key.endswith(".eq"):
                conditions.append(f"{key.split('.')[0]} = ?")
                parameters.append(value)

    if conditions:
        query += " WHERE " + f" {operator} ".join(conditions)

    # Execute the query
    cursor.execute(query, parameters)
    result = cursor.fetchone()

    # Close the connection
    connection.close()

    # Return the count
    return {"count": result[0]}

def verify_root_access():
    # Simulate root access verification
    return True

# Example usage
filters = {
    "name.eq": "admin",
    "description.like": "role"
}
try:
    result = count_roles("magic.db", filters, operator="or")
    print(result)
except (ValueError, PermissionError) as e:
    print(e)

*/