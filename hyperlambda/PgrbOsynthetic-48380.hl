
// Create a Hyperlambda action to throw an exception with a mandatory 'message'. Optionally include 'status' and 'public' to control HTTP propagation and status code. Validate and apply defaults. - With Python equivalent
.arguments

   // Notice, this is action syntax
   message
      type:string
      mandatory:bool:true
   status
      type:int
      mandatory:bool:false
   public
      type:bool
      mandatory:bool:false
.icon:warning

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/message

// Applying defaults.
validators.default:x:@.arguments
   status:int:500
   public:bool:false

// Throwing exception.
throw:x:@.arguments/*/message
   public:x:@.arguments/*/public
   status:x:@.arguments/*/status


/*

# Python equivalent
def copy_and_append_nodes():
    input1 = {
        "itemA": "dataA",
        "itemB": "dataB",
        "itemC": "dataC"
    }
    
    input2 = {
        "itemD": "dataD",
        "itemE": "dataE",
        "itemF": "dataF"
    }
    
    output = {}
    
    # Copy nodes from input1 and input2 and append them into output
    output.update(input1)
    output.update(input2)
    
    return output

# Example usage
result = copy_and_append_nodes()
print(result)

*/