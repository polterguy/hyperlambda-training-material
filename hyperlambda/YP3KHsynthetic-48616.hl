
// Create a Hyperlambda script to delete one record from a specified table in a database with optional filtering arguments. - With Python equivalent
.arguments

// Meta data description for endpoint

// Type of endpoint
.type:crud-delete

// Opening up our database connection.
data.connect:{database}
   database-type:{database-type}

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:{database-type}
      table:{table}
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete


/*

# Python equivalent
import sqlite3

def create_record_in_table(database, table, values):
    # Connect to the specified database
    connection = sqlite3.connect(database)
    cursor = connection.cursor()

    # Build the SQL query
    columns = ", ".join(values.keys())
    placeholders = ", ".join(["?" for _ in values])
    query = f"INSERT INTO {table} ({columns}) VALUES ({placeholders})"

    # Execute the query
    cursor.execute(query, tuple(values.values()))
    connection.commit()

    # Get the ID of the newly created record
    new_id = cursor.lastrowid

    # Close the connection
    connection.close()

    # Return the ID of the new record
    return {"id": new_id}

# Example usage
values = {"name": "John Doe", "age": 30}
result = create_record_in_table("example.db", "example_table", values)
print(result)

*/