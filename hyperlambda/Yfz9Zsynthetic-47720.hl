
/*
 * Creates a new Stripe payment for the given [customer_id], using the
 * specified [payment_method_id], for the given [amount], in the given [currency].
 * 
 * Will use your Stripe API token found from your settings as it's interacting
 * with the Stripe API. - With Python equivalent
 */
.arguments
   amount:int

// ... more code here ...

// Executing action from Stripe plugin doing the heavy lifting ...
execute:magic.workflows.actions.execute
   name:stripe-payment-create
   filename:/modules/stripe/workflows/actions/stripe-payment-create.hl
   arguments

      // Will use the [customer_id] from a previous action
      customer_id:x:--/execute/=stripe-customer-create/*/customer_id

      // Will use the [payment_method_id] from a previous action
      payment_method_id:x:--/execute/=stripe-payment-method-create/*/payment_method_id
      amount:x:@.arguments/*/amount
      currency:usd
      description:Payment from Magic
      metadata

         // Notice, since we're using [execute] we don't have to use [unwrap], since all expressions are automatically unwrapped when using [execute].
         username:x:@.arguments/*/username

// This code depends upon the Stripe plugin being installed


/*

# Python equivalent
import stripe

def create_stripe_payment(amount, customer_id, payment_method_id, username):
    # Set your secret key: remember to switch to your live secret key in production
    stripe.api_key = "your_secret_key"

    # Create a payment intent
    payment_intent = stripe.PaymentIntent.create(
        amount=amount,
        currency="usd",
        customer=customer_id,
        payment_method=payment_method_id,
        description="Payment from Magic",
        metadata={"username": username},
        confirm=True
    )

    return payment_intent

# Example usage
amount = 5000  # Amount in cents
customer_id = "cus_123456789"
payment_method_id = "pm_123456789"
username = "example_user"
payment_intent = create_stripe_payment(amount, customer_id, payment_method_id, username)
print(payment_intent)

*/