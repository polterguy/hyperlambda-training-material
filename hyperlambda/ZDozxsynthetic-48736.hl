
// Write a Hyperlambda script to load a specified file and return it as 'application/octet-stream' with appropriate headers. - With Python equivalent
.arguments
   access_token:string
   file:string
.type:internal

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/access_token

/*
 * Loading file and returning it, as text content to caller, making
 * sure we return the correct Content-Type in the process.
 */
strings.split:x:@.arguments/*/file
   .:/
strings.concat
   .:"attachment; filename=\""
   get-value:x:@strings.split/0/-
   .:"\""
response.headers.set
   Content-Type:application/octet-stream
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition
io.stream.open-file:x:@.arguments/*/file
return:x:-


/*

# Python equivalent
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/get-cookie', methods=['GET'])
def get_cookie():
    # Get the cookie name from request arguments
    cookie_name = request.args.get('name')

    # Validate the cookie name
    if not cookie_name:
        return jsonify({"error": "Cookie name is mandatory"}), 400

    # Retrieve the cookie value
    cookie_value = request.cookies.get(cookie_name)

    # Return the cookie value
    return jsonify({"result": cookie_value})

# Example usage: Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)

*/