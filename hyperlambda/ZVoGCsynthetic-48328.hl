
// Returns the training snippet with the specified [id] to the caller. - With Python equivalent
.arguments

   // Mandatory argument and the primary key and ID of the training snippet to return
   id:int
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/id
validators.integer:x:@.arguments/*/id
   min:int:0

// Opening up our database connection.
data.connect:[generic|magic]

   // Finding our snippet from the database.
   data.read
      table:ml_training_snippets
      columns
         prompt
         completion
         uri
      where
         and
            id.eq:x:@.arguments/*/id
   return-nodes:x:@data.read/*


/*

# Python equivalent
def scrape_hyperlinks(url: str, starts_with: str, max_links: int):
    import requests
    from bs4 import BeautifulSoup
    
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    links = [a['href'] for a in soup.find_all('a', href=True) if a['href'].startswith(starts_with)]
    
    return links[:max_links]

*/