
// CRUD endpoint that counts items from your Categories table in your northwind database - With Python equivalent
.arguments
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.eq:string

// Meta data description for endpoint

// Type of endpoint
.type:crud-count

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*


/*

# Python equivalent
import sqlite3

def count_categories(filters):
    # Connect to the northwind database
    conn = sqlite3.connect('northwind.db')
    cursor = conn.cursor()

    try:
        # Construct the SQL query with filters
        query = "SELECT COUNT(*) as count FROM Categories WHERE 1=1"
        params = []

        for key, value in filters.items():
            if value is not None:
                if "like" in key:
                    query += f" AND {key.split('.')[1]} LIKE ?"
                    params.append(f"%{value}%")
                else:
                    query += f" AND {key.split('.')[1]} = ?"
                    params.append(value)

        # Execute the query
        cursor.execute(query, params)
        result = cursor.fetchone()

        # Return the count
        return result[0]
    finally:
        conn.close()

# Example usage
filters = {
    "Categories.CategoryID.eq": None,
    "Categories.CategoryName.like": "Beverages",
    "Categories.CategoryName.eq": None,
    "Categories.Description.like": None,
    "Categories.Description.eq": None,
    "Categories.Picture.like": None,
    "Categories.Picture.eq": None
}
count = count_categories(filters)
print(count)

*/