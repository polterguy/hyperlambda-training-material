
// Update one record in your address table in your sakila database without authorization. Log invocation
.arguments

   // address_id column value being primary key of record to update, mandatory argument
   address_id:long

   // address column's new value
   address:string

   // district column's new value
   district:string

   // city_id column's new value
   city_id:long

   // phone column's new value
   phone:string

// Meta data description for endpoint
.description:Update one record in your address table in your sakila database

// Type of endpoint
.type:crud-update

// Columns with custom handling as we generate a frontend
.handling
   phone:phone

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/address_id

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:sakila.address entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Opening up our database connection.
data.connect:[generic|sakila]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:address
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
