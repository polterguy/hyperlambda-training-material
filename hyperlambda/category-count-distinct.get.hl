
// Count unique and distinct items from your category table in your sakila database without authorization
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   category.category_id.mt:long
   category.category_id.lt:long
   category.category_id.mteq:long
   category.category_id.lteq:long
   category.category_id.neq:long
   category.category_id.eq:long
   category.name.like:string
   category.name.mt:string
   category.name.lt:string
   category.name.mteq:string
   category.name.lteq:string
   category.name.neq:string
   category.name.eq:string
   category.last_update.mt:date
   category.last_update.lt:date
   category.last_update.mteq:date
   category.last_update.lteq:date
   category.last_update.neq:date
   category.last_update.eq:date

// Meta data description for endpoint
.description:Count unique and distinct items from your category table in your sakila database

// Type of endpoint
.type:crud-count-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:category.category_id
   .:category.name
   .:category.last_update

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|sakila]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:category
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
