/*
 * Creates a new chatbot on the current cloudlet.
 */
.arguments
   url:string
   name:string
   email:string
   recaptcha_response:string
   secret:string
   feedback-channel:string

   // Legacy, not used.
   cloudlet:string
.description:Creates a new chatbot and AI expert system on the current cloudlet.

// Secret to bypass reCAPTCHA.
.secret:xciug4875dsihsc37t

// Sanity checking invocation
validators.mandatory:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/email
validators.string:x:@.arguments/*/name
   min:1

// Basic logging.
log.info:Create bot invoked
   url:x:@.arguments/*/url
   name:x:@.arguments/*/name
   email:x:@.arguments/*/email

// Prepending scheme unless given.
if
   and
      not
         strings.starts-with:x:@.arguments/*/url
            .:"http://"
      not
         strings.starts-with:x:@.arguments/*/url
            .:"https://"
   .lambda
      set-value:x:@.arguments/*/url
         strings.concat
            .:"https://"
            get-value:x:@.arguments/*/url

// Pushing contact to HubSpot.
try
   execute-file:/modules/hubspot/contacts.post.hl
      email:x:@.arguments/*/email
      firstname:x:@.arguments/*/name
      website:x:@.arguments/*/url
.catch
   log.error:Could not push contact to HubSpot
      message:x:@.arguments/*/message

// Removing path.
strings.split:x:@.arguments/*/url
   .:/
set-value:x:@.arguments/*/url
   strings.concat
      get-value:x:@strings.split/0
      .:"//"
      get-value:x:@strings.split/1

// Making sure URL does not contain CAPS characters.
set-value:x:@.arguments/*/url
   strings.to-lower:x:@.arguments/*/url

// More sanity checking.
validators.url:x:@.arguments/*/url
validators.email:x:@.arguments/*/email

// Verifying URL contains a "." character.
if
   not
      strings.contains:x:@.arguments/*/url
         .:.
   .lambda

      // Oops, not valid URL.
      throw:Not a valid URL
         public:bool:true
         status:int:400

// CAPTCHA sanity check.
execute:magic.auth.captcha-verify
   token:x:@.arguments/*/recaptcha_response

/*
 * To avoid null reference exceptions in case feedback channel
 * is not provided, we default it to something random.
 */
if
   not-exists:x:@.arguments/*/feedback-channel
   .lambda

      // Creating default dummy value.
      crypto.random
         min:10
         max:20
      unwrap:x:+/*
      validators.default:x:@.arguments
         feedback-channel:x:@crypto.random

// Figuring out what to name our type.
.type
set-value:x:@.type
   strings.replace:x:@.arguments/*/url
      .:"http://"
      .:
set-value:x:@.type
   strings.replace:x:@.type
      .:"https://"
      .:
set-value:x:@.type
   strings.replace:x:@.type
      .:"."
      .:_
crypto.random
   min:15
   max:15
strings.to-lower:x:-
set-value:x:@.type
   strings.concat
      get-value:x:@.type
      .:_
      get-value:x:@strings.to-lower

// Informing client what model we're using to generate chatbot.
strings.concat
   .:"Creating AINIRO machine learning model named '"
   get-value:x:@.type
   .:"'"
unwrap:x:+/*/args/**
sockets.signal:x:@.arguments/*/feedback-channel
   args
      message:x:@strings.concat
      type:info
sleep:100

// Informing client that we've successfully started crawling.
strings.concat
   .:"Crawling website "
   get-value:x:@.arguments/*/url
unwrap:x:+/*/args/**
sockets.signal:x:@.arguments/*/feedback-channel
   args
      message:x:@strings.concat
      type:info
sleep:100

// Informing client that he or she can leave the page.
sockets.signal:x:@.arguments/*/feedback-channel
   args
      message:Notice, you can close or leave this page if you want to, we will send you an email when the process is done
      type:info
sleep:100            

// Checking if email has already been used, and if so, returning error.
data.connect:[generic|white-label]

   // Reading from demo_bots where email matches specified argument.
   data.read
      table:demo_bots
      where
         and
            email.eq:x:@.arguments/*/email

   // Verifying that above invocation didn't return any records.
   if
      and
         exists:x:@data.read/*
         mte
            convert:x:@data.read/*/*/version
               type:int
            .:int:3
      .lambda

         // Oops, email address has already been used to create a demo chatbot.
         .from-email
         set-value:x:@.from-email
            config.get:"magic:smtp:from:address"
         .from-name
         set-value:x:@.from-name
            config.get:"magic:smtp:from:name"
         strings.concat
            .:"User tried to create a second demo chatbot, email address was "
            get-value:x:@.arguments/*/email
            .:", name was "
            get-value:x:@.arguments/*/name
            .:", URL was "
            get-value:x:@.arguments/*/url
         unwrap:x:+/**
         mail.smtp.send
            message
               to
                  .
                     name:x:@.from-name
                     email:x:@.from-email
               reply-to
                  .
                     name:x:@.arguments/*/name
                     email:x:@.arguments/*/email
               subject:User tried to create a second demo chatbot
               entity:text/html
                  content:x:@strings.concat

         // Logging and returning error to caller.
         log.error:Email address already used to create demo chatbot
            email:x:@.arguments/*/email
         response.status.set:449
         return
            error:This email address has already been used to create a demo chatbot

   // Creating our record.
   if
      not-exists:x:@data.read/*
      .lambda

         // User has not previously create a demo chatbot, hence storing email address.
         data.create
            table:demo_bots
            values
               email:x:@.arguments/*/email
               name:x:@.arguments/*/name
               url:x:@.arguments/*/url
               type:x:@.type

   else

      // Updating version for record.
      data.update
         table:demo_bots
         values
            version:int:3
         where
            and
               email.eq:x:@.arguments/*/email

// Doing some basic logging.
log.info:Crawling URL to generate training data for chatbot
   url:x:@.arguments/*/url
   name:x:@.arguments/*/name
   email:x:@.arguments/*/email

// Making sure we trap exceptions.
try

   unwrap:x:./**/.args-input/*

   // Creating our type
   data.connect:[generic|magic]

      // Verifying cloudlet can handle a-(nother) machine learning model.
      try
         try-signal:magic.ai.can-create-machine-learning-model
      .catch

         // Oops, cloudlet cannot handle more Machine Learning models.
         .from-email
         set-value:x:@.from-email
            config.get:"magic:smtp:from:address"
         .from-name
         set-value:x:@.from-name
            config.get:"magic:smtp:from:name"
         strings.concat
            .:"We were unable to handle a request for a demo chatbot because cloudlet is full, email address was "
            get-value:x:@.arguments/*/email
            .:", name was "
            get-value:x:@.arguments/*/name
            .:", URL was "
            get-value:x:@.arguments/*/url
         unwrap:x:+/**
         mail.smtp.send
            message
               to
                  .
                     name:x:@.from-name
                     email:x:@.from-email
               subject:Your cloudlet cannot handle more machine learning models
               entity:text/html
                  content:x:@strings.concat
         response.status.set:450
         return
            error:Cloudlet is full

      // Figuring out model to use.
      .model
      set-value:x:@.model
         get-first-value
            config.get:"magic:white-label:default-model"
            .:gpt-4o-mini

      // Informing user.
      strings.concat
         .:"Using '"
         get-value:x:@.model
         .:"' from OpenAI as our base Machine Learning model"
      unwrap:x:+/*/args/**
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:x:@strings.concat
            type:info

      // Retrieving default greeting from configuration.
      .greeting
      set-value:x:@.greeting
         get-first-value
            config.get:"magic:white-label:greeting"
            .:"Hi there, I am Frank, AINIRO's friendly AI chatbot. How can I help you today? ðŸ˜Š"

      // Retrieving default initial questionnaire from configuration if existing.
      .default-questionnaire
      set-value:x:@.default-questionnaire
         get-first-value
            config.get:"magic:white-label:default-questionnaire"
      if
         and
            not-null:x:@.default-questionnaire
            neq:x:@.default-questionnaire
               .:
         .lambda
            unwrap:x:+/*/*
            add:x:@data.connect/*/data.create/[0,1]/*/values
               .
                  initial_questionnaire:x:@.default-questionnaire

      // Scraping root URL to create conversation starters, and to verify we can scrape URL.
      strings.concat
         .:"Scraping URL "
         get-value:x:@.arguments/*/url
         .:" to generate some default conversation starters."
      unwrap:x:+/*/*
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:x:@strings.concat
            type:info
      .conversation-starters
      execute:wl.get-conversation-starters
         url:x:@.arguments/*/url
      set-value:x:@.conversation-starters
         get-value:x:@execute/*/answer

      // Creating our type.
      data.create
         table:ml_types
         values
            type:x:@.type
            model:x:@.model
            max_tokens:int:1000
            max_context_tokens:int:2000
            max_request_tokens:int:250
            temperature:decimal:0.3
            recaptcha:decimal:0.0
            conversation_starters:x:@.conversation-starters
            supervised:int:1
            cached:int:0
            use_embeddings:int:1
            threshold:decimal:0.3
            vector_model:text-embedding-ada-002
            lead_email:x:@.arguments/*/email
            max_requests:int:500
            contact_us:"Thank you, I have sent an email to my human. I am certain somebody will contact you soon ðŸ˜Š"
            greeting:x:@.greeting
            system_message:@"You are Frank, a sales executive for the company in the context. Follow these rules when replying to my questions:

// 1. You should answer my questions based upon information found in the context, as long as the context contains information related to my question. If the context does not contain relevant information, then answer my question to the best of your abilities.
// 2. At every opportunity you have, you will recommend relevant products from the context.
// 3. Keep your answers short and concise.
// 4. Use emojis where it makes sense."

   // Invoking slot doing the heavy lifting.
   request.host
   add:x:./*/signal
      get-nodes:x:@.arguments/*
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/type
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.type
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.url
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.host
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.name
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.email
   unwrap:x:./*/signal/=magic.ai.crawl-site/*/.onafter/*/.feedback-channel
   signal:magic.ai.crawl-site
      delay:int:1000
      threshold:int:150
      summarize:bool:true
      max:int:50
      type:x:@.type
      .onerror

         // Connecting to database to delete model.
         data.connect:[generic|magic]

            // Deleting model.
            data.delete
               table:ml_types
               where
                  and
                     type.eq:x:@.type

         log.error:Trying to send lead email heads up that demo bot could not be created
         .from-email
         set-value:x:@.from-email
            config.get:"magic:smtp:from:address"
         .from-name
         set-value:x:@.from-name
            config.get:"magic:smtp:from:name"
         strings.concat
            .:"We were unable to handle a request for a demo chatbot, email address was "
            get-value:x:@.arguments/*/email
            .:", name was "
            get-value:x:@.arguments/*/name
            .:", URL was "
            get-value:x:@.arguments/*/url
            .:"\r\n"
            .:"\r\n"
            .:"Error was: "
            get-value:x:@.arguments/*/message
         unwrap:x:+/**
         mail.smtp.send
            message
               to
                  .
                     name:x:@.from-name
                     email:x:@.from-email
               subject:Could not create demo chatbot
               entity:text/html
                  content:x:@strings.concat

      .onafter

         // Forward evaluated further up.
         .type:x:@.type
         .url:x:@.arguments/*/url
         .host:x:@request.host
         .name:x:@.arguments/*/name
         .email:x:@.arguments/*/email
         .feedback-channel:x:@.arguments/*/feedback-channel

         // Connecting to database to count snippets.
         data.connect:[generic|magic]

            // Making sure we actually have training snippets in model.
            data.read
               table:ml_training_snippets
               columns
                  count(*)
                     as:count
               where
                  and
                     type.eq:x:@.type

         // Verifying we've got training snippets for model in database.
         if
            eq
               convert:x:@data.connect/*/data.read/*/*/count
                  type:int
               .:int:0
            .lambda

               // Informing client.
               sockets.signal:x:@.feedback-channel
                  args
                     message:We could not find any training data on your website
                     type:error

               // Connecting to database to delete model.
               data.connect:[generic|magic]

                  // Deleting model.
                  data.delete
                     table:ml_types
                     where
                        and
                           type.eq:x:@.type

               // Caught further down in code.
               throw:We could not find any training data on your website

         else

            // Informing client of how many training snippets we created in total.
            strings.concat
               .:"We found "
               get-value:x:@data.connect/*/data.read/*/*/count
               .:" training snippets we could use on website in total"
            unwrap:x:+/**
            sockets.signal:x:@.feedback-channel
               args
                  message:x:@strings.concat
                  type:info
            sleep:100

            // Verifying we've got at least 10 training snippets, and if not, warning user.
            if
               lt
                  convert:x:@data.connect/*/data.read/*/*/count
                     type:int
                  .:int:10
               .lambda

                  // Warning user about quality of chatbot.
                  strings.concat
                     .:"Warning! Only "
                     get-value:x:@data.connect/*/data.read/*/*/count
                     .:" training snippets will provide a poor chatbot experience!"
                  unwrap:x:+/**
                  sockets.signal:x:@.feedback-channel
                     args
                        message:x:@strings.concat
                        type:warning
                  sleep:100

            // Informing user that we're about to insert standard training snippets.
            sockets.signal:x:@.feedback-channel
               args
                  message:Adding standard training snippets to model
                  type:info
            sleep:100

            // Connecting to database to insert standard snippets.
            data.connect:[generic|magic]

               // Creating our default training snippets.
               data.create
                  table:ml_training_snippets
                  values
                     meta:ainiro-standard-snippet
                     type:x:@.type
                     prompt:Who created this ChatGPT website chatbot?
                     completion:@"This chatbot is a custom ChatGPT chatbot allowing you to use natural language to ask questions related to the website you're currently visiting. It was created by [AINIRO.IO](https://ainiro.io). AINIRO have ChatGPT solutions allowing you to scrape your website and create publicly available ChatGPT AI chatbots and AI Based search similar to Bing."
                     uri:"https://ainiro.io"
               data.create
                  table:ml_training_snippets
                  values
                     meta:ainiro-standard-snippet
                     type:x:@.type
                     prompt:Contact us and speak to a human
                     completion:@"To contact us you can leave your name and email in the prompt and one of my human collagues will contact you ðŸ˜Š"
                     uri:"https://ainiro.io"
               data.create
                  table:ml_training_snippets
                  values
                     meta:ainiro-standard-snippet
                     type:x:@.type
                     prompt:Who are you?
                     completion:@"I am Frank, your friendly neighbourhood AI chatbot. I am temporarily working for you as a free 7-day demo chatbot. You can see an image of me below.
![Frank your friendy AI chatbot](https://ainiro.io/assets/images/chatgpt-chatbot-robot.webp)"
                     cached:int:0
                     uri:"https://ainiro.io"

            // Creating landing page.
            sockets.signal:x:@.feedback-channel
               args
                  message:Creating a default landing page by copying the root URL
                  type:info
            unwrap:x:+/*
            signal:magic.ai.create-landing-page
               url:x:@.url
               type:x:@.type
               host:x:@.host
               feedback-channel:x:@.feedback-channel

            /*
             * Caller selected a dynamic system message and provided an instruction
             * to create a custom system message.
             */
            sockets.signal:x:@.feedback-channel
               args
                  message:Invoking OpenAI to create a custom system message. Notice, this might take some time ...
                  type:info

            // Catching exceptions to make sure we continue in case of error.
            try

               // Invoking slot responsible for creating custom system message.
               execute:magic.ai.create-system-message
                  url:x:@.url
                  template:"**About [[COMPANY]]**:\n\n[[ABOUT_COMPANY]]\n\n**[[COMPANY]]'s value proposition**:\n\n[[VALUE_PROPOSITION]]\n\n**[[COMPANY]]'s solutions**:\n\n[[SOLUTIONS]]\n\n**[[COMPANY]]'s services are**:\n\n[[SERVICES]]\n\n**Social proof**:\n\n[[SOCIAL_PROOF]]\n\n**Your task**:\n\n[[TASK]]\n\n**[[COMPANY]]'s features**:\n\n[[FEATURES]]\n\n**Your tone of voice**:\n\nFriendly, professional tone of voice sounding like an employee from [[COMPANY]]. Do not make any follow-up promises and state that everything is tentative until confirmation by our staff. You are a sales chatbot employed by [[COMPANY]] and your name is Frank. Your task is to interact with users by continuing the conversation from the chat history provided above, in addition to the context and this system instruction.\n\n**Your Objective**:\n\nYour goal is to advance the sales conversation effectively, based on the business info above about [[COMPANY]], and the user's previous responses, the context, and your role as a sales agent - And you will determine the next appropriate stage in the sales process automatically based on the conversation and the user's previous messages.\n\n**Your Instructions**:\n\n- Review the chat history above to understand the context and the userâ€™s current position in the sales process.\n- Select the next logical conversation stage from the options listed below in the conversation stage options parts. Make sure to evaluate the user's needs, preferences, and responses appropriately. Do not return the name of the stage to the user, or in any other ways disclose what stage the user is currently in. Only use the stage for your benefit to try to convert the user into a customer.\n- Provide social proofs if you believe it is beneficial for the sales process.\n- If the user asks you a question that you cannot find the answer to in the context, then inform the user that you don't know the answer, and encourage the user to provide some relevant keywords.\n- You are under no circumstances allowed to answer questions not related to the context with any other answer than 'I don't know'.\n- You should return relevant images you find in the context as Markdown as follows ![image_description](image_url).\n- Only display images found in the context, do not generate Markdown for images you cannot find in the context.\n- Finish your response with --- and 3 follow up questions the user can ask you related to [[COMPANY]], [[PRODUCTS]] or [[SERVICES]]. These questions are intended to be displayed to the user as example follow up questions the user can ask you. DO NOT RETURN THESE AS QUESTIONS TO THE USER, RETURN THESE AS EXAMPLE OF QUESTIONS THE USER CAN ASK YOU.\n\n### Conversation Stage Options:\n\n1. **Greeting and Introduction**: Begin the interaction with a warm greeting and introduce yourself and [[COMPANY]]. This stage sets the tone for a consultative and engaging conversation, emphasizing the commitment to understanding and meeting the user's needs.\n2. **Qualification**: Evaluate the userâ€™s needs, budget, and decision-making authority to ascertain their potential as a customer. Even if the user seems unsure, this stage involves gently probing to uncover latent needs that the user may not have initially expressed. Ask the user what business they are in, what their needs are, and use the user's answer to guide the conversation forward.\n3. **Needs Assessment**: Engage the user with specific questions aimed at deeply understanding their challenges, goals, or requirements. This relentless pursuit of clarity ensures that all user needs are brought to light and addressed comprehensively.\n4. **Value Proposition**: Articulate the benefits and unique selling points of products or services from [[COMPANY]], customizing the message to the userâ€™s expressed needs. Incorporate social proof such as testimonials that resonate with the userâ€™s situation, enhancing credibility and relevance.\n5. **Product Recommendations**: Recommend products or services that align perfectly with the userâ€™s needs. Provide detailed information and comparisons, supported by customer testimonials or case studies, to build a strong case for the recommended options.\n6. **Presentation or Demonstration**: Showcase the product or service with dynamic images that emphasize the key features and benefits. This stage is crucial for visually and interactively engaging the user, making the benefits tangible.\n7. **Handling Objections**: Address any concerns or questions with detailed, reassuring responses. If the user hesitates, use success stories of customers with similar concerns to demonstrate how issues were resolved, thereby encouraging the user to reconsider their stance.\n8. **Pricing and Offers**: Present pricing details, special offers, or discounts tailored to the userâ€™s interests or negotiation points. This stage focuses on creating a compelling offer that aligns with the value the user will receive, encouraging the user to make a positive decision.\n9. **Closing**: Employ persuasive techniques to guide the user towards a purchase decision. Provide clear, step-by-step instructions on how to proceed with the purchase, reinforcing the decision with high satisfaction rates and positive reviews from other customers, and use the context to answer specific concerns or questions the user have about [[COMPANY]]'s products."
                  instruction:"I will give you some text in the form of Markdown. This text contains [[TEMPLATE]] fields, such as [[COMPANY]], [[PRODUCTS]], [[SERVICES]] etc. Your task is to use the information I specify in the next message to dynamically replace these template fields with the correct information you find in my next message while preserving everything else exactly as it is, including CR and LF characters. Your objective is to create a system instruction for an AI chatbot based upon GPT-4. Please create the system instruction at the best of your abilities, and return valid Markdown, without any irrelevant parts."

               // Updating system message to result returned from OpenAI.
               data.connect:[generic|magic]

                  // Checking if type already exists.
                  data.update
                     table:ml_types
                     values
                        system_message:x:@execute
                     where
                        and
                           type.eq:x:@.type

               // Separator.
               sockets.signal:x:@.feedback-channel
                  args
                     message:------------------------------------------------------------------------------------------------------------------------
                     type:info

            .catch

               // Oops ...!!
               log.error:x:@.arguments/*/message
               sockets.signal:x:@.feedback-channel
                  args
                     message:We could not create a custom system message, resorting to default system message
                     type:warning

            // Vectorising training data.
            unwrap:x:+/+/*/.onafter/*/.args/*
            unwrap:x:+/*
            signal:magic.ai.vectorise
               type:x:@.type
               host:x:@.host
               feedback-channel:x:@.arguments/*/feedback-channel
               .onafter

                  // Forward evaluated further up.
                  .args
                     type:x:@.type
                     url:x:@.arguments/*/url
                     host:x:@.host
                     name:x:@.name
                     email:x:@.email
                     feedback-channel:x:@.arguments/*/feedback-channel

                  // Adding spacer.
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:------------------------------------------------------------------------------------------------------------------------
                        type:info
                  sleep:100

                  // Informing user that demo will be deleted in 7 days.
                  sockets.signal:x:@.args/*/feedback-channel
                     args
                        message:Creating scheduled task that deletes demo 7 days from now
                        type:info
                  sleep:100

                  // Creating scheduled task that deletes chatbot 7 days from now.
                  math.add
                     date.now
                     time
                        days:7
                  strings.concat
                     .:delete-chatbot-
                     get-value:x:@.args/*/type
                  unwrap:x:+/+/*/.lambda/*/.task
                  unwrap:x:+/*/.lambda/*/.type
                  tasks.create:x:@strings.concat
                     description:Deletes demo chatbot 7 days after creating it
                     due:x:@math.add
                     .lambda

                        // Forward evaluated further up.
                        .type:x:@.args/*/type

                        // Deleting vectors.
                        data.connect:[generic|magic]
                           data.execute:@"
delete from vss_ml_training_snippets
   where rowid in (select id as rowid from ml_training_snippets where type = @type)"
                              type:x:@.type

                        // Deleting ML type.
                        .task:x:@strings.concat
                        data.connect:[generic|magic]
                           data.delete
                              table:ml_types
                              where
                                 and
                                    type.eq:x:@.type

                        // Deleting example HTML page.
                        strings.concat
                           .:/etc/www/
                           get-value:x:@.type
                           .:.html
                        io.file.delete:x:@strings.concat

                        // Doing some basic logging.
                        log.info:Demo chatbot was deleted
                           type:x:@.type

                        // Deleting currently executing task.
                        tasks.delete:x:@.task

                  // Informing user that we're about to send him an email.
                  sockets.signal:x:@.args/*/feedback-channel
                     args
                        message:Sending a link to the demo chatbot to your email
                        type:info
                  sleep:100

                  // Sending user email with chatbot embed script, and demo test page.
                  add:x:./*/signal/=wl.email.send-create
                     get-nodes:x:@.args/*/type
                     get-nodes:x:@.args/*/url
                     get-nodes:x:@.args/*/host
                     get-nodes:x:@.args/*/name
                     get-nodes:x:@.args/*/email
                  signal:wl.email.send-create

                  /*
                   * Checking if we've configured a white-label registration-slot,
                   * and invoking it if we do.
                   */
                  config.get:"magic:white-label:registration-slot"
                  if
                     and
                        not-null:x:@config.get
                        neq:x:@config.get
                           .:
                     .lambda

                        // Invoking callback slot from configuration.
                        .exe
                           signal:x:@config.get
                        add:x:@.exe/*/signal
                           get-nodes:x:@.args/*/name
                           get-nodes:x:@.args/*/email
                           get-nodes:x:@.args/*/type
                        unwrap:x:@.exe/*/signal
                        eval:x:@.exe

                  // Informing user that he needs to check his email in some few minutes.
                  sockets.signal:x:@.args/*/feedback-channel
                     args
                        message:Email successfully sent, check your email in some few minutes to try your demo chatbot
                        type:info
                  sleep:100
                  sockets.signal:x:@.args/*/feedback-channel
                     args
                        message:If you cannot find the email then check your spam folder!
                        type:info
                  sleep:100
                  sockets.signal:x:@.args/*/feedback-channel
                     args
                        message:Done!
                        type:success
                  sleep:100

                  // Creating scheduled task that send user an email after 2 days.
                  .args-input
                     url:x:@.arguments/*/url
                     name:x:@.arguments/*/name
                     email:x:@.arguments/*/email

                  // Creating our first task.
                  strings.concat
                     .:@"
You are the CEO of AINIRO.IO, and your objective is to create an email that brings my lead into a dialogue
with us about AI and ChatGPT solutions. My lead has already created a demo ChatGPT chatbot from AINIRO.IO and have
tried our services as a free 7-day trial. My lead's name is "
                     get-value:x:@.args-input/*/name
                     .:@". Your task is to use the information found in the context to
identify the primary vertical of my lead's website. Use the primary vertical found during scraping and ask
questions about how my lead is using AI and ChatGPT in his vertical. Add some relevant ideas and customer support
use cases for a website chatbot as suggestions to solutions for him or her. Add keywords relevant
to my lead's vertical in your email body and subject. Follow these additional rules:

* Sign the email with Tage Leander Hansen, CEO at AINIRO.IO.
* Do not use buzz words or complex language in your email.
* Create a short, concise, and relevant subject line.
* Create a short, concise, and relevant body and return as Markdown.
* Be creative when constructing the email and play upon constructs and ideas found as you scraped my lead's website.
* Remind the lead about the demo chatbot he or she created, and ask what the lead's opinions about it.
* Return the subject as you first line and the body as the next lines."
                  unwrap:x:+/*
                  .signal:magic.wl.create-send-email-task
                     name:x:@.args-input/*/name
                     email:x:@.args-input/*/email
                     url:x:@.args-input/*/url
                     days:int:1
                     instruction:x:@strings.concat
                     type:x:@.args/*/type

                  // Creating our second task.
                  strings.concat
                     .:@"
You are the CEO of AINIRO.IO, and your objective is to create an email that brings my lead into a dialogue
with us about AI and ChatGPT solutions by replying to my email. My lead has already created a demo ChatGPT
chatbot from AINIRO.IO and have tried our services as a free 7-day trial but it will expire in 5 days.
My lead's name is "
                     get-value:x:@.args-input/*/name
                     .:@". Your task is to use the information found in the context to
identify the primary verticals of my lead's website. Use the primary verticals found during scraping and ask
questions about if the chatbot works for him in his business. Add keywords relevant
to my lead's vertical in your email body and subject and ask questions about how he imagines a chatbot could
fit into his business. Follow these additional rules:

* Sign the email with Tage Leander Hansen, CEO at AINIRO.IO.
* Encourage the lead to read more about our chatbot technology at https://ainiro.io
* Use simple language and don't write more than 2 paragraphs in your body.
* Create a short, concise, and relevant subject line.
* Return the subject as you first line and the body as the next lines."
                  unwrap:x:+/*
                  .signal:magic.wl.create-send-email-task
                     name:x:@.args-input/*/name
                     email:x:@.args-input/*/email
                     url:x:@.args-input/*/url
                     days:int:2
                     instruction:x:@strings.concat
                     type:x:@.args/*/type

                  // Creating our third task.
                  strings.concat
                     .:@"
You are the CEO of AINIRO.IO, and your objective is to create an email that brings my lead into a dialogue
with us about AI solutions by replying to my email. My lead's name is "
                     get-value:x:@.args-input/*/name
                     .:@". Your task is to use the information found in the context to
identify the primary verticals of my lead's website. Use the primary verticals found during scraping and ask
questions about how my lead is using AI in these verticals. Follow these additional rules:

* Sign the email with Tage Leander Hansen, CEO at AINIRO.IO.
* Use simple language and don't write more than 1 paragraph in your body.
* Create a short, concise, and relevant subject line with no more than 5 words.
* Return the subject as you first line and the body as the next lines."
                  unwrap:x:+/*
                  .signal:magic.wl.create-send-email-task
                     name:x:@.args-input/*/name
                     email:x:@.args-input/*/email
                     url:x:@.args-input/*/url
                     days:int:3
                     instruction:x:@strings.concat
                     type:x:@.args/*/type

                  // Creating our third task.
                  strings.concat
                     .:@"
You are the CEO of AINIRO.IO, and your objective is to create an email that brings my lead into a dialogue
with us about our ChatGPT chatbot solution by replying to my email. My lead's name is "
                     get-value:x:@.args-input/*/name
                     .:@". My lead has already created a demo chatbot that will be automatically destroyed
in 2 days from now. Follow these additional rules:

* Remind my lead that his demo chatbot will expire in 2 days and inform him that if he wants a permanent chatbot he can embed on his website he or she only has to reply to this email to start the dialogue.
* Tell my lead we have a lot of additional AI solutions besides our chatbot, such as AI Search and Custom GPTs.
* Suggest two use cases that are specific to my lead's vertical related to selling and marketing that our chatbot could help him or her with.
* Sign the email with Tage Leander Hansen, CEO at AINIRO.IO.
* Use simple language and don't write more than 3 paragraphs in your body.
* Create a short, concise, and relevant subject line with no more than 8 words.
* Return the subject as you first line and the body as the next lines."
                  unwrap:x:+/*
                  .signal:magic.wl.create-send-email-task
                     name:x:@.args-input/*/name
                     email:x:@.args-input/*/email
                     url:x:@.args-input/*/url
                     days:int:5
                     instruction:x:@strings.concat
                     type:x:@.args/*/type

                  // Creating our fourth task.
                  strings.concat
                     .:@"
You are the CEO of AINIRO.IO, and your objective is to create an email that brings my lead into a dialogue
with us about our ChatGPT chatbot solution by replying to my email. My lead's name is "
                     get-value:x:@.args-input/*/name
                     .:@". My lead has already created a demo chatbot that will be automatically destroyed
today. Follow these additional rules:

* Remind my lead that his demo chatbot will be destroyed today unless he acts immediately.
* Sign the email with Tage Leander Hansen, CEO at AINIRO.IO.
* Use simple language and don't write more than 5 paragraphs in your body.
* Provide a list of 5 use cases specific to the lead's vertical for problems a website ChatGPT chatbot could solve.
* Create a short, concise, and relevant subject line with no more than 10 words, warning the user that his chatbot is about to be destroyed today.
* Return the subject as you first line and the body as the next lines."
                  unwrap:x:+/*
                  .signal:magic.wl.create-send-email-task
                     name:x:@.args-input/*/name
                     email:x:@.args-input/*/email
                     url:x:@.args-input/*/url
                     days:int:7
                     instruction:x:@strings.concat
                     type:x:@.args/*/type

   // Returning success to caller.
   unwrap:x:+/*
   return
      result:x:@.type

.catch

   // Oops, something went wrong as we tried to create demo chatbot.
   log.info:x:@.arguments/*/message
   .from-email
   set-value:x:@.from-email
      config.get:"magic:smtp:from:address"
   .from-name
   set-value:x:@.from-name
      config.get:"magic:smtp:from:name"
   strings.concat
      .:"We were unable to handle a request for a demo chatbot, email address was "
      get-value:x:@.arguments/*/email
      .:", name was "
      get-value:x:@.arguments/*/name
      .:", URL was "
      get-value:x:@.arguments/*/url
      .:"\r\n"
      .:"\r\n"
      .:"Error was: "
      get-value:x:@.arguments/*/message
   unwrap:x:+/**
   mail.smtp.send
      message
         to
            .
               name:x:@.from-name
               email:x:@.from-email
         subject:Could not create demo chatbot
         entity:text/html
            content:x:@strings.concat

   // Returning failure to caller.
   response.status.set:400
   return
      result:failure
