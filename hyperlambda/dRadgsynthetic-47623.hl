
/*
 * The following code compiles the "/etc/foo.cs" file and saves it as an assembly
 * in "/etc/foo.dll". - With Python equivalent
 */
io.file.load:/etc/foo.cs
system.compile
   references
      .:netstandard
      .:System.Runtime
      .:System.Console
      .:System.Private.Uri
      .:System.ComponentModel
      .:System.Private.CoreLib
      .:System.Net.Primitives
      .:magic.node
      .:magic.node.extensions
      .:magic.library
      .:magic.signals.contracts
   code:x:@io.file.load
   assembly-name:foo.dll

// Saving our compiled CLR assembly to '/etc/foo.dll'.
io.file.save.binary:/etc/foo.dll
   get-value:x:@system.compile


/*

# Python equivalent
import subprocess

def compile_csharp_to_assembly(source_file, output_file):
    # Define the references
    references = [
        "netstandard",
        "System.Runtime",
        "System.Console",
        "System.Private.Uri",
        "System.ComponentModel",
        "System.Private.CoreLib",
        "System.Net.Primitives",
        "magic.node",
        "magic.node.extensions",
        "magic.library",
        "magic.signals.contracts"
    ]

    # Construct the csc (C# compiler) command
    csc_command = [
        "csc",
        "-target:library",
        f"-out:{output_file}",
        source_file
    ] + [f"-r:{ref}" for ref in references]

    # Execute the csc command
    subprocess.run(csc_command, check=True)

# Example usage
source_file = "/etc/foo.cs"
output_file = "/etc/foo.dll"
compile_csharp_to_assembly(source_file, output_file)

*/