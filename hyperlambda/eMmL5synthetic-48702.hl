
// Create a Hyperlambda script that changes the password of the currently authenticated user, ensuring the user is authenticated. - With Python equivalent
slots.create:magic.auth.change-password

   // Ensuring a password was actually provided.
   validators.mandatory:x:@.arguments/*/password

   /*
    * Retrieving currently authenticated user's username, and sanity checking to make sure
    * client actually is authenticated.
    */
   auth.ticket.get
   if
      null:x:@auth.ticket.get
      .lambda

         // Oops ...!!
         throw:Access denied
            status:int:401
            public:bool:true

   // Hashing password.
   .password
   set-value:x:@.password
      crypto.password.hash:x:@.arguments/*/password

   // Opens up our database connection.
   data.connect:magic
      database-type:sqlite

      /*
       * Changes the password of the currently logged in user
       * to whatever new password user provided.
       */
      data.update
         table:users
         values
            password:x:@.password
         where
            and
               username.eq:x:@auth.ticket.get


/*

# Python equivalent
def replace_in_string(source, what, with_):
    # Validate the inputs
    if not source:
        raise ValueError("Source is mandatory")
    if not what:
        raise ValueError("What is mandatory")
    if not with_:
        raise ValueError("With is mandatory")

    # Replace occurrences of 'what' in 'source' with 'with'
    result = source.replace(what, with_)

    # Return the result
    return {"result": result}

# Example usage
try:
    result = replace_in_string("Hello, world!", "world", "there")
    print(result)
except ValueError as e:
    print(e)

*/