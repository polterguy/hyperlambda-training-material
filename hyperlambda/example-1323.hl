
// Create a function that deletes a cloudlet belonging to the currently authenticated user, ensuring no dependencies exist.
.arguments
   name:string
   recaptcha_response:string

// Ensuring user is authorised to invoke endpoint.
auth.ticket.verify:root, admin, guest

// Sanity checking invocation
validators.mandatory:x:@.arguments/*/name

/*
 * Checking if backend is configured to use reCAPTCHA, and if so,
 * making sure we ensure the frontend supplied a [recaptcha_response],
 * and invoking slot responsible for verifying reCAPTCHA value.
 */
config.get:"magic:auth:recaptcha:key"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
   .lambda

      // [recaptcha_response] is a mandatory field.
      validators.mandatory:x:@.arguments/*/recaptcha_response

      // Retrieving secret and invoking slot responsible for verifying reCAPTCHA value.
      config.get:"magic:auth:recaptcha:secret"
      validators.recaptcha:x:@.arguments/*/recaptcha_response
         min:decimal:0.3
         site-key:x:@config.get/@config.get
         secret:x:@config.get

/*
 * Retrieving currently authenticated user to prevent a user
 * from deleting cloudlets not belonging to him or her.
 */
auth.ticket.get

/*
 * Notice, we don't allow deleting a cloudlet if other cloudlets are using
 * it as a "source_cloudlet", since this would result in "hanging bogus cloudlets"
 * for the user. Hence, we first need to verify that the cloudlet the user is trying
 * to delete is NOT the source_cloudlet for other cloudlets.
 */
data.connect:[generic|hub]
   data.read
      table:cloudlets
      values
         name
      where
         and
            user.eq:x:@auth.ticket.get
            source_cloudlet.eq:x:@.arguments/*/name
   if
      exists:x:@data.read/*/*
      .lambda

         // Oops, child cloudlet(s) needs to be deleted first.
         response.status.set:412
         for-each:x:@data.read/*/*/name
            unwrap:x:+/*/*/*
            add:x:././*/return-nodes
               .
                  .
                     name:x:@.dp/#
         return-nodes

/*
 * Checking if there exists a subscription for cloudlet,
 * at which point we forward deletion to stripe module since the Stripe
 * module will delete the cloudlet automatically through its callback sinks.
 */
data.connect:[generic|stripe]

   // Checking if we can find subscription for cloudlet.
   data.read
      table:subscriptions
      values
         subscription
      where
         and
            username.eq:x:@auth.ticket.get
            meta.eq:x:@.arguments/*/name

   // Checking if subscription exists for cloudlet.
   if
      exists:x:@data.read/*/*
      .lambda

         /*
          * Deleting subscription information associated with cloudlet.
          * Due to the way the Stripe module and HUB is connected, this will invoke
          * Stripe callback sink, deleting the cloudlet after the subscriptiuon is deleted.
          */
         unwrap:x:+/*
         io.file.execute:/modules/stripe/subscriptions.delete.hl
            subscription:x:@data.read/*/*/subscription

         // Returning success to caller
         return
            affected:int:1
            subscriptions_deleted:int:1
   else

      // No Stripe subscription associated with cloudlet, hence manually deleting it.
      data.connect:[generic|hub]

         // Verifying cloudlet exists and belongs to currently authenticated user.
         data.read
            table:cloudlets
            values
               name
               cluster
            where
               and
                  user.eq:x:@auth.ticket.get
                  name.eq:x:@.arguments/*/name
         if
            not
               exists:x:@data.read/*/*
            .lambda

               // Oops, cloudlet doesn't exists or does not belong to authenticated user.
               log.error:User tried to delete non-existent cloudlet
                  user:x:@auth.ticket.get
                  cloudlet:x:@.arguments/*/name
               throw:Cloudlet does not exist
                  public:true
                  status:404

         // Invoking slot responsible for deleting cloudlet.
         .name
         set-value:x:@.name
            strings.concat
               get-value:x:@.arguments/*/name
               .:-
               get-value:x:@auth.ticket.get
         unwrap:x:+/*
         signal:hub.cloudlets.hard-delete
            cluster:x:@data.read/*/*/cluster
            name:x:@.name

         /*
          * Checking if there exists scheduled tasks associated with the cloudlet,
          * and if so deleting all tasks associated with cloudlet.
          */
         strings.concat
            .:cloudlet-
            get-value:x:@.name
            .:-%
         tasks.list:x:@strings.concat
            limit:1000
         for-each:x:@tasks.list/*
            tasks.delete:x:@.dp/#/*/id

         // Doing some basic logging.
         get-count:x:@tasks.list/*
         log.debug:Tasks associated with cloudlet has been deleted
            name:x:@.arguments/*/name
            user:x:@auth.ticket.get
            no_tasks:x:@get-count

         // Deleting item from database.
         data.delete
            table:cloudlets
            where
               and
                  name.eq:x:@.arguments/*/name
                  user.eq:x:@auth.ticket.get

         // Doing some basic logging
         log.info:Cloudlet successfully destroyed
            name:x:@.arguments/*/name
            user:x:@auth.ticket.get

         // Returning result of above invocation to caller.
         unwrap:x:+/*
         return
            affected:x:@data.delete
