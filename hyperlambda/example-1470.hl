
// Count unique and distinct items from your media table in your cms database
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.

   // Offset into the dataset of where to start retrieving records

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   media.id.eq:long
   media.post_id.eq:long
   media.file_path.like:string
   media.file_path.eq:string
   media.file_type.like:string
   media.file_type.eq:string
   media.created_at.eq:date
   post_id.title.eq:string
   post_id.title.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:media.id
   .:media.post_id
   .:media.file_path
   .:media.file_type
   .:media.created_at
   .:post_id.title

// Verifying user is authorized to access endpoint.
auth.ticket.verify:enterprise,root

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:media
         join:posts
            as:post_id
            type:left
            on
               and
                  media.post_id:post_id.id
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
