
/*
 * Purchase endpoint for purchasing a plan.
 */
.arguments
   name:string
   email:string
   api_key:string
   card-number:string
   month:string
   year:string
   cvv:string
   plan:string
   yearly:bool
   type:string
   recaptcha_response:string
   affiliate:string
   discount:bool
.description:Purchase endpoint for purchasing a plan

// Sanity checking invocation
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/email
validators.mandatory:x:@.arguments/*/card-number
validators.mandatory:x:@.arguments/*/month
validators.mandatory:x:@.arguments/*/year
validators.mandatory:x:@.arguments/*/cvv
validators.mandatory:x:@.arguments/*/plan
validators.email:x:@.arguments/*/email

/*
 * Checking if backend is configured to use reCAPTCHA, and if so,
 * making sure we ensure the frontend supplied a [recaptcha_response],
 * and invoking slot responsible for verifying reCAPTCHA value.
 */
config.get:"magic:auth:recaptcha:key"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
   .lambda
   
      // [recaptcha_response] is a mandatory field.
      validators.mandatory:x:@.arguments/*/recaptcha_response
      
      // Retrieving secret and invoking slot responsible for verifying reCAPTCHA value.
      config.get:"magic:auth:recaptcha:secret"
      validators.recaptcha:x:@.arguments/*/recaptcha_response
         min:decimal:0.3
         site-key:x:@config.get/@config.get
         secret:x:@config.get

// Figuring out IP address of invocation.
.ip
set-value:x:@.ip
   get-first-value
      request.headers.get:X-Real-IP
      request.ip

// Allowing for debugging IP/Tax automation.
if
   eq:x:@.ip
      .:0.0.0.1
   .lambda
      set-value:x:@.ip
         .:185.60.239.30

// Creating our customer in Stripe.
.customer-id
unwrap:x:+/*
signal:stripe.customers.create
   name:x:@.arguments/*/name
   email:x:@.arguments/*/email
   ip_address:x:@.ip
set-value:x:@.customer-id
   get-value:x:@signal

// Creating our payment method in Stripe.
.payment-method-id
unwrap:x:+/*
signal:stripe.payment_methods.create
   card_number:x:@.arguments/*/card-number
   card_exp_month:x:@.arguments/*/month
   card_exp_year:x:@.arguments/*/year
   card_cvs:x:@.arguments/*/cvv
set-value:x:@.payment-method-id
   get-value:x:@signal/*/id

// Attaching payment method to customer.
unwrap:x:+/*
signal:stripe.payment_methods.attach
   payment_method:x:@.payment-method-id
   customer_id:x:@.customer-id

// Retrieving Stripe price reference from configuration.
.plan
.price
set-value:x:@.plan
   get-value:x:@.arguments/*/plan
if:x:@.arguments/*/discount
   set-value:x:@.plan
      strings.concat
         get-value:x:@.plan
         .:-discount
else-if:x:@.arguments/*/yearly
   set-value:x:@.plan
      strings.concat
         get-value:x:@.plan
         .:-yearly
set-value:x:@.price
   strings.concat
      .:"magic:stripe:"
      get-value:x:@.plan
set-value:x:@.price
   config.get:x:@.price

/*
 * Checking if a type was supplied, and if so,
 * making sure we pass it into our subscription as meta information.
 */
if
   and
      exists:x:@.arguments/*/type
      not-null:x:@.arguments/*/type
      neq:x:@.arguments/*/type
         .:
   .lambda

      // Adding type as meta information to subscription.
      unwrap:x:+/*/*
      add:x:../*/signal/=stripe.subscriptions.create
         .
            meta:x:@.arguments/*/type

      // Storing type in database.
      unwrap:x:+/*/*
      add:x:../*/data.connect/*/data.create/*/values
         .
            type:x:@.arguments/*/type

      /*
       * Checking how many requests per month the selected plan allows for
       * in our configuration, and if we find a value, we update the type accordingly.
       */
      .max-requests
      strings.concat
         .:"magic:white-label:max-requests-"
         get-value:x:@.arguments/*/plan
      set-value:x:@.max-requests
         config.get:x:@strings.concat
      if
         not-null:x:@.max-requests
         .lambda
         
            // Converting value to integer.
            convert:x:@.max-requests
               type:int

            // Updating [max_requests] on ml_type.
            data.connect:[generic|magic]
               data.update
                  table:ml_types
                  values
                     max_requests:x:@convert
                  where
                     and
                        type.eq:x:@.arguments/*/type

// Creating subscription.
unwrap:x:+/*
signal:stripe.subscriptions.create
   price:x:@.price
   customer_id:x:@.customer-id
   payment_method:x:@.payment-method-id

/*
 * Checking if a type was supplied, and if so,
 * making sure we delete the task that deletes the type automatically.
 */
.bumped:bool:false
if
   and
      exists:x:@.arguments/*/type
      not-null:x:@.arguments/*/type
      neq:x:@.arguments/*/type
         .:
   .lambda

      // Verifying task exists.
      strings.concat
         .:delete-chatbot-
         get-value:x:@.arguments/*/type
      tasks.list:x:-
      if
         exists:x:@tasks.list/*
         .lambda

            // Deleting task.
            tasks.delete:x:@tasks.list/0/*/id

            // Making sure we inform user that chatbot has become permanent.
            set-value:x:@.bumped
               .:bool:true
            add:x:../*/return
               .
                  message:Your chatbot was automatically made into a permanent chatbot

/*
 * If chatbot was not bumped, we inform user that one of our machine learning
 * experts will contact the user ASAP.
 */
if
   neq:x:@.bumped
      .:bool:true
   .lambda

      /*
       * No existing type, informing user of that one
       * of our machine learning experts will contact the user ASAP.
       */
      add:x:../*/return
         .
            message:One of our machine learning experts will contact you within 2 working days

/*
 * Checking if payment is finished.
 *
 * If payment is not finished, this is probably due to needing 3D Secure
 * from the bank's side. Hence, we retrieve invoice to return [hosted_invoice_url]
 * to caller.
 */
if
   eq:x:@signal/*/finished
      .:bool:false
   .lambda

      /*
       * Subscription was not finished, probably needs 3D secure.
       * Hence, we need to fetch incomplete invoices for customer, and
       * find our 3D secure link from the invoice.
       */
      .token
      set-value:x:-
         strings.concat
            .:"Bearer "
            config.get:"magic:stripe:token"

      // Invoking Stripe REST API.
      .url
      set-value:x:@.url
         strings.concat
            .:"https://api.stripe.com/v1/invoices"
            .:"?customer="
            strings.url-encode:x:../*/signal/[0,1]
            .:"&status=open"
      http.get:x:@.url
         headers
            Authorization:x:@.token
         convert:true

      // Sanity checking above invocation.
      if
         mte
            get-value:x:@http.post
            .:int:400
         .lambda

            // Oops, something went wrong ...!!
            lambda2hyper:x:@http.post
            log.error:Something went wrong while invoking Stripe API
               result:x:@lambda2hyper
               provider:Stripe
            throw:We could not successfully retrieve invoice for payment
               public:true
               status:500

      // Adding 3D secure confirmation link to returned value.
      unwrap:x:+/*/*
      add:x:../*/return
         .
            verify:x:@http.get/*/content/*/data/0/*/hosted_invoice_url

/*
 * Checking if a api_key was supplied, and if so,
 * making sure we store it in our database.
 */
if
   and
      exists:x:@.arguments/*/api_key
      not-null:x:@.arguments/*/api_key
      neq:x:@.arguments/*/api_key
         .:
   .lambda

      // Storing api_key in database.
      unwrap:x:+/*/*
      add:x:../*/data.connect/*/data.create/*/values
         .
            api_key:x:@.arguments/*/api_key

// Creating our internal database record.
data.connect:[generic|white-label]

   /*
    * Checking if "ref" cookie exists, at which point we associate
    * the purchase with the value of the ref cookie.
    */
   if
      and
         not-null:x:@.arguments/*/affiliate
         neq:x:@.arguments/*/affiliate
            .:
      .lambda

         // Adding affiliate reference to order record.
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.create/*/values
            .
               affiliate:x:@.arguments/*/affiliate

   // Creating our internal database record for purchase.
   data.create
      table:orders
      values
         name:x:@.arguments/*/name
         email:x:@.arguments/*/email
         plan:x:@.plan
         stripe_customer_id:x:@.customer-id
         stripe_price_reference_id:x:@.price

// Sending user a purchase confirmation email.
unwrap:x:+/*
signal:wl.email.send-purchase
   name:x:@.arguments/*/name
   email:x:@.arguments/*/email
   type:x:@.arguments/*/type
   api_key:x:@.arguments/*/api_key
   plan:x:@.plan

// Returning success to caller.
return
   result:success
