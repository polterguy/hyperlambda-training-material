/*
 * Lists all companies / customers from NetSuite
 * 
 * Returns id, entityid, companyname, and dateclosed from customers in your NetSuite account.
 */
.arguments

   // Optionally how many rows to maximumly return. Defaults to 25 unless specified.
   limit:long

   // Optional ID of customer from where to start returning rows. Defaults to nothing.
   from:string

   // Optional filtering argument the companyname must match. For instance 'AFS' here will match customers with company names containing 'AFS'.
   filter:string

   // Mandatory argument for subsidiary ID to retrieve customers for.
   subsidiaryid:long

// Making sure workflow is discoverable as such from machine learning component.
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/subsidiaryid

// Checking if caller supplied -1 as limit.
if
   or
      and
         exists:x:@.arguments/*/limit
         not-null:x:@.arguments/*/limit
         eq
            convert:x:@.arguments/*/limit
               type:long
            .:long:-1
      mt
         convert:x:@.arguments/*/limit
            type:long
         .:long:25
   .lambda

      // Defaulting limit to 25 to avoid returning too many records.
      set-value:x:@.arguments/*/limit
         .:long:25
      add:x:../*/return-nodes
         .
            warning:We can only retrieve a maximum of 25 customers at the same time, ask for more customers to see more customers.

// Dynamically creating our query.
.q
set-value:x:@.q
   strings.concat
      .:@"select
   c.id,
   c.entityid,
   c.companyname,
   c.dateclosed
from customer c
join subsidiary s on c.subsidiary = s.id
where s.id = "
      get-value:x:@.arguments/*/subsidiaryid

// Checking if we're doing paging.
if
   exists:x:@.arguments/*/from
   .lambda
      set-value:x:@.q
         strings.concat
            get-value:x:@.q
            .:" and c.id > "
            get-value:x:@.arguments/*/from

// Checking if we're doing filtering.
if
   exists:x:@.arguments/*/filter
   .lambda
      set-value:x:@.q
         strings.concat
            get-value:x:@.q
            .:" and upper(c.companyname) like upper('%"
            get-value:x:@.arguments/*/filter
            .:"%')"

// Adding limit.
set-value:x:@.q
   strings.concat
      get-value:x:@.q
      .:" order by c.id fetch first "
      get-first-value
         get-value:x:@.arguments/*/limit
         .:long:25
      .:" rows only"

// Logging the generated query for debugging.
log.info:x:@.q

// Forwarding heavy lifting to core file.
execute-file:/modules/netsuite/workflows/workflows/netsuite-query.hl
   q:x:@.q

// Returning result to caller.
add:x:../*/return-nodes
   get-nodes:x:@execute-file/*
return-nodes