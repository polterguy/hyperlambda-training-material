
// Invokes OpenAI's image generation API with the specified [query] and [model].
.arguments
   query
      type:textarea
      mandatory:bool:true
   model
      type:string
      mandatory:bool:false
      default:dall-e-3
   size
      type:string
      mandatory:bool:false
      default:1024x1024
      values
         .:1024x1024
         .:1024x1792
         .:1792x1024
   style
      type:string
      mandatory:bool:false
      default:vivid
      values
         .:vivid
         .:natural
.icon:chat_bubble

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/query
validators.default:x:@.arguments
   model:dall-e-3
   default:1024x1024

// Retrieving OpenAI API token from configuration settings.
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      config.get:"magic:openai:key"

// Invokes OpenAI.
http.post:"https://api.openai.com/v1/images/generations"
   convert:bool:true
   headers
      Authorization:x:@.token
      Content-Type:application/json
   payload
      model:x:@.arguments/*/model
      prompt:x:@.arguments/*/query
      n:int:1
      size:x:@.arguments/*/size
      style:x:@.arguments/*/style

// Sanity checking above invocation.
if
   not
      and
         mte:x:@http.post
            .:int:200
         lt:x:@http.post
            .:int:300
   .lambda

      // Oops, error - Logging error and returning status 500 to caller.
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking OpenAI
         message:x:@http.post/*/content/*/error/*/message
         status:x:@http.post
         error:x:@lambda2hyper
      throw:Something went wrong while invoking OpenAI
         message:x:@http.post/*/content/*/error/*/message
         status:x:@http.post
         error:x:@lambda2hyper

// Returning answer to caller.
yield
   images:x:@http.post/*/content/*/data/*
