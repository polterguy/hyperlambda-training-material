
// Design a function to create a new checkout session endpoint for Stripe. The function should require authentication and accept arguments for price, success URL, and mode (either 'subscription' or 'payment'). It should validate these arguments and ensure the user is authenticated. The function should generate a unique session ID, store it in the database with the username and price, and update the success URL to include the session ID as a query parameter. Finally, it should create a checkout session using Stripe's API and return the result to the caller.
.arguments
   price:string
   success_url:string
   mode:string

// Making sure user is authenticated.
auth.ticket.verify

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/mode
validators.mandatory:x:@.arguments/*/price
validators.mandatory:x:@.arguments/*/success_url
validators.enum:x:@.arguments/*/mode
   .:payment
   .:subscription

/*
 * Creating a unique session and storing in database such that we can track successful payments.
 * 
 * This will contain username and price reference, and be stored with a key being the session ID,
 * allowing us to find the username and Stripe price reference from the QUERY parameter Stripe sends
 * into our success URL callback.
 */
crypto.random
   min:25
   max:25
auth.ticket.get
data.connect:stripe
   data.create
      table:checkout_sessions
      values
         session_id:x:@crypto.random
         username:x:@auth.ticket.get
         price:x:@.arguments/*/price

// Updating [success_url] and appending session.
.success-url
set-value:x:@.success-url
   strings.concat
      get-value:x:@.arguments/*/success_url
      .:?session=
      get-value:x:@crypto.random

// Creates a checkout session for the specified [priceId].
execute:magic.workflows.actions.execute
   name:stripe-create-checkout-session
   filename:/modules/stripe/workflows/actions/stripe-create-checkout-session.hl
   arguments
      username:x:@auth.ticket.get
      price:x:@.arguments/*/price
      success_url:x:@.success-url
      mode:x:@.arguments/*/mode

// Returning result to caller.
yield:x:@execute/*
