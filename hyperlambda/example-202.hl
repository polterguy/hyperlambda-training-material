
// Create a Hyperlambda script that returns arguments the specified action can handle, in addition to candidates for expressions, ensuring the user is authorized.
.arguments
   action-file:string
   hyperlambda:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

/*
 * Loading action file and transforming Hyperlambda to lambda and making sure
 * we return [.arguments] collection as [input].
 * 
 * This becomes our input arguments to our action.
 */
load-file:x:@.arguments/*/action-file
hyper2lambda:x:@load-file
add:x:./*/return/*/input
   get-nodes:x:@hyper2lambda/*/.arguments/*

/*
 * Transforming Hyperlambda specified as input to lambda such that we can
 * semantically traverse it for candidate expressions.
 */
hyper2lambda:x:@.arguments/*/hyperlambda

// Warnings found while traversing candidates.
.warning

// Figuring out candidate expressions
for-each:x:@hyper2lambda/*

   // Figuring out if we should return this as a candidate expression or not.
   .node-name
   set-value:x:@.node-name
      get-name:x:@.dp/#

   // Verifying this is either an [execute] node or an [.xxxx] node of some sort.
   if
      or

         // Checking if this is a "variable" or a "variable collection".
         strings.starts-with:x:@.node-name
            .:.

         // Checking if this is an action execute invocation.
         and
            eq:x:@.node-name
               .:execute
            exists:x:@.dp/#/*/name
            exists:x:@.dp/#/*/filename
      .lambda

         /*
          * Currently iterated node is either [execute] or [.xxx].
          * 
          * Checking if we're dealing with an action invocation [execute], at which point
          * we'll have to load the action file and figure out return values from action
          * that becomes our candidate expressions.
          */
         if
            eq:x:@.node-name
               .:execute
            .lambda

               // Action invocation, loading file such that we can inspect return values.
               load-file:x:@.dp/#/*/filename
               hyper2lambda:x:@load-file

               // Checking if action has empty return invocations.
               if
                  and
                     exists:x:@hyper2lambda/**/[yield|return|return-nodes]
                     not-exists:x:@hyper2lambda/**/[yield|return|return-nodes]/*
                  .lambda

                     /*
                      * Action has "weakly type" return invocations, as in it's returning
                      * "something" we just don't know what. Might be SQL action for instance,
                      * returning result of SQL execution.
                      */
                     .x
                     set-value:x:@.x
                        strings.concat
                           .:--/execute/=
                           get-value:x:@.dp/#/*/name
                           .:/*

                     /*
                      * Making sure candidate expression has not already been added before we add it.
                      * 
                      * Notice, the same [return] invocation can be repeated multiple times in the same action file,
                      * if there are conditional statements ([if]/[else-if]) that invokes [return] or [yield], etc.
                      */
                     if
                        not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
                        .lambda

                           // Argument has not been previously added to return lambda.
                           unwrap:x:+/*/*/*
                           add:x:../*/return/*/candidates
                              .
                                 .
                                    name:x:@.x
                                    expression:x:@.x
                                    complete:bool:false
               else

                  // Iterating through all [return] invocations.
                  for-each:x:@hyper2lambda/**/[yield|return|return-nodes]/*

                     /*
                      * Checking if currently iterated node has children nodes,
                      * at which point we have to return a warning to caller.
                      */
                     if
                        exists:x:@.dp/#/*
                        .lambda

                           // Returning warning to caller.
                           set-value:x:@.warning
                              .:Warning, some of your actions, and/or arguments, are returning complex objects, and we cannot automatically create candidate expressions for these. You will have to manually edit some of your expressions if you want to reference these nodes in your actions.

                     // Creating our candidate expression.
                     .x
                     set-value:x:@.x
                        strings.concat
                           .:--/execute/=
                           get-value:x:@.dp/@.dp/#/*/name
                           .:/*/
                           get-name:x:@.dp/#

                     /*
                      * Making sure candidate expression has not already been added before we add it.
                      * 
                      * Notice, the same [return] invocation can be repeated multiple times in the same action file,
                      * if there are conditional statements ([if]/[else-if]) that invokes [return] or [yield], etc.
                      */
                     if
                        not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
                        .lambda

                           // Argument has not been previously added to return lambda.
                           unwrap:x:+/*/*/*
                           add:x:../*/return/*/candidates
                              .
                                 .
                                    name:x:@.x
                                    expression:x:@.x
                                    complete:bool:true
         else

            /*
             * Variable node, either [.arguments] collection, or some variable node declaration.
             * 
             * Looping through children of node and creating our candidate expression.
             */
            for-each:x:@.dp/#/*

               /*
                * Checking if currently iterated node has children nodes,
                * at which point we have to return a warning to caller.
                */
               if
                  exists:x:@.dp/#/*
                  .lambda

                     // Returning warning to caller.
                     set-value:x:@.warning
                        .:Warning, some of your actions, and/or arguments, are returning complex objects, and we cannot automatically create candidate expressions for these. You will have to manually edit some of your expressions if you want to reference these nodes in your actions.

               // Creating our candidate expression.
               .x
               set-value:x:@.x
                  strings.concat
                     .:@
                     get-value:x:@.node-name
                     .:/*/
                     get-name:x:@.dp/#

               // Making sure candidate expression has not already been added before we add it.
               if
                  not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
                  .lambda

                     // Argument has not been previously added to return lambda.
                     unwrap:x:+/*/*/*
                     add:x:../*/return/*/candidates
                        .
                           .
                              name:x:@.x
                              expression:x:@.x
                              complete:bool:true

            /*
             * In case this is a "simple variable" we add it directly if it has a value.
             * 
             * Notice, "simple variable declarations" can be for instance ".foo:int:5", which
             * are variable nodes without children of themselves.
             */
            if
               not-null:x:@.dp/#
               .lambda

                  // Creating our candidate expression.
                  .x
                  set-value:x:@.x
                     strings.concat
                        .:@
                        get-value:x:@.node-name

                  // Making sure candidate expression has not already been added before we add it.
                  if
                     not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
                     .lambda

                        // Argument has not been previously added to return lambda.
                        unwrap:x:+/*/*/*
                        add:x:../*/return/*/candidates
                           .
                              .
                                 name:x:@.x
                                 expression:x:@.x
                                 complete:bool:true

// Checking if we've got warning, at which point we return these to caller.
if
   not-null:x:@.warning
   .lambda
      unwrap:x:+/*/*
      add:x:../*/return
         .
            warning:x:@.warning

// Returning arguments to caller.
return
   input
   candidates
