
// Write a Hyperlambda script to retrieve HTML from a specified URL and return it, with optional headers.
slots.create:magic.ai.url.get

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.url:x:@.arguments/*/url

   // Adding [headers] argument unless already specified.
   if
      not-exists:x:@.arguments/*/headers
      .lambda

         // Adding [headers] to [.arguments] such that we can create default HTTP headers further down.
         add:x:@.arguments
            .
               headers

   // Adding default headers unless they're already specified.
   validators.default:x:@.arguments/*/headers
      User-Agent:AINIRO-Crawler 2.0
      Accept:text/html
      Accept-Encoding:identity

   // Adding HTTP headers to invocation.
   add:x:./*/http.get
      get-nodes:x:@.arguments/*/headers

   // Retrieving HTML document from specified URL.
   http.get:x:@.arguments/*/url
      timeout:60

   // Sanity checking above invocation.
   if
      not
         and
            mte:x:@http.get
               .:int:200
            lt:x:@http.get
               .:int:300
      .lambda

         // Checking if this is a 301 or 302 redirect.
         if
            or
               eq:x:@http.get
                  .:int:301
               eq:x:@http.get
                  .:int:302
            .lambda

               // Checking if request was HTTP (no SSL) at which point we try SSL.
               if
                  strings.starts-with:x:@.arguments/*/url
                     .:"http://"
                  .lambda

                     // Providing feedback to user.
                     sockets.signal:x:@.arguments/*/feedback-channel
                        args
                           message:Page moved to, trying SSL equivalent
                           type:info
                     sleep:100

                     // Invoking self and returning result, exchanging http:// with https://.
                     strings.replace:x:@.arguments/*/url
                        .:"http://"
                        .:"https://"
                     add:x:+/*/headers
                        get-nodes:x:@.arguments/*/headers/*
                     execute:magic.ai.url.get
                        url:x:@strings.replace
                        headers
                     return:x:-
               else

                  // Providing feedback to user.
                  strings.concat
                     .:"Page moved to '"
                     get-value:x:@http.get/*/headers/*/Location
                     .:"', trying alternative location"
                  unwrap:x:+/**
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
                  sleep:100

                  // Invoking self and returning result.
                  add:x:+/+/*/headers
                     get-nodes:x:@.arguments/*/headers/*
                  add:x:+
                     get-nodes:x:@.arguments/*/feedback-channel
                  execute:magic.ai.url.get
                     url:x:@http.get/*/headers/*/Location
                     headers
                  return:x:-
         else

            // Oops, logging error.
            log.error:Something went wrong while trying to get URL
               url:x:@.arguments/*/url
               status:x:@http.get
            strings.concat
               .:"HTTP invocation returned status code "
               get-value:x:@http.get
            throw:x:-

   /*
    * Above HTTP GET invocation returned success.
    * 
    * Making sure URL returned HTML.
    */
   if
      or
         not-exists:x:@http.get/*/headers/*/Content-Type
         not
            strings.starts-with:x:@http.get/*/headers/*/Content-Type
               .:text/html
      .lambda

         // Oops, doing some basic logging.
         log.error:URL did not return HTML content
            url:x:@.arguments/*/url
            content-type:x:@http.get/*/headers/*/Content-Type
         strings.concat
            .:"URL did not return HTML content but '"
            get-value:x:@http.get/*/headers/*/Content-Type
            .:"' content"
         throw:x:-

   // Returning result of above HTTP GET invocation.
   return:x:@http.get/*/content
