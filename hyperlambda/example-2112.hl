
// Create a Hyperlambda script for an endpoint that counts items in the ml_types table in the magic database, ensuring the user is authorized and handling optional filters.
.arguments
   ml_types.type.like:string
   ml_types.type.eq:string
   ml_types.model.like:string
   ml_types.model.eq:string
   ml_types.greeting.like:string
   ml_types.greeting.eq:string
   ml_types.max_tokens.eq:long
   ml_types.max_context_tokens.eq:long
   ml_types.max_request_tokens.eq:long
   ml_types.temperature.eq:double
   ml_types.base_url.like:string
   ml_types.base_url.eq:string
   ml_types.contact_us.like:string
   ml_types.contact_us.eq:string
   ml_types.lead_email.like:string
   ml_types.lead_email.eq:string
   ml_types.api_key.like:string
   ml_types.api_key.eq:string
   ml_type.twilio_account_sid.like:string
   ml_type.twilio_account_sid.eq:string
   ml_types.webhook_incoming.like:string
   ml_types.webhook_incoming.eq:string
   ml_types.webhook_outgoing.like:string
   ml_types.webhook_outgoing.eq:string
   ml_types.webhook_incoming_url.like:string
   ml_types.webhook_incoming_url.eq:string
   ml_types.initial_questionnaire.like:string
   ml_types.initial_questionnaire.eq:string
   ml_types.webhook_outgoing_url.like:string
   ml_types.webhook_outgoing_url.eq:string
   ml_types.system_message.like:string
   ml_types.system_message.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:ml_types
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
