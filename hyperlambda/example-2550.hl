
// Create a Hyperlambda endpoint to evaluate given Hyperlambda code and return the results.
.arguments
   hyperlambda:string
   args:*

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Transforms Hyperlambda 2 lambda object.
hyper2lambda:x:@.arguments/*/hyperlambda

// Converts all input arguments to their expected type.
for-each:x:@.arguments/*/args/*

   // Getting name of currently iterated argument.
   get-name:x:@.dp/#

   // Checking if this is a workflow type of argument declaration or an endpoint type of declaration.
   if
      exists:x:@hyper2lambda/*/.arguments/*/{@get-name}/*/type
      .lambda

         // Workflow type of argument declaration, converting argument value accordingly.
         set-value:x:@.dp/#
            convert:x:@.dp/#
               type:x:@hyper2lambda/*/.arguments/*/{@get-name}/*/type
   else

      // Endpoint type of argument declaration, converting argument value accordingly.
      set-value:x:@.dp/#
         convert:x:@.dp/#
            type:x:@hyper2lambda/*/.arguments/*/{@get-name}

/*
 * Removing [.arguments] declaration from Hyperlambda we're about to execute,
 * such that we can add the input arguments to the Hyperlambda file correctly.
 */
remove-nodes:x:@hyper2lambda/*/.arguments/*

// Adding input arguments specified by caller.
add:x:./*/invoke
   get-nodes:x:@.arguments/*/args/*

// Evaluating Hyperlambda, now with the correct root node.
invoke:x:@hyper2lambda

// Returning the results of the evaluation to caller.
return-nodes:x:@invoke/*
