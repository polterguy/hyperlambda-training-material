
// Create a Hyperlambda script to generate an HTTP REST generic SQL endpoint according to specified arguments.
.arguments
   databaseType:string
   authorization:string
   moduleName:string
   database:string
   arguments:string
   verb:string
   endpointName:string
   sql:string
   overwrite:bool

// Sanity checks invocation.
validators.mandatory:x:@.arguments/*/databaseType
validators.mandatory:x:@.arguments/*/moduleName
validators.mandatory:x:@.arguments/*/database
validators.mandatory:x:@.arguments/*/verb
validators.mandatory:x:@.arguments/*/endpointName
validators.mandatory:x:@.arguments/*/sql
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql
   .:mssql
   .:sqlite
validators.enum:x:@.arguments/*/verb
   .:post
   .:get
   .:put
   .:delete
   .:patch

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Creating a log entry explaining roughly what we're about to do.
log.info:Generating SQL endpoint
   module:x:@.arguments/*/moduleName
   databaseType:x:@.arguments/*/databaseType
   database:x:@.arguments/*/database
   verb:x:@.arguments/*/verb
   endpointName:x:@.arguments/*/endpointName

// Normalising sql argument.
strings.replace:x:@.arguments/*/sql
   .:"\r"
   .:
set-value:x:@.arguments/*/sql
   strings.replace:x:@.arguments/*/sql
      .:"\n"
      .:"\n"

// Loading template file used to generate endpoint.
io.file.load:/system/crudifier/templates/sql.template.hl
hyper2lambda:x:@io.file.load
   comments:bool:true

// Applying database, database-type and sql arguments to template file.
unwrap:x:+/*
apply:x:@hyper2lambda
   database-type:x:@.arguments/*/databaseType
   database:x:@.arguments/*/database
   sql:x:@.arguments/*/sql

// Making sure we add arguments to the above lambda.
if
   and
      exists:x:@.arguments/*/arguments
      not
         eq
            get-value:x:@.arguments/*/arguments
            .:
      not
         eq
            get-value:x:@.arguments/*/arguments
            .
   .lambda

      // Argument collection was specified, hence applying arguments to lambda.
      add:x:@apply/*/.arguments
         hyper2lambda:x:@.arguments/*/arguments

      // Making sure endpoint applied arguments to [data.select] invocation.
      insert-before:x:@apply/*/data.connect/*/data.select/-
         .

            // Parametrizing [data.select].
            add:x:./*/data.select
               get-nodes:x:@.arguments/*

      // Looping through all arguments to endpoint and concatenating to our comment.
      .tmp
      for-each:x:@apply/*/.arguments/*

         // Appending argument name to comment.
         if
            null:x:@.tmp
            .lambda
               set-value:x:@.tmp
                  strings.concat
                     .:" with argument "
                     get-name:x:@.dp/#
         else
            set-value:x:@.tmp
               strings.concat
                  get-value:x:@.tmp
                  .:", "
                  get-name:x:@.dp/#
      set-value:x:@apply/0
         strings.concat
            get-value:x:@apply/0
            get-value:x:@.tmp

/*
 * Checking if caller provided specific authorization for us to use,
 * and if so, applying it to lambda.
 */
if
   and
      not
         eq
            get-value:x:@.arguments/*/authorization
            .:
      not
         eq
            get-value:x:@.arguments/*/authorization
            .
   .lambda

      // Adding authorization to endpoint's lambda.
      unwrap:x:+/*/*
      insert-after:x:@apply/*/.arguments
         .

            // Making sure user is authorized to invoke endpoint.
            auth.ticket.verify:x:@.arguments/*/authorization

// Appending description to endpoint
unwrap:x:+/*/*
insert-after:x:@apply/1
   .
      .description:x:@apply/0

// Creating our folder if necessary.
.folder:/modules/
set-value:x:@.folder
   strings.concat
      get-value:x:@.folder
      get-value:x:@.arguments/*/moduleName
      .:/
io.folder.create:x:@.folder

// Creating our descriptive comment by invoking OpenAI.
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      get-first-value
         get-value:x:@.arguments/*/api_key
         config.get:"magic:openai:key"
lambda2hyper:x:@apply/*
http.post:"https://api.openai.com/v1/chat/completions"
   convert:bool:true
   headers
      Authorization:x:@.token
      Content-Type:application/json
   payload
      model:gpt-4o
      max_tokens:int:1000
      temperature:decimal:0.3
      messages
         .
            role:system
            content:"Shortly describe what the SQL inside the following code does with a single line of text, for then to add two carriage return characters, and a more elaborate description. The purpose of the result is to being used as the content for a file level comment describing what the SQL does. The comment needs to be high quality containing specific VSS keywords, since it will be used later to match training data using RAG according to the user's instructions. Do not return // characters or /**/ characters, only the text describing the code."
         .
            role:user
            content:x:@lambda2hyper

// Sanity checking above invocation.
if
   and
      mte:x:@http.post
         .:int:200
      lt:x:@http.post
         .:int:300
   .lambda
      set-value:x:@apply/0
         get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
      set-value:x:@apply/0
         strings.concat:x:@apply/0
            get-value:x:@apply/0
            .:"\n\n All arguments are mandatory."

// Transforming above lambda to Hyperlambda, and figuring out filename.
lambda2hyper:x:@apply/*
   comments:bool:true
.filename
set-value:x:@.filename
   strings.concat
      get-value:x:@.folder
      get-value:x:@.arguments/*/endpointName
      .:.
      get-value:x:@.arguments/*/verb
      .:.hl

// Making sure file does not exist from before, unless [.argument][overwrite] is true.
if
   and
      not
         get-value:x:@.arguments/*/overwrite
      io.file.exists:x:@.filename
   .lambda

      // Endpoint already exists and caller didn't specify he or she wanted to overwrite existing endpoint.
      throw:Endpoint already exists, choose a new name or enable overwrite
         status:400
         public:true

// Saving file.
io.file.save:x:@.filename
   get-value:x:@lambda2hyper

// Returns success to caller.
return-nodes
   result:success
