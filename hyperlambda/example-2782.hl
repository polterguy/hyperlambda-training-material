
// Deletes the specified cloudlet.
.arguments
   cloudlet_name
      type:string
      mandatory:bool:true
   username
      type:string
      mandatory:bool:true

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/cloudlet_name
validators.mandatory:x:@.arguments/*/username

// Figuring out base URL of Kubernetes REST API.
.base-url
set-value:x:@.base-url
   config.get:"magic:hub:us.ainiro.io:manager-url"

// Figuring out Kubernetes namespace cloudlets exists in.
.namespace
set-value:x:@.namespace
   config.get:"magic:hub:default-namespace"

// Retrieving token that's required to invoke Kubernetes REST API.
.token
set-value:x:@.token
   strings.concat
      .:"Bearer "
      config.get:"magic:hub:us.ainiro.io:token"

// Invoking Web API responsible for deleting deployment.
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.base-url
      .:/apis/apps/v1/namespaces/
      get-value:x:@.namespace
      .:/deployments/
      get-value:x:@.arguments/*/cloudlet_name
      .:-
      get-value:x:@.arguments/*/username
http.delete:x:@.url
   headers
      Authorization:x:@.token

// Sanity checking above invocation
if
   not
      and
         mte:x:@http.delete
            .:int:200
         lt:x:@http.delete
            .:int:300
   .lambda

      // Oops, web API didn't return success
      log.error:Kubernetes could not delete deployment
         status:x:@http.post
         response:x:@http.post/*/content
         name:x:@.arguments/*/cloudlet_name
         username:x:@.arguments/*/username
else

   // Logging the fact that we successfully deleted deployment.
   log.debug:Kubernetes deployment successfully deleted
      name:x:@.arguments/*/cloudlet_name
      username:x:@.arguments/*/username

// Invoking Web API responsible for deleting service.
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.base-url
      .:/api/v1/namespaces/
      get-value:x:@.namespace
      .:/services/
      get-value:x:@.arguments/*/cloudlet_name
      .:-
      get-value:x:@.arguments/*/username
http.delete:x:@.url
   headers
      Authorization:x:@.token

// Sanity checking above invocation
if
   not
      and
         mte:x:@http.delete
            .:int:200
         lt:x:@http.delete
            .:int:300
   .lambda

      // Oops, web API didn't return success
      log.error:Kubernetes could not delete service
         status:x:@http.post
         response:x:@http.post/*/content
         name:x:@.arguments/*/cloudlet_name
         username:x:@.arguments/*/username
else

   // Logging the fact that we successfully deleted service.
   log.debug:Kubernetes service successfully deleted
      name:x:@.arguments/*/cloudlet_name
      username:x:@.arguments/*/username

// Invoking Web API responsible for deleting ingress.
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.base-url
      .:/apis/networking.k8s.io/v1/namespaces/
      get-value:x:@.namespace
      .:/ingresses/
      get-value:x:@.arguments/*/cloudlet_name
      .:-
      get-value:x:@.arguments/*/username
http.delete:x:@.url
   headers
      Authorization:x:@.token

// Sanity checking above invocation
if
   not
      and
         mte:x:@http.delete
            .:int:200
         lt:x:@http.delete
            .:int:300
   .lambda

      // Oops, web API didn't return success
      log.error:Kubernetes could not delete ingress
         status:x:@http.post
         response:x:@http.post/*/content
         name:x:@.arguments/*/cloudlet_name
         username:x:@.arguments/*/username
else

   // Logging the fact that we successfully deleted ingress.
   log.debug:Kubernetes ingress successfully deleted
      name:x:@.arguments/*/cloudlet_name
      username:x:@.arguments/*/username

// Invoking Web API responsible for deleting volume claim.
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.base-url
      .:/api/v1/namespaces/
      get-value:x:@.namespace
      .:/persistentvolumeclaims/
      get-value:x:@.arguments/*/cloudlet_name
      .:-
      get-value:x:@.arguments/*/username
http.delete:x:@.url
   headers
      Authorization:x:@.token

// Sanity checking above invocation
if
   not
      and
         mte:x:@http.delete
            .:int:200
         lt:x:@http.delete
            .:int:300
   .lambda

      // Oops, web API didn't return success
      log.error:Kubernetes could not delete volume claim
         status:x:@http.post
         response:x:@http.post/*/content
         name:x:@.arguments/*/cloudlet_name
         username:x:@.arguments/*/username
else

   // Logging the fact that we successfully deleted ingress.
   log.debug:Kubernetes volume claim successfully deleted
      name:x:@.arguments/*/cloudlet_name
      username:x:@.arguments/*/username

// Connecting to database.
data.connect:[generic|hub]

   // Deleting cloudlet from database.
   data.delete
      table:cloudlets
      where
         and
            user.eq:x:@.arguments/*/username
            name.eq:x:@.arguments/*/cloudlet_name

// Deleting scheduled task that deletes cloudlet.
.task-name
set-value:x:@.task-name
   strings.concat
      .:cloudlet-
      get-value:x:@.arguments/*/cloudlet_name
      .:-
      get-value:x:@.arguments/*/username
      .:-hard-delete
tasks.list:x:@.task-name
if
   exists:x:@tasks.list/*
   .lambda

      // Deleting scheduled task.
      tasks.delete:x:@tasks.list/0/*/id

      // Logging the fact that we successfully deleted task.
      log.debug:Task that automatically deletes cloudlet was deleted
         name:x:@.arguments/*/cloudlet_name
         username:x:@.arguments/*/username
         task_name:x:@tasks.list/0/*/id

// Logging.
log.info:Cloudlet successfully deleted
   cloudlet_name:x:@.arguments/*/cloudlet_name
   username:x:@.arguments/*/username

// Returning success to caller.
return
   result:success
