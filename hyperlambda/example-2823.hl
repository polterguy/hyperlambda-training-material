
// Slot responsible for creating a new cloudlet.
slots.create:hub.cloudlets.create

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/cluster
   validators.mandatory:x:@.arguments/*/timeout
   validators.mandatory:x:@.arguments/*/upload
   validators.mandatory:x:@.arguments/*/plan
   validators.mandatory:x:@.arguments/*/cloudlet_name
   validators.mandatory:x:@.arguments/*/username
   validators.mandatory:x:@.arguments/*/storage
   validators.mandatory:x:@.arguments/*/cpu
   validators.mandatory:x:@.arguments/*/memory
   validators.mandatory:x:@.arguments/*/password
   validators.mandatory:x:@.arguments/*/name
   validators.mandatory:x:@.arguments/*/email
   validators.mandatory:x:@.arguments/*/is-cloudlet

   // Figuring out base URL of Kubernetes REST API.
   .base-url
   strings.concat
      .:"magic:hub:"
      get-value:x:@.arguments/*/cluster
      .:":manager-url"
   set-value:x:@.base-url
      config.get:x:@strings.concat

   // Figuring out Kubernetes namespace to use for resources.
   .namespace
   set-value:x:@.namespace
      config.get:"magic:hub:default-namespace"

   // Retrieving token that's required to invoke Kubernetes REST API.
   .token
   strings.concat
      .:"magic:hub:"
      get-value:x:@.arguments/*/cluster
      .:":token"
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         config.get:x:@strings.concat/@strings.concat

   /*
    * Looping through each YAML file that exists in folder for plan,
    * and invoking the correct K8s REST API endpoint accordingly.
    */
   strings.concat
      .:/modules/hub/magic.startup/plans/
      get-value:x:@.arguments/*/plan
      .:/
   io.file.list:x:-
   for-each:x:-/*

      // Verifying currently iterated file is a YAML file.
      if
         strings.ends-with:x:@.dp/#
            .:.yaml
         .lambda

            /*
             * This is a YAML file, now we need to figure out what type
             * of YAML file it is.
             */
            .service-url
            .entity-type
            if
               strings.ends-with:x:@.dp/#
                  .:claim.yaml
               .lambda
                  set-value:x:@.service-url
                     strings.concat
                        get-value:x:@.base-url
                        .:/api/v1/namespaces/
                        get-value:x:@.namespace
                        .:/persistentvolumeclaims
                  set-value:x:@.entity-type
                     .:volume
            else-if
               strings.ends-with:x:@.dp/#
                  .:deployment.yaml
               .lambda
                  set-value:x:@.service-url
                     strings.concat
                        get-value:x:@.base-url
                        .:/apis/apps/v1/namespaces/
                        get-value:x:@.namespace
                        .:/deployments
                  set-value:x:@.entity-type
                     .:deployment
            else-if
               strings.ends-with:x:@.dp/#
                  .:ingress.yaml
               .lambda
                  set-value:x:@.service-url
                     strings.concat
                        get-value:x:@.base-url
                        .:/apis/networking.k8s.io/v1/namespaces/
                        get-value:x:@.namespace
                        .:/ingresses
                  set-value:x:@.entity-type
                     .:ingress
            else-if
               strings.ends-with:x:@.dp/#
                  .:service.yaml
               .lambda
                  set-value:x:@.service-url
                     strings.concat
                        get-value:x:@.base-url
                        .:/api/v1/namespaces/
                        get-value:x:@.namespace
                        .:/services
                  set-value:x:@.entity-type
                     .:service
            else
               throw:Unsupported YAML file, must end with service, deployment, ingress or claim
                  public:true
                  status:500

            /*
             * Loading YAML file, and performing substitutions
             * to dynamically parametrise the file according to plan.
             */
            .yaml
            set-value:x:@.yaml
               io.file.load:x:@.dp/#

            // Substituting {{name}} with the correct name.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{name}}
                  get-value:x:@.arguments/*/cloudlet_name

            // Substituting {{source_cloudlet}} with the correct cloudlet.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{source_cloudlet}}
                  get-value:x:@.arguments/*/source_cloudlet

            // Substituting {{namespace}} with the correct namespace.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{namespace}}
                  get-value:x:@.namespace

            // Substituting {{storage}} with the correct namespace.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{storage}}
                  get-value:x:@.arguments/*/storage

            // Substituting {{cpu}} with the correct namespace.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{cpu}}
                  get-value:x:@.arguments/*/cpu

            // Substituting {{memory}} with the correct namespace.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{memory}}
                  get-value:x:@.arguments/*/memory

            // Substituting {{storage}} with the correct namespace.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{storage}}
                  get-value:x:@.arguments/*/storage

            // Substituting {{magic-version}} with the correct backend version.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{magic-version}}
                  config.get:"magic:hub:magic-version"

            // Dynamically substituting cluster.
            strings.concat
               .:"magic:hub:"
               get-value:x:@.arguments/*/cluster
               .:":cluster"
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{cluster}}
                  config.get:x:@strings.concat

            // Dynamically substituting timeout.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{timeout}}
                  get-value:x:@.arguments/*/timeout

            // Dynamically substituting upload.
            set-value:x:@.yaml
               strings.replace:x:@.yaml
                  .:{{upload}}
                  get-value:x:@.arguments/*/upload

            // Invoking K8s HTTP REST endpoint to create entity
            http.post:x:@.service-url
               headers
                  Content-Type:application/yaml
                  Authorization:x:@.token
               payload:x:@.yaml

            // Sanity checking above invocation.
            if
               not
                  and
                     mte:x:@http.post
                        .:int:200
                     lt:x:@http.post
                        .:int:300
               .lambda

                  // Oops, web API didn't return success.
                  strings.concat
                     .:"Kubernetes could not create '"
                     get-value:x:@.dp/#
                     .:"'"
                  log.error:x:-
                     cluster:x:@.arguments/*/cluster
                     namespace:x:@.namespace
                     name:x:@.arguments/*/cloudlet_name
                     plan:x:@.arguments/*/plan
                     version:x:@.version
                     status:x:@http.post
                     response:x:@http.post/*/content
                  sockets.signal:hub.cloudlets.create
                     users:x:@.arguments/*/username
                     args
                        status:We could not create your cloudlet
                        finished:bool:true
                        error:bool:true
                  throw:We could not create your cloudlet
                     public:true
                     status:500

            // Logging the fact that we successfully created ingress.
            strings.concat
               .:"Kubernetes "
               get-value:x:@.entity-type
               .:" successfully applied"
            log.debug:x:-
               file:x:@.dp/#
               cluster:x:@.arguments/*/cluster
               namespace:x:@.namespace
               name:x:@.arguments/*/cloudlet_name
               plan:x:@.arguments/*/plan
               response:x:@http.post/*/content

            // Letting user know we've started exposing cloudlet to the internet.
            unwrap:x:+/**
            sockets.signal:hub.cloudlets.create
               users:x:@.arguments/*/username
               args
                  status:x:@strings.concat
                  finished:bool:false
                  error:bool:false
            if
               strings.ends-with:x:@.dp/#
                  .:claim.yaml
               .lambda
                  sleep:20000

   // Waiting for cloudlet to be ready before proceeding.
   unwrap:x:+/*
   signal:hub.cloudlets.wait-for-ready
      token:x:@.token
      name:x:@.arguments/*/cloudlet_name
      namespace:x:@.namespace
      url:x:@.base-url
      username:x:@.arguments/*/username

   /*
    * Checking if current invocation is creating a backend cloudlet,
    * and if so configuring it accordingly.
    */
   if:x:@.arguments/*/is-cloudlet

      // Base URL/Hostname of cloudlet.
      .cloudlet-url
      set-value:x:-
         strings.concat
            .:"https://"
            get-value:x:@.arguments/*/cloudlet_name
            .:.
            get-value:x:@.arguments/*/cluster

      /*
       * This is a cloudlet, and we need to configure it accordingly.
       * Hence, invoking slot responsible for configuring cloudlet.
       */
      unwrap:x:+/*
      signal:hub.cloudlets.configure
         url:x:@.cloudlet-url
         password:x:@.arguments/*/password
         name:x:@.arguments/*/name
         email:x:@.arguments/*/email
         username:x:@.arguments/*/username
         plan:x:@.arguments/*/plan
   else

      // Base URL/Hostname of cloudlet.
      strings.split:x:@.arguments/*/cluster
         .:.
      .cloudlet-url
      set-value:x:-
         strings.concat
            .:"https://"
            get-value:x:@.arguments/*/cloudlet_name
            .:.
            get-value:x:@strings.split/0
            .:app.
            get-value:x:@strings.split/1
            .:.
            get-value:x:@strings.split/2

      /*
       * This is not a backend cloudlet, and hence we'll need to retrieve
       * its primary document to verify deployment was successful.
       */
      http.get:x:@.cloudlet-url
      if
         not
            and
               mte:x:@http.get
                  .:int:200
               lt:x:@http.get
                  .:int:300
         .lambda

            // Oops ...!!
            log.error:After deployment was done, cloudlet did not return success status while retrieving root document
               url:x:@.cloudlet-url
               username:x:@.arguments/*/username
               status:x:@http.get
            throw:After deployment was done, cloudlet did not return success status while retrieving root document. Did you create a frontend on your backend cloudlet?
               status:412
               public:true
