
// Write a Hyperlambda script to import a specified URL as training data by scraping the URL and its internal hyperlinks, with options for content types and summarization.
.arguments
   url:string
   type:string
   delay:int
   max:int
   threshold:int
   summarize:bool
   insert_url:bool
   images:bool
   lists:bool
   code:bool
   feedback-channel:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Applying defaults.
validators.default:x:@.arguments
   images:bool:true
   lists:bool:true
   code:bool:true
   insert_url:bool:false

// Prepending scheme unless given.
if
   not
      strings.starts-with:x:@.arguments/*/url
         .:http
   .lambda
      set-value:x:@.arguments/*/url
         strings.concat
            .:"https://"
            get-value:x:@.arguments/*/url

// Trimming extra slash.
set-value:x:@.arguments/*/url
   strings.trim-end:x:@.arguments/*/url
      .:/

// Making sure URL does not contain CAPS characters.
set-value:x:@.arguments/*/url
   strings.to-lower:x:@.arguments/*/url

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/threshold
validators.url:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/delay
validators.integer:x:@.arguments/*/delay
   min:500
   max:30000
validators.mandatory:x:@.arguments/*/max
validators.integer:x:@.arguments/*/max
   min:1
   max:5000
validators.integer:x:@.arguments/*/threshold
   min:25
validators.default:x:@.arguments
   summarize:bool:false

// Doing some basic logging.
log.info:Crawling URL generating OpenAI training snippets
   url:x:@.arguments/*/url
   type:x:@.arguments/*/type
   delay:x:@.arguments/*/delay
   max:x:@.arguments/*/max
   threshold:x:@.arguments/*/threshold

// Invoking slot doing the heavy lifting.
unwrap:x:./*/signal/*/.onafter/*/.feedback-channel
add:x:./*/signal
   get-nodes:x:@.arguments/*
signal:magic.ai.crawl-site
   .onafter

      // Informing client that we're done.
      .feedback-channel:x:@.arguments/*/feedback-channel
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:Done!
            type:success

// Returning success to caller.
return
   result:success
