
// Write a Hyperlambda script to create a default landing page for a type by copying a specified URL and embedding a chatbot.
slots.create:magic.ai.create-landing-page

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.mandatory:x:@.arguments/*/type

   // Adding [headers] argument unless already specified.
   if
      not-exists:x:@.arguments/*/headers
      .lambda

         // Adding [headers] to [.arguments] such that we can create default HTTP headers further down.
         add:x:@.arguments
            .
               headers

   // Adding default headers unless they're already specified.
   validators.default:x:@.arguments/*/headers
      User-Agent:AINIRO-Crawler 2.0
      Accept-Encoding:identity
      Accept:text/xml

   // Signaling frontend.
   strings.concat
      .:"Creating default landing page for "
      get-value:x:@.arguments/*/type
      .:" by copying "
      get-value:x:@.arguments/*/url
   log.info:Creating default landing page for type
      type:x:@.arguments/*/type
      url:x:@.arguments/*/url
   unwrap:x:+/*/args/**
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:x:@strings.concat
         type:info
   sleep:100

   // Adding spacer.
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:------------------------------------------------------------------------------------------------------------------------
         type:info
   sleep:100

   // Retrieving HTML document from URL specified.
   add:x:./*/http.get
      get-nodes:x:@.arguments/*/headers
   http.get:x:@.arguments/*/url

   // Converting to lambda to verify we've got a "base" element.
   html2lambda:x:@http.get/*/content

   // Checking if document has a "base" element.
   if
      not
         exists:x:@html2lambda/*/html/*/head/*/base
      .lambda

         // Adding base.
         unwrap:x:+/*/*/*
         add:x:@html2lambda/*/html/*/head
            .
               base
                  @href:x:@.arguments/*/url

   // Moving base to the top of "head" section.
   insert-before:x:@html2lambda/*/html/*/head/0
      get-nodes:x:@html2lambda/*/html/*/head/*/base
   remove-nodes:x:@html2lambda/*/html/*/head/*/base/[1,2]

   // Adding chatbot embed script to page.
   .header:
   set-value:x:@.header
      get-first-value
         config.get:"magic:white-label:default-header"
         .:Ask about our products or services
   set-value:x:@.header
      strings.url-encode:x:@.header
   .scheme:"https://"
   if
      strings.contains:x:@.arguments/*/host
         .:localhost
      .lambda
         set-value:x:@.scheme
            .:"http://"
   .chatbot
   set-value:x:@.chatbot
      strings.concat
         get-value:x:@.scheme
         get-value:x:@.arguments/*/host
         .:/magic/system/openai/include-chatbot.js?theme=modern-bubbles&type=
         get-value:x:@.arguments/*/type
         .:&header=
         get-value:x:@.header
         .:&button=AI%20Chatbot
         .:&color=%23fefefe&start=%237892e5&end=%23142660&link=%23fe8464&v=
         version
         .:&follow_up=true
   unwrap:x:"+/*/*/*/\\@src"
   add:x:@html2lambda/*/html/*/body
      .
         script
            @src:x:@.chatbot
            @defer

   // Adding noindex to avoid duplicated content.
   add:x:@html2lambda/*/html/*/head
      .
         meta
            @name:robots
            @content:noindex

   // Inserting canonical if it doesn't exist from before.
   if
      not
         exists:x:"@html2lambda/*/html/*/head/*/link/*/\\@rel/=canonical"
      .lambda
         unwrap:x:"+/*/*/*/\\@href"
         add:x:@html2lambda/*/html/*/head
            .
               link
                  @rel:canonical
                  @href:x:@.arguments/*/url

   // Converting to HTML and saving to "/etc/www/" folder.
   lambda2html:x:@html2lambda/*
   strings.concat
      .:/etc/www/
      get-value:x:@.arguments/*/type
      .:.html
   io.file.save:x:@strings.concat
      get-value:x:@lambda2html
