
// Write a Hyperlambda script to try sending a lead email if possible, verifying SMTP settings and email validity.
slots.create:magic.ai.send-lead-email

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/prompt
   validators.mandatory:x:@.arguments/*/session
   validators.mandatory:x:@.arguments/*/user_id
   validators.mandatory:x:@.arguments/*/lead_email
   validators.mandatory:x:@.arguments/*/contact_us
   try

      // Verifying user has configured SMTP settings.
      config.get:"magic:smtp:host"
      if
         and
            not-null:x:@config.get
            neq:x:@config.get
               .:
         .lambda

            // Verifying that user provided a valid email address.
            .email
            strings.split:x:@.arguments/*/prompt
               .:@
            strings.split:x:@strings.split/0
               .:" "
            strings.split:x:@strings.split/@strings.split/1
               .:" "
            set-value:x:@.email
               strings.concat
                  get-value:x:@strings.split/@strings.split/0/-
                  .:@
                  get-value:x:@strings.split/0
            set-value:x:@.email
               strings.trim:x:@.email
                  .:.,-
            validators.email:x:@.email

            /*
             * Connecting to database and reading all requests from current session
             * such that we can add them to lead generation email, allowing users to
             * continue conversation where chatbot left it.
             */
            .body:
            data.connect:[generic|magic]

               // Retrieving all requests belonging to session
               data.read
                  table:ml_requests
                  columns
                     prompt
                     completion
                  where
                     and
                        session.eq:x:@.arguments/*/session

               // Creating email.
               for-each:x:@data.read/*
                  set-value:x:@.body
                     strings.concat
                        get-value:x:@.body
                        .:<strong>
                        get-value:x:@.dp/#/*/prompt
                        .:</strong>
                        .:<br>
                        .:<div>
                        get-value:x:@.dp/#/*/completion
                        .:</div>
                        .:<br>

               // Adding last prompt.
               set-value:x:@.body
                  strings.concat
                     get-value:x:@.body
                     .:<strong>
                     get-value:x:@.arguments/*/prompt
                     .:</strong>
                     .:<br>
                     .:<div>
                     get-value:x:@.arguments/*/contact_us
                     .:</div>

               // Sending email.
               strings.split:x:@.arguments/*/lead_email
                  .:,
               for-each:x:@strings.split/*
                  strings.trim:x:@.dp/#
                     .:" "
                  unwrap:x:+/*/*/*
                  add:x:../**/mail.smtp.send/*/message/*/to
                     .
                        .
                           name:AINIRO Lead Inbox
                           email:x:@strings.trim

               // Storing response to ml_requests to keep history.
               data.create
                  table:ml_requests
                  values
                     type:x:@.arguments/*/type
                     prompt:x:@.arguments/*/prompt
                     completion:x:@.arguments/*/contact_us
                     finish_reason:lead
                     session:x:@.arguments/*/session
                     user_id:x:@.arguments/*/user_id

            // Sending email.
            unwrap:x:+/**/content
            mail.smtp.send
               message
                  to
                  reply-to
                     Lead:x:@.email
                  subject:Chatbot lead
                  entity:text/html
                     content:x:@.body

            // Logging the fact that a lead was generated.
            log.info:Lead was generated

            // Returning success to caller.
            return:bool:true
      else

         // No SMTP configuration found, returning false to caller.
         return:bool:false
   .catch

      // Oops ...
      log.error:SMTP settings not valid
         message:x:@.arguments/*/message
         extra:To use lead generation with AINIRO, please apply a valid SMTP configuration.

      // Returning failure to caller.
      return:bool:false
