
// Write a Hyperlambda script to use Twilio in combination with OpenAI's ChatGPT APIs for virtual AI chatbots.
slots.create:magic.twilio.ai.chat

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/to
   validators.mandatory:x:@.arguments/*/from
   validators.mandatory:x:@.arguments/*/body
   set-name:x:@.arguments/*/body
      .:prompt
   validators.mandatory:x:@.arguments/*/twilio_account_id
   unwrap:x:+/*/*
   add:x:@.arguments
      .
         session:x:@.arguments/*/from

   // Looking up model from the given [AccountSid] argument.
   .type
   data.connect:[generic|magic]
      data.read
         table:ml_types
         columns
            type
         where
            and
               twilio_account_id.eq:x:@.arguments/*/twilio_account_id

      // Verifying model exists.
      if
         not-exists:x:@data.read/*
         .lambda

            // No such type.
            throw:Not authorised
               status:int:401

      // Storing type for invocation towards callback slot.
      set-value:x:@.type
         get-value:x:@data.read/*/*/type

   /*
    * Creating a thread to avoid timeout during webhook invocation from Twilio's side.
    * 
    * The way this works, is that we create a thread where we invoke OpenAI,
    * while returning to Twilio immediately. When OpenAI returns the answer to our question,
    * we invoke Twilio's API with the response from OpenAI using the dynamic
    * [magic.twilio.send-message] slot.
    */
   insert-before:x:./*/fork/0
      get-nodes:x:@.arguments
      get-nodes:x:@.type
   fork

      /*
       * Parametrising invocation to common slot retrieving the model,
       * and sanity checking invocation. Notice, we use the "meta" configuration
       * section to determine which model to use.
       */
      insert-before:x:./*/signal/*/.callback
         get-nodes:x:@.arguments/*

      // Invoking common slot retrieving model configuration settings, etc.
      unwrap:x:./*/signal/*/type
      signal:magic.ai.endpoint-common
         skip-auth:bool:true
         type:x:@.type
         .callback

            // Getting twilio_account_id and twilio_account_sid from type.
            data.connect:[generic|magic]
               .twilio_account_id
               .twilio_account_sid
               data.read
                  table:ml_types
                  columns
                     twilio_account_id
                     twilio_account_sid
                  where
                     and
                        type.eq:x:@.arguments/*/type
               set-value:x:@.twilio_account_id
                  get-value:x:@data.read/*/*/twilio_account_id
               set-value:x:@.twilio_account_sid
                  get-value:x:@data.read/*/*/twilio_account_sid

               // Checking if prompt contains an email address.
               if
                  and
                     strings.contains:x:@.arguments/*/prompt
                        .:@
                     not-null:x:@.arguments/*/contact_us
                     neq:x:@.arguments/*/contact_us
                        .:
                  .lambda

                     // Prompt contains an email address, hence treating prompt as a lead if we can.
                     unwrap:x:+/*
                     signal:magic.ai.send-lead-email
                        type:x:@.arguments/*/type
                        prompt:x:@.arguments/*/prompt
                        session:x:@.arguments/*/session
                        lead_email:x:@.arguments/*/lead_email
                        contact_us:x:@.arguments/*/contact_us
                     if:x:@signal

                        // Sending reply message to caller.
                        unwrap:x:+/*
                        signal:magic.twilio.send-message
                           body:x:@.arguments/*/contact_us
                           to:x:@.arguments/*/from
                           from:x:@.arguments/*/to
                           twilio_account_id:x:@.twilio_account_id
                           twilio_account_sid:x:@.twilio_account_sid

               // Checking what type of model this is, and invoking correct slot accordingly.
               if
                  strings.starts-with:x:@.arguments/*/model
                     .:gpt
                  .lambda

                     // Invoking chat style of slot.
                     add:x:./*/signal/[0,1]
                        get-nodes:x:@.arguments/*
                     signal:magic.ai.chat
                     unwrap:x:+/*
                     signal:magic.twilio.send-message
                        body:x:@signal/@signal/*/result
                        to:x:@.arguments/*/from
                        from:x:@.arguments/*/to
                        twilio_account_id:x:@.twilio_account_id
                        twilio_account_sid:x:@.twilio_account_sid
               else

                  // Invoking chat style of slot.
                  add:x:./*/signal/[0,1]
                     get-nodes:x:@.arguments/*
                  signal:magic.ai.completion
                  unwrap:x:+/*
                  signal:magic.twilio.send-message
                     body:x:@signal/@signal/*/result
                     to:x:@.arguments/*/from
                     from:x:@.arguments/*/to
                     twilio_account_id:x:@.twilio_account_id
                     twilio_account_sid:x:@.twilio_account_sid
