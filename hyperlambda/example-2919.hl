
// Returns a list of objects from NetSuite to caller according to arguments
.arguments

   // Mandatory argument declaring the type of objects we want to return.
   type:string

   // Optional limit for how many records to select. Defaults to 10 if not specified.
   limit:long

   // Optional from argument declaring from what ID the workflow should start returning records from.
   from:long

   // Optional filtering column which if specified declares a column that records must match on the [value] specified below.
   column:string

   // Optional filtering value which if specified declares the value that records must match on the [column] specified above. Value can be for instance 'john%' which combined with the above [column] being firstname will return all records having a first name containing the string 'john'.
   value:string
.type:public

// Sanity checking invocation and applying defaults.
validators.mandatory:x:@.arguments/*/type
validators.regex:x:@.arguments/*/type
   regex:^[a-z0-9-_]+$
validators.regex:x:@.arguments/*/column
   regex:^[a-z0-9-_]+$
validators.default:x:@.arguments
   limit:long:10

/*
 * Returns an access token for NetSuite.
 * 
 * Returns a JWT token that can be used to invoke NetSuite according to your configuration settings.
 * Notice, this will read account-id, certificate-id, and consumer-key from your configuration settings,
 * in addition to assume your private key exists in the file '/etc/netsuite/private-key.txt'.
 */
execute:magic.workflows.actions.execute
   name:netsuite-get-access-token
   filename:/modules/netsuite/workflows/actions/netsuite-get-access-token.hl
   arguments

// Creating invocation URL.
.url
set-value:x:@.url
   strings.concat
      .:"https://"
      config.get:"magic:netsuite:account-id"
      .:.suitetalk.api.netsuite.com/services/rest/query/v1/suiteql

// Creating our query.
.query
set-value:x:@.query
   strings.concat
      .:"select * from "
      get-value:x:@.arguments/*/type

// Checking if we're doing paging.
.paging:bool:false
if
   and
      exists:x:@.arguments/*/from
      not-null:x:@.arguments/*/from
   .lambda

      // Doing paging.
      set-value:x:@.paging
         .:bool:true
      set-value:x:@.query
         strings.concat
            get-value:x:@.query
            .:" where id > "
            get-value:x:@.arguments/*/from

// Checking if we're doing filtering.
if
   and
      exists:x:@.arguments/*/value
      exists:x:@.arguments/*/column
      not-null:x:@.arguments/*/value
      not-null:x:@.arguments/*/column
   .lambda

      // Doing filtering, checking if we've done paging.
      if:x:@.paging
         set-value:x:@.query
            strings.concat
               get-value:x:@.query
               .:" and"
      else
         set-value:x:@.query
            strings.concat
               get-value:x:@.query
               .:" where"
      set-value:x:@.query
         strings.concat
            get-value:x:@.query
            .:" "
            get-value:x:@.arguments/*/column
            .:" like '"
            strings.replace:x:@.arguments/*/value
               .:"'"
               .:"''"
            .:"'"

// Adding order by parts.
set-value:x:@.query
   strings.concat
      get-value:x:@.query
      .:" order by id fetch first "
      get-value:x:@.arguments/*/limit
      .:" rows only"

// Creating our idempotency key to prevent replay attacks.
guid.new

// Invoking our HTTP POST endpoint, now correctly parametrised.
http.post:x:@.url
   token:x:--/execute/=netsuite-get-access-token/*/access-token
   headers
      X-NetSuite-Idempotency-Key:x:@guid.new
      Prefer:transient
   payload
      q:x:@.query

// Converts the result to a lambda object.
json2lambda:x:@http.post/*/content

// Sanity checking above invocation.
if
   not
      and
         mte:x:@http.post
            .:int:200
         lt:x:@http.post
            .:int:300
   .lambda

      // Oops, error ...!!
      lambda2hyper:x:@json2lambda
      log.error:x:@lambda2hyper
      throw:Could not retrieve objects from NetSuite, check your log for details.

// Cleaning up redundant stuff.
remove-nodes:x:@json2lambda/*/items/*/*/links

// Returning entities to caller.
yield
   items:x:@json2lambda/*/items/*
