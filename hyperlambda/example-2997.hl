
// Imports pages, and optionally blogs from a WordPress account using the WP API.
.arguments
   url:string
   type:string
   username:string
   password:string
   vectorize:bool
   blogs:bool

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password

// Defaulting vectorize.
validators.default:x:@.arguments
   vectorize:bool:false
   blogs:bool:false

// Normalizing URL.
set-value:x:@.arguments/*/url
   strings.trim-end:x:@.arguments/*/url
      .:/

// Making sure we log and trap exceptions
try

   // Creating our basic auth token to invoke API.
   .key
   strings.concat
      get-value:x:@.arguments/*/username
      .:":"
      get-value:x:@.arguments/*/password
   strings.url-encode:x:-
   convert:x:-
      type:base64
   set-value:x:@.key
      strings.concat
         .:"Basic "
         get-value:x:@convert

   // First we retrieve pages.

   // Creating our URL to retrieve pages.
   .pages
   set-value:x:@.pages
      strings.concat
         get-value:x:@.arguments/*/url
         .:/wp-json/wp/v2/pages?per_page=100

   // Basic logging.
   log.info:Deleting training snippets to prepare for import using WordPress API
      url:x:@.arguments/*/url
      type:x:@.arguments/*/type

   // Deleting existing WP imported ml_training_snippets for model.
   data.connect:[generic|magic]
      data.execute:"delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = @type and meta = 'wordpress-import')"
         @type:x:@.arguments/*/type
      data.delete
         table:ml_training_snippets
         where
            and
               type.eq:x:@.arguments/*/type
               meta.eq:wordpress-import

   // Basic logging.
   log.info:Retrieving pages from WordPress
      url:x:@.arguments/*/url
      type:x:@.arguments/*/type

   // Retrieving pages.
   http.get:x:@.pages
      convert:true
      headers
         User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36
         Authorization:x:@.key

   // Sanity checking HTTP request.
   if
      not
         and
            mte:x:@http.get
               .:int:200
            lt:x:@http.get
               .:int:300
      .lambda

         // Oops ...!!
         lambda2hyper:x:@http.get
         log.error:Something went wrong while invoking WordPress to fetch pages
            result:x:@lambda2hyper
         throw:Something went wrong while invoking WordPress to fetch pages, check your log for details.

   // Opening up database connection.
   data.connect:[generic|magic]

      // Iterating through each page.
      for-each:x:@http.get/*/content/*

         // Some pages don't have content, such as the blog landing page, etc.
         if
            and
               not-null:x:@.dp/#/*/content/*/rendered
               neq:x:@.dp/#/*/content/*/rendered
                  .:
               not-null:x:@.dp/#/*/title/*/rendered
               neq:x:@.dp/#/*/title/*/rendered
                  .:
            .lambda

               // Removing irrelevant elementor stuff and transforming to Markdown.
               strings.regex-replace:x:@.dp/#/*/content/*/rendered
                  .:"\\[[^\\]]*\\]"
                  .:
               html2markdown:x:-
                  url:x:@.arguments/*/url
               html-decode:x:@.dp/#/*/title/*/rendered

               // Inserting page into database as snippet.
               data.create
                  table:ml_training_snippets
                  values
                     type:x:@.arguments/*/type
                     prompt:x:@html-decode
                     completion:x:@html2markdown
                     meta:wordpress-import
                     uri:x:@.dp/#/*/link

   /*
    * Then we retrieve blogs.
    * 
    * Notice, we only do this if caller explicitly told us he wanted blogs.
    */
   if:x:@.arguments/*/blogs

      // Basic logging.
      log.info:Retrieving posts from WordPress
         url:x:@.arguments/*/url
         type:x:@.arguments/*/type

      // Creating our URL to retrieve blogs.
      .posts
      set-value:x:@.posts
         strings.concat
            get-value:x:@.arguments/*/url
            .:/wp-json/wp/v2/posts?per_page=100

      // Retrieving pages.
      http.get:x:@.posts
         convert:true
         headers
            User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36
            Authorization:x:@.key

      // Sanity checking HTTP request.
      if
         not
            and
               mte:x:@http.get
                  .:int:200
               lt:x:@http.get
                  .:int:300
         .lambda

            // Oops ...!!
            lambda2hyper:x:@http.get
            log.error:Something went wrong while invoking WordPress to fetch posts
               result:x:@lambda2hyper
            throw:Something went wrong while invoking WordPress to fetch posts, check your log for details.

      // Opening up database connection.
      data.connect:[generic|magic]

         // Iterating through each page.
         for-each:x:@http.get/*/content/*

            // Some pages don't have content, such as the blog landing page, etc.
            if
               and
                  not-null:x:@.dp/#/*/content/*/rendered
                  neq:x:@.dp/#/*/content/*/rendered
                     .:
                  not-null:x:@.dp/#/*/title/*/rendered
                  neq:x:@.dp/#/*/title/*/rendered
                     .:
               .lambda

                  // Removing irrelevant elementor stuff and transforming to Markdown.
                  strings.regex-replace:x:@.dp/#/*/content/*/rendered
                     .:"\\[[^\\]]*\\]"
                     .:
                  html2markdown:x:-
                     url:x:@.arguments/*/url
                  html-decode:x:@.dp/#/*/title/*/rendered

                  // Inserting page into database as snippet.
                  data.create
                     table:ml_training_snippets
                     values
                        type:x:@.arguments/*/type
                        prompt:x:@html-decode
                        completion:x:@html2markdown
                        meta:wordpress-import
                        uri:x:@.dp/#/*/link

   // Basic logging.
   log.info:Done importing from WordPress
      url:x:@.arguments/*/url
      type:x:@.arguments/*/type

   // Checking if we should vectorize model or not.
   if:x:@.arguments/*/vectorize

      // Basic logging.
      log.info:Started vectorizing model after WordPress import
         type:x:@.arguments/*/type

      // Vectorizing model.
      execute:magic.ai.vectorise
         type:x:@.arguments/*/type

      // Basic logging.
      log.info:Done vectorizing model after WordPress import
         type:x:@.arguments/*/type
.catch

   // Oops ...!!
   log.error:Something went wrong as we tried to import products from WordPress
      url:x:@.arguments/*/url
      type:x:@.arguments/*/type
      error:x:@.arguments/*/message
