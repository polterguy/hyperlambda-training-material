
// Search for hotels using SERP API with mandatory query, check_in_date, and check_out_date parameters.
.arguments

   // Mandatory query to search for.
   query:string

   // Optional parameter filtering hotels by country. If specified must be a two letter country code such as US or NO.
   gl:string

   // Parameter defines the currency of the returned prices. Default to USD.
   currency:string

   // Optional parameter for how to sort results. Legal values are 3, 8 and 13. 3 implies lowest price, 8 implies highest rating and 13 implies most viewed.
   sort_by:string

   // Date when user wants to check in, mandatory argument. The format is YYYY-MM-DD. If you know today's date and the user says for instance to book for 'next weekend', then calculate this value instead of asking the user to supply it specifically.
   check_in_date:string

   // Date when user wants to check out, mandatory argument. The format is YYYY-MM-DD
   check_out_date:string

   // Optional parameter being number of adults to accommodate.
   adults:int

   // Optional parameter being the number of stars hotel must match. Legal values are 1 to 5.
   hotel_class:string

   // Optional parameter being minimum price per night.
   min_price:int

   // Optional parameter being maximum price per night.
   max_price:int
.type:public

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/query
validators.mandatory:x:@.arguments/*/check_in_date
validators.mandatory:x:@.arguments/*/check_out_date

// Retrieving SERP API's API key and making sure we've got one.
.api-key
set-value:x:@.api-key
   config.get:"magic:serp-api:api_key"
if
   or
      null:x:@.api-key
      eq:x:@.api-key
         .:
   .lambda

      // Oops ...!!
      throw:Could not find a SERP API key to use for fetching hotels.

// Creating our URL.
.url
set-value:x:@.url
   strings.concat
      .:"https://serpapi.com/search.json?engine=google_hotels&api_key="
      get-value:x:@.api-key

// Checking if we've got a query argument.
if
   and
      exists:x:@.arguments/*/query
      not-null:x:@.arguments/*/query
      neq:x:@.arguments/*/query
         .:
   .lambda

      // Concatenating query to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&q=
            strings.url-encode:x:@.arguments/*/query

// Checking if we've got a sort argument.
if
   and
      exists:x:@.arguments/*/sort_by
      not-null:x:@.arguments/*/sort_by
      neq:x:@.arguments/*/sort_by
         .:
   .lambda

      // Concatenating sort to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&sort_by=
            get-value:x:@.arguments/*/sort_by

// Checking if we've got a country argument.
if
   and
      exists:x:@.arguments/*/gl
      not-null:x:@.arguments/*/gl
      neq:x:@.arguments/*/gl
         .:
   .lambda

      // Concatenating country to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&gl=
            strings.url-encode:x:@.arguments/*/gl

// Checking if we've got a hotel_class argument.
if
   and
      exists:x:@.arguments/*/hotel_class
      not-null:x:@.arguments/*/hotel_class
      neq:x:@.arguments/*/hotel_class
         .:
   .lambda

      // Concatenating country to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&hotel_class=
            get-value:x:@.arguments/*/hotel_class

// Concatenating checkin date and check out to URL.
set-value:x:@.url
   strings.concat
      get-value:x:@.url
      .:&check_in_date=
      strings.url-encode:x:@.arguments/*/check_in_date
set-value:x:@.url
   strings.concat
      get-value:x:@.url
      .:&check_out_date=
      strings.url-encode:x:@.arguments/*/check_out_date

// Checking if we've got an adults argument.
if
   and
      exists:x:@.arguments/*/adults
      not-null:x:@.arguments/*/adults
      neq:x:@.arguments/*/adults
         .:
   .lambda

      // Concatenating adults to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&adults=
            get-value:x:@.arguments/*/adults

// Checking if we've got a min_price argument.
if
   and
      exists:x:@.arguments/*/min_price
      not-null:x:@.arguments/*/min_price
      neq:x:@.arguments/*/min_price
         .:
   .lambda

      // Concatenating min_price to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&min_price=
            get-value:x:@.arguments/*/min_price

// Checking if we've got a max_price argument.
if
   and
      exists:x:@.arguments/*/max_price
      not-null:x:@.arguments/*/max_price
      neq:x:@.arguments/*/max_price
         .:
   .lambda

      // Concatenating max_price to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&max_price=
            get-value:x:@.arguments/*/max_price

// Retrieving result.
http.get:x:@.url
   convert:true

// Sanity checking result of above invocation.
if
   not
      and
         mte:x:@http.get
            .:int:200
         lt:x:@http.get
            .:int:300
   .lambda

      // Oops ...!!
      lambda2hyper:x:../*
      log.info:x:-
      throw:Something went wrong while invoking SERP API

// Iterating through result, making sure we return the result to caller.
for-each:x:@http.get/*/content/*/properties/*/[0,5]
   unwrap:x:+/*/*/*
   add:x:../*/return-nodes/*/hotels
      .
         .
            type:x:@.dp/#/*/type
            name:x:@.dp/#/*/name
            overall_rating:x:@.dp/#/*/overall_rating
            reviews:x:@.dp/#/*/reviews
            location_rating:x:@.dp/#/*/location_rating
            link:x:@.dp/#/*/link
   if
      not-null:x:@.dp/#/*/hotel_class
      .lambda
         unwrap:x:+/*/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               hotel_class:x:@.dp/#/*/hotel_class
   if
      not-null:x:@.dp/#/*/logo
      .lambda
         unwrap:x:+/*/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               logo:x:@.dp/#/*/logo
   if
      not-null:x:@.dp/#/*/description
      .lambda
         unwrap:x:+/*/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               logo:x:@.dp/#/*/description
   if
      not-null:x:@.dp/#/*/sponsored
      .lambda
         unwrap:x:+/*/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               logo:x:@.dp/#/*/sponsored
   if
      not-null:x:@.dp/#/*/gps_coordinates/*
      .lambda
         unwrap:x:+/*/*/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               gps_coordinates
                  latitude:x:@.dp/#/*/gps_coordinates/*/latitude
                  longitude:x:@.dp/#/*/gps_coordinates/*/longitude
   if
      not-null:x:@.dp/#/*/rate_per_night/*/lowest
      .lambda
         unwrap:x:+/*/*/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               rate_per_night
                  lowest:x:@.dp/#/*/rate_per_night/*/lowest

   // Adding images.
   .images
   for-each:x:@.dp/#/*/images/*/[0,4]
      if
         and
            exists:x:@.dp/#/*/original_image
            not-null:x:@.dp/#/*/original_image
            neq:x:@.dp/#/*/original_image
               .:
         .lambda
            unwrap:x:+/*/*
            add:x:@.images
               .
                  .:x:@.dp/#/*/original_image
   if
      exists:x:@.images/*
      .lambda
         add:x:+/*/*
            get-nodes:x:@.images/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               images

   // Adding amenities.
   .amenities
   for-each:x:@.dp/#/*/amenities/*
      unwrap:x:+/*/*
      add:x:@.amenities
         .
            .:x:@.dp/#
   if
      exists:x:@.amenities/*
      .lambda
         add:x:+/*/*
            get-nodes:x:@.amenities/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               amenities

   // Adding nearby places.
   .nearby_places
   for-each:x:@.dp/#/*/nearby_places/*
      unwrap:x:+/*/*
      add:x:@.nearby_places
         .
            .:x:@.dp/#/*/name
   if
      exists:x:@.nearby_places/*
      .lambda
         add:x:+/*/*
            get-nodes:x:@.nearby_places/*
         add:x:../*/return-nodes/*/hotels/0/-
            .
               nearby_places

// Returning result to caller.
unwrap:x:+/*
return-nodes
   hotels
