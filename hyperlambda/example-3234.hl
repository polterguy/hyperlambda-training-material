
// Slot responsible for configuring a new cloudlet.
slots.create:hub.cloudlets.configure

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.mandatory:x:@.arguments/*/name
   validators.mandatory:x:@.arguments/*/email
   validators.mandatory:x:@.arguments/*/username
   validators.mandatory:x:@.arguments/*/password

   // Providing some feedback to user.
   sockets.signal:hub.cloudlets.create
      users:x:@.arguments/*/username
      args
         status:Waiting for cloudlet to respond to ping events
         error:bool:false

   // Verifying cloudlet can be pinged.
   .ping-url
   set-value:x:-
      strings.concat
         get-value:x:@.arguments/*/url
         .:/magic/system/ping
   .no:int:120
   while
      mt:x:@.no
         .:int:0
      .lambda
         http.get:x:@.ping-url
         if
            eq:x:@http.get
               .:int:200
            .lambda

               // Success, cloudlet is up running now and can be configured.
               log.debug:Cloudlet was successfully pinged
                  url:x:@.arguments/*/url
               set-value:x:@.no
                  .:int:0
               sockets.signal:hub.cloudlets.create
                  users:x:@.arguments/*/username
                  args
                     status:Your cloudlet is successfully responding to ping events
                     finished:bool:false
                     error:bool:false
         else

            // Cloudlet could not be pinged yet.
            math.decrement:x:@.no
            if
               eq:x:@.no
                  .:int:0
               .lambda

                  // Giving up, cloudlet couldn't be pinged.
                  log.error:Cloudlet could not be pinged after 2 minutes.
                     url:x:@.arguments/*/url
                  sockets.signal:hub.cloudlets.create
                     users:x:@.arguments/*/username
                     args
                        status:Your cloudlet is not responding to ping events
                        finished:bool:false
                        error:bool:true
                  throw:Your cloudlet would not respond to ping before 2 minutes had passed
                     public:true
                     status:500
            else
               sleep:1000

   // Giving user some feedback.
   sockets.signal:hub.cloudlets.create
      users:x:@.arguments/*/username
      args
         status:Authenticating towards cloudlet
         finished:bool:false
         error:bool:false

   // Authentication towards cloudlet to get JWT token used during configuration.
   .login-url
   .token
   set-value:x:@.login-url
      strings.concat
         get-value:x:@.arguments/*/url
         .:/magic/system/auth/authenticate?username=root&password=root
   http.get:x:@.login-url
      convert:true

   // Sanity checking invocation.
   if
      neq:x:@http.get
         .:int:200
      .lambda

         // Logging error and aborting.
         lambda2hyper:x:@http.get
         log.error:x:-
         log.error:Could not authenticate to cloudlet
            url:x:@.login-url
         sockets.signal:hub.cloudlets.create
            users:x:@.arguments/*/username
            args
               status:Could not authenticate to cloudlet
               finished:bool:false
               error:bool:true
         throw:Your cloudlet could not be configured for some reasons
            public:true
            status:500
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         get-value:x:@http.get/*/content/*/ticket
   log.debug:Successfully authenticated towards cloudlet
      url:x:@.arguments/*/url

   // Giving user some feedback.
   sockets.signal:hub.cloudlets.create
      users:x:@.arguments/*/username
      args
         status:"Configuring cloudlet's password and initialising its SQLite Magic database"
         finished:bool:false
         error:bool:false

   // Invoking setup HTTP endpoint to wire up cloudlet.
   .setup-url
   set-value:x:-
      strings.concat
         get-value:x:@.arguments/*/url
         .:/magic/system/config/setup
   http.post:x:@.setup-url
      convert:true
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         username:x:@.arguments/*/username
         password:x:@.arguments/*/password
         is_hashed:bool:true
         email:x:@.arguments/*/email
         name:x:@.arguments/*/name

   // Sanity checking invocation.
   if
      neq:x:@http.post
         .:int:200
      .lambda

         // Logging error and aborting.
         lambda2hyper:x:@http.post
         log.error:x:-
         log.error:Cloudlet could not successfully be configured
            url:x:@.arguments/*/url
         sockets.signal:hub.cloudlets.create
            users:x:@.arguments/*/username
            args
               status:Cloudlet could not successfully be configured
               finished:bool:false
               error:bool:true
         throw:Your cloudlet could not be configured for some reasons
            public:true
            status:500
   log.debug:Successfully configured cloudlet
      url:x:@.arguments/*/url

   // Updating JWT ticket that's now changed due to configuring cloudlet.
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         get-value:x:@http.post/*/content/*/ticket

   /*
    * Retrieving cloudlet's public IP address.
    * This needs to be done since there is no way to determine
    * the cloudlet's public IP address directly, without invoking
    * IP API from the cloudlet itself. Hence, we create a Hyperlambda
    * snippet, that we transmit to the cloudlet, executing it from the
    * cloudlet itself, that invokes IP API to retrieve the cloudlet's
    * public IP address and then store it in the cloudlet's appsettings.json
    * file, to later being able to retrieve it from the cloudlet itself by
    * reading its configuration settings.
    */

   // Building the URL to invoke "evaluate" endpoint on cloudlet.
   .execute-url
   set-value:x:-
      strings.concat
         get-value:x:@.arguments/*/url
         .:/magic/system/evaluator/evaluate

   // Building the URL to invoke IP API.
   .ip-url
   set-value:x:-
      strings.concat
         .:"https://ipapi.co/json/?key="
         config.get:"magic:ipapi-key"

   // Applying plan to restrict number of models allowed.
   .max-models:int:2
   .max-snippets:int:50
   switch:x:@.arguments/*/plan
      case:demo
      case:basic
         set-value:x:@.max-models
            .:int:2
         set-value:x:@.max-snippets
            .:int:500
      case:professional
         set-value:x:@.max-models
            .:int:10
         set-value:x:@.max-snippets
            .:int:10000
      case:enterprise
         set-value:x:@.max-models
            .:int:50
         set-value:x:@.max-snippets
            .:int:30000

   // Our dynamically built Hyperlambda that we send to the cloudlet.
   unwrap:x:+/+/+/+/**/.max-models
   unwrap:x:+/+/+/**/.max-snippets
   unwrap:x:+/+/*/http.get
   unwrap:x:+/**/Authorization
   .lambda

      /*
       * Creating the "hub" module that creates a dashboard plugin
       * that ensures we're returning cloudlet's IP address from
       * "server-information" endpoint.
       */
      .file

         /*
          * Creates the dashboard plugin slot that's responsible for returning
          * cloudlet's IP address to the "server-information" endpoint.
          */
         slots.create:magic.system-information.get-server-ip
            config.get:"magic:server_ip"
            unwrap:x:+/*
            return
               server_ip:x:@config.get

         /*
          * Creates the slot responsible for verifying user can create a machine learning model.
          * 
          * This fails if user has already created all models according to his license.
          */
         slots.create:magic.ai.can-create-machine-learning-model
            .max-models:x:@.max-models
            data.read
               table:ml_types
               columns
                  count(*)
                     as:count
            if
               mte
                  convert:x:@data.read/*/*/count
                     type:int
                  get-value:x:@.max-models
               .lambda
                  sockets.signal:magic.backend.message
                     roles:root
                     args
                        message:Your license does not allow for additional Machine Learning models. Please contact team@ainiro.io to upgrade your license.
                        type:error
                  throw:Your license does not allow for additional Machine Learning models. Please contact team@ainiro.io to upgrade your license.
                     public:bool:true
                     status:429

         /*
          * Creates the slot responsible for verifying user can create a machine learning model.
          * 
          * This fails if user has already created all models according to his license.
          */
         slots.create:magic.ai.can-create-snippet
            .max-snippets:x:@.max-snippets
            data.read
               table:ml_training_snippets
               columns
                  count(*)
                     as:count
               where
                  and
                     type.eq:x:@.arguments/*/type
            if
               mte
                  convert:x:@data.read/*/*/count
                     type:int
                  get-value:x:@.max-snippets
               .lambda
                  sockets.signal:magic.backend.message
                     roles:root
                     args
                        message:Your license does not allow for creating more training snippets. Please contact team@ainiro.io to upgrade your license.
                        type:error
                  throw:Your license does not allow for creating more training snippets. Please contact team@ainiro.io to upgrade your license.
                     public:bool:true
                     status:429

      // Creating "hub" module folder, and saving above lambda as Hyperlambda to it.
      io.folder.create:/modules/hub/
      io.folder.create:/modules/hub/magic.startup/
      lambda2hyper:x:@.file/*
         comments:true
      io.file.save:/modules/hub/magic.startup/magic.system-information.get-server-ip.hl
         get-value:x:@lambda2hyper
      eval:x:@.file

      // Invoking IP API URL to retrieve public IP address of cloudlet.
      http.get:x:@.ip-url
         headers
            Authorization:x:@.token
         convert:true

      // Loading config file, adding IP address, and saving it again
      config.load
      json2lambda:x:-
      unwrap:x:+/*/*
      add:x:@json2lambda/*/magic
         .
            server_ip:x:@http.get/*/content/*/ip/[0,1]
      lambda2json:x:@json2lambda/*
      config.save:x:-

   // Invoking cloudlet's "evaluate" endpoint.
   lambda2hyper:x:@.lambda/*
   http.post:x:@.execute-url
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         hyperlambda:x:@lambda2hyper
      convert:true

   // Sanity checking above invocation.
   if
      neq:x:@http.post
         .:int:200
      .lambda

         // Logging error and aborting.
         log.error:"We could not retrieve cloudlet's public IP address"
            url:x:@.arguments/*/url
            error:x:@http.post/*/content
            status:x:@http.post
         sockets.signal:hub.cloudlets.create
            users:x:@.arguments/*/username
            args
               status:"We could not retrieve cloudlet's public IP address"
               finished:bool:false
               error:bool:true
         throw:"We could not retrieve cloudlet's public IP address"
            public:true
            status:500

   /*
    * Making sure we delete all log items on cloudlet older than 14 days
    * once every 24 hours.
    */
   sockets.signal:hub.cloudlets.create
      users:x:@.arguments/*/username
      args
         status:Making sure we periodically delete old log items on cloudlet
         finished:bool:false
         error:bool:false
   .lambda

      // Creating a task that deletes all log items older than 14 days.
      tasks.create:delete-old-log-items
         description:Periodically deletes all log items older than 14 days
         repeats:5.hours
         .lambda
            sqlite.connect:magic
               sqlite.execute:"delete from log_entries where created < date('now', '-14 day')"
            log.info:Task to cleanup old log items executed successfully
               deleted:x:@sqlite.connect/*/sqlite.execute

   // Invoking cloudlet's "evaluate" endpoint.
   lambda2hyper:x:@.lambda/*
      comments:true
   unwrap:x:+/*/headers/*/Authorization
   http.post:x:@.execute-url
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         hyperlambda:x:@lambda2hyper
      convert:true

   // Sanity checking above invocation.
   if
      neq:x:@http.post
         .:int:200
      .lambda

         // Logging error and aborting.
         log.error:We could not create log cleanup task
            url:x:@.arguments/*/url
            error:x:@http.post/*/content
            status:x:@http.post
         sockets.signal:hub.cloudlets.create
            users:x:@.arguments/*/username
            args
               status:We could not create log cleanup task
               finished:bool:false
               error:bool:true
         throw:We could not create log cleanup task
            public:true
            status:500

   // Providing feedback to user and creating a log entry.
   log.debug:Cloudlet will automatically purge its log periodically
      url:x:@.arguments/*/url
