
// Count unique and distinct items from your Categories table in your northwind database
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.eq:string

// Meta data description for endpoint
.description:Count unique and distinct items from your Categories table in your northwind database

// Type of endpoint
.type:crud-count-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
