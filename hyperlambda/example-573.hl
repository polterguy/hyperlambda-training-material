
// Create a Hyperlambda script that returns the Hyperlambda required to execute an action or snippet, ensuring the user is authorized.
.arguments
   filename:string
   args:*

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Loading action/snippet Hyperlambda file and transforming to lambda object.
load-file:x:@.arguments/*/filename

// Checking if this is a action template.
if
   strings.contains:x:@.arguments/*/filename
      .:/workflows/actions/
   .lambda

      /*
       * This is an action template type of snippet.
       * Parametrizing accordingly.
       */
      .action
      add:x:@.action
         hyper2lambda:x:@load-file
            comments:true

      // Creating our action invocation.
      .invocation
         execute:magic.workflows.actions.execute
            name
            filename
            arguments
      set-value:x:@.invocation/*/execute/*/name
         get-value:x:@.arguments/*/args/*/action_name
      remove-nodes:x:@.arguments/*/args/*/action_name
      set-value:x:@.invocation/*/execute/*/filename
         get-value:x:@.arguments/*/filename

      // Creating our action comment.
      if
         eq
            get-name:x:@.action/0
            .:..
         .lambda
            unwrap:x:+/*/*
            insert-before:x:@.invocation/0
               .
                  ..:x:@.action/0

      // Making sure we correctly convert arguments according to type declaration.
      for-each:x:@.arguments/*/args/**
         if
            strings.starts-with:x:@.dp/#
               .:":x:"
            .lambda
               strings.substring:x:@.dp/#
                  .:int:3
               set-x:x:@.dp/#
                  convert:x:@strings.substring
                     type:x
         else
            get-name:x:@.dp/#
            switch:x:@.action/*/.arguments/*/{@get-name}/*/type
               case:long
               case:decimal
               case:int
               case:float
               case:double
                  set-value:x:@.dp/#
                     convert:x:@.dp/#
                        type:x:@.action/*/.arguments/*/{@get-name}/*/type
               case:hyperlambda
                  add:x:@.dp/#
                     hyper2lambda:x:@.dp/#
                        comments:true
                  set-value:x:@.dp/#

      // Decorating action arguments according to [.arguments]/[args].
      add:x:@.invocation/*/execute/*/arguments
         get-nodes:x:@.arguments/*/args/*

      // Returning result to caller as Hyperlambda.
      lambda2hyper:x:@.invocation/*
         comments:true
      yield
         result:x:@lambda2hyper
else

   // This is a template snippet, returning as is.
   unwrap:x:+/*
   return
      result:x:@load-file
