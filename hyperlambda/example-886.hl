
// Lists all foreign keys in some MySQL table.
slots.create:magic.db.mysql.foreign_keys

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:[information_schema]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   mysql.connect:x:@.connection

      // Dynamically creating our SQL.
      mysql.select:"select\n   `column_name` as `column`, `referenced_table_name` as foreign_table, `referenced_column_name` as foreign_column, `constraint_name` as name\n   from `information_schema`.`key_column_usage`\n   where `constraint_schema` = schema() and\n      `table_name` = @table and\n      `referenced_column_name` is not null and\n      `constraint_schema` = @database\n   order by `column_name`"
         @table:x:@.arguments/*/table
         @database:x:@.arguments/*/database

      /*
       * Creating our return value, by projecting it into
       * a generic form, that does not rely upon MySQL's syntactic
       * details.
       */
      return-nodes:x:@mysql.select/*
