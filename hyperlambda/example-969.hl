
// Create a global exception handler in Hyperlambda that logs error messages, URLs, and stack traces. It should check if the 'public' argument exists and is true or if the user has the 'root' role to decide whether to propagate the exception message to the client. If not, return a generic error message.
log.error:x:@.arguments/*/message
   url:x:@.arguments/*/path
   exception:x:@.arguments/*/stack

/*
 * Notice, unless the [public] argument exists, and is true,
 * we return a "generic" error to caller to make sure we don't
 * disclose any security information originating from exceptions.
 */
if
   or
      auth.ticket.in-role:root
      and
         exists:x:@.arguments/*/public
         or
            get-value:x:@.arguments/*/public
            convert:x:@.arguments/*/public
               type:bool
   .lambda

      // Exception message is supposed to propagate to client.
      set-value:x:../*/return/*/message
         get-value:x:@.arguments/*/message

// Parametrizing return invocation.
add:x:+
   get-nodes:x:@.arguments/*/status
   get-nodes:x:@.arguments/*/field
return
   message:Guru meditation, come back when Universe is in order!
