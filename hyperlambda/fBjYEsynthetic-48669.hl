
// Create a Hyperlambda script for a CRUD delete endpoint that deletes one item from the users_extra table in the magic database matching the specified arguments, ensuring authentication and authorization for root roles. - With Python equivalent
.arguments
   type:string
   user:string
.type:crud-delete

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/user

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      table:users_extra
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete


/*

# Python equivalent
import sqlite3
import re

def create_user_extra_record(database, record_type, value, user):
    # Simulate verifying root access
    if not verify_root_access():
        raise PermissionError("Root access required")

    # Validate the type using regex
    if not re.match(r"^[a-zA-Z0-9-_]+$", record_type):
        raise ValueError("Type does not match the required pattern")

    # Connect to the specified database
    connection = sqlite3.connect(database)
    cursor = connection.cursor()

    # Build the SQL query
    query = "INSERT INTO users_extra (type, value, user) VALUES (?, ?, ?)"

    # Execute the query
    cursor.execute(query, (record_type, value, user))
    connection.commit()

    # Close the connection
    connection.close()

    # Return success result
    return {"result": "success", "status": 201}

def verify_root_access():
    # Simulate root access verification
    return True

# Example usage
try:
    result = create_user_extra_record("magic.db", "admin", "example_value", "user1")
    print(result)
except (ValueError, PermissionError) as e:
    print(e)

*/