
// Aggregate Hyperlambda HTTP endpoint returning min, max, avg, or sum from media / cms database
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   media.id.mt:long
   media.id.lt:long
   media.id.mteq:long
   media.id.lteq:long
   media.id.neq:long
   media.id.eq:long
   media.post_id.mt:long
   media.post_id.lt:long
   media.post_id.mteq:long
   media.post_id.lteq:long
   media.post_id.neq:long
   media.post_id.eq:long
   media.file_path.like:string
   media.file_path.mt:string
   media.file_path.lt:string
   media.file_path.mteq:string
   media.file_path.lteq:string
   media.file_path.neq:string
   media.file_path.eq:string
   media.file_type.like:string
   media.file_type.mt:string
   media.file_type.lt:string
   media.file_type.mteq:string
   media.file_type.lteq:string
   media.file_type.neq:string
   media.file_type.eq:string
   media.created_at.mt:date
   media.created_at.lt:date
   media.created_at.mteq:date
   media.created_at.lteq:date
   media.created_at.neq:date
   media.created_at.eq:date
   post_id.title.eq:string
   post_id.title.like:string

// Meta data description for endpoint
.description:Aggregate Hyperlambda HTTP endpoint returning min, max, avg, or sum from media / cms database

// Type of endpoint
.type:crud-aggregate

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:media.id
   .:media.post_id
   .:media.file_path
   .:media.file_type
   .:media.created_at
   .:post_id.title

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:media
         join:posts
            as:post_id
            type:left
            on
               and
                  media.post_id:post_id.id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
