
// Update one record in your media table in your cms database
.arguments

   // id column value being primary key of record to update, mandatory argument
   id:long

   // post_id column's new value
   post_id:long

   // file_path column's new value
   file_path:string

   // file_type column's new value
   file_type:string

// Meta data description for endpoint
.description:Update one record in your media table in your cms database

// Type of endpoint
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:enterprise,root
.foreign-keys
   .
      column:post_id
      table:posts
      foreign_column:id
      foreign_name:title
      long:bool:true

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:media
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:cms.media.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
