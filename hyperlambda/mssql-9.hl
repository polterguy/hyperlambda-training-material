
/*
 * Returns all quotes grouped by discount group
 * 
 * Use this function to find how many quotes was created in the specified period grouped by discount group.
 * Optionally supply [date_min] and [date_max] to filter items.
 * Notice, if the function returns only `limit` amount of rows, there might exist additional rows, at which
 * point you should offer the user to list the next page of rows.
 */
.arguments

   // Optional minimum date for quotes to consider.
   min_date:string

   // Optional maximum date for quotes to consider.
   max_date:string

   // Optional maximum number of records to return. Defaults to 10 if not specified.
   limit:long

   // Optional offset into records of where to start returning items.
   offset:long

   // Optional column to order records, defaults to TotalQuotes.
   order:string

   // Optional sort direction, can be either 'ASC' or 'DESC'. Defaults to 'ASC' unless specified.
   direction:string

.type:public

// Making sure user is authorised to access the workflow.
auth.ticket.verify:mnhc-admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/order
   .:TotalQuotes
   .:TotalAmount
validators.enum:x:@.arguments/*/direction
   .:ASC
   .:DESC
   .:asc
   .:desc

// Applying defaults.
validators.default:x:@.arguments
   order:TotalQuotes
   direction:DESC

// Getting limit value, defaulting to 10
.limit
set-value:x:@.limit
   get-first-value
      get-value:x:@.arguments/*/limit
      .:long:10

// Making sure limit is never more than 10
if
   or
      eq:x:@.limit
         .:long:-1
      mt:x:@.limit
         .:long:10
   .lambda
      set-value:x:@.limit
         .:long:10
      add:x:../*/mssql.connect/*/yield
         .
            notice:"There might be more records but the system can only retrieve a maximum of 10 records at the time. Please inform the user that you can show him the next set of records if required."

// Getting offset value, defaulting to 0
.offset
set-value:x:@.offset
   get-first-value
      get-value:x:@.arguments/*/offset
      .:long:0

// Opening up database connection.
mssql.connect:[production|MNDG_LSC18-1]

   // Dynamically building our SQL.
   .sql:@"SELECT 
    [Customer Disc_ Group] as DiscountGroup,
    SUM([Amount]) AS TotalAmount,
    COUNT(DISTINCT [No_]) AS TotalQuotes
FROM addv_Cotizaciones
WHERE [Document Type] = 0"

   // Checking if we're filtering on min date.
   if
      and
         exists:x:@.arguments/*/min_date
         not-null:x:@.arguments/*/min_date
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:" AND [Document Date] > @min_date"
         convert:x:@.arguments/*/min_date
            type:date
         unwrap:x:+/*/*
         add:x:@mssql.connect/*/mssql.select
            .
               @min_date:x:@convert

   // Checking if we're filtering on max date.
   if
      and
         exists:x:@.arguments/*/max_date
         not-null:x:@.arguments/*/max_date
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:" AND [Document Date] < @max_date"
         convert:x:@.arguments/*/max_date
            type:date
         unwrap:x:+/*/*
         add:x:@mssql.connect/*/mssql.select
            .
               @max_date:x:@convert

   // Making sure we apply grouping and ordering.
   set-value:x:@.sql
      strings.concat
         get-value:x:@.sql
         .:" GROUP BY [Customer Disc_ Group] ORDER BY "
         get-value:x:@.arguments/*/order
         .:" "
         get-value:x:@.arguments/*/direction

   // Making sure we apply limit and offset.
   set-value:x:@.sql
      strings.concat
         get-value:x:@.sql
         .:" OFFSET "
         get-value:x:@.offset
         .:" ROWS FETCH NEXT "
         get-value:x:@.limit
         .:" ROWS ONLY"

   // Executing SQL.
   mssql.select:x:@.sql

   // Returning result of above invocation to caller.
   yield
      result:x:@mssql.select/*
