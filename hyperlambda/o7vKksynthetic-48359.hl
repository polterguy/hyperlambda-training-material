
// Create a function to return all existing payment subscription plans in the system. The function should find and execute all slots that declare subscription plans, each returning a name, description, price, currency, period (month or year), and Stripe price ID. The function should loop through these slots, execute them to retrieve the subscription plans, and return the plans to the caller. This setup allows the system to handle Stripe subscriptions effectively. - With Python equivalent
slots.vocabulary:stripe.subscriptions.plans.

// Looping through each slot returned above and executing it.
for-each:x:@slots.vocabulary/*

   // Changing slot invocation name.
   set-value:x:./*/execute
      get-value:x:@.dp/#

   /*
    * Executing slot to retrieve supported providers.
    * 
    * Notice, name of slot (value of node) is dynamically created above.
    */
   execute

   // Looping through all providers returned above to return them to client.
   for-each:x:@execute/*

      // Returning subscription plan to caller.
      add:x:../*/return
         get-nodes:x:@.dp/#

// Returning subscription plans to caller.
return


/*

# Python equivalent
def extract_stripe_charge_event_info(node_reference: dict):
    if not node_reference:
        raise ValueError("Node reference is mandatory")
    
    # Extracting data from the node reference
    data_object = node_reference.get('data', {}).get('object', {})
    amount = data_object.get('amount', 0) / 100  # Convert amount to decimal
    customer_id = data_object.get('customer', '')
    currency = data_object.get('currency', '')
    receipt_url = data_object.get('receipt_url', '')
    event_type = node_reference.get('type', '')
    metadata = data_object.get('metadata', {})
    
    return {
        "customer_id": customer_id,
        "amount": amount,
        "currency": currency,
        "receipt_url": receipt_url,
        "type": event_type,
        "metadata": metadata
    }

*/