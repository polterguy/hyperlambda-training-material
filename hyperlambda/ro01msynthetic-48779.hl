
// Create a Hyperlambda action to set specified HTTP headers in a response. Use 'headers' as a key-value input to determine which headers to set. - With Python equivalent
.arguments
   headers
      type:key-value
      mandatory:bool:true
.icon:http

/*
 * Iterating through each header from above invocation and checking if caller is interested in it,
 * and if caller wants this particular header, we make sure we return it below.
 */
for-each:x:@.arguments/*/headers/*

   // Adding currently iterated HTTP header.
   add:x:../*/response.headers.set
      get-nodes:x:@.dp/#

// Invoking slot responsible for setting response HTTP headers.
response.headers.set


/*

# Python equivalent
from flask import Flask, request, jsonify
import openai

app = Flask(__name__)

@app.route('/ask-openai', methods=['POST'])
def ask_openai():
    # Get the arguments from the request JSON
    prompt = request.json.get('prompt')
    model_type = request.json.get('type', 'gpt-3.5-turbo')

    # Validate the prompt
    if not prompt:
        return jsonify({"error": "Prompt is mandatory"}), 400

    # Call the OpenAI API
    response = openai.Completion.create(
        engine=model_type,
        prompt=prompt,
        max_tokens=150
    )

    # Return the response
    return jsonify(response)

# Example usage: Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)

*/