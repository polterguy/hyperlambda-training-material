
// CRUD / Create Hyperlambda that creates one record in your media table in your cms database - With Python equivalent
.arguments

   // post_id column value
   post_id:long

   // file_path column value
   file_path:string

   // file_type column value
   file_type:string

   // created_at column value
   created_at:date

// Meta data description for endpoint

// Type of endpoint
.type:crud-create

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin
.foreign-keys
   .
      column:post_id
      table:posts
      foreign_column:id
      foreign_name:title
      long:bool:true

// Opening up database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      database-type:sqlite
      table:media
      return-id:bool:true
      values

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      id:x:@data.create


/*

# Python equivalent
import sqlite3
from datetime import datetime

def create_media_record(post_id, file_path, file_type, created_at):
    # Verify authorization
    if not verify_auth_ticket(['root', 'admin']):
        raise PermissionError("Unauthorized access")

    # Connect to the cms database
    conn = sqlite3.connect('cms.db')
    cursor = conn.cursor()

    try:
        # Prepare and execute the insert statement
        cursor.execute(
            "INSERT INTO media (post_id, file_path, file_type, created_at) VALUES (?, ?, ?, ?)",
            (post_id, file_path, file_type, created_at)
        )
        conn.commit()

        # Return the ID of the newly created record
        return cursor.lastrowid
    finally:
        conn.close()

def verify_auth_ticket(roles):
    # Dummy function for authorization check
    # Replace with actual implementation
    return True

*/