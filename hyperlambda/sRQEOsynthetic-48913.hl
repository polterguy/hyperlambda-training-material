
// Associates the specified [username] with the specified [roles] roles. - With Python equivalent
.arguments
   username
      type:string
      mandatory:bool:true
   roles
      type:array
      mandatory:bool:true
.icon:supervisor_account

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/roles

// Connecting to database.
data.connect:[generic|magic]

   // Verifying user exists.
   data.read
      table:users
      columns
         username
      where
         and
            username.eq:x:@.arguments/*/username

   // Verifying above invocation returned something.
   if
      not-exists:x:@data.read/*
      .lambda

         // Oops ...!!
         throw:No such user
            username:x:@.arguments/*/username

   // Associating user with specified [roles].
   for-each:x:@.arguments/*/roles/*
      data.create
         table:users_roles
         values
            user:x:@.arguments/*/username
            role:x:@.dp/#


/*

# Python equivalent
import sqlite3

def associate_roles_with_user(username, roles):
    """
    This function associates the specified username with the specified roles.
    
    :param username: The username to associate roles with
    :param roles: A list of roles to associate with the username
    :raises ValueError: If username or roles are not provided
    :raises Exception: If the user does not exist
    """
    # Validate mandatory fields
    if not username:
        raise ValueError("Username is mandatory")
    if not roles:
        raise ValueError("Roles are mandatory")
    
    # Connect to the SQLite database
    conn = sqlite3.connect('magic.db')
    cursor = conn.cursor()
    
    # Check if the user exists
    cursor.execute("SELECT username FROM users WHERE username = ?", (username,))
    if not cursor.fetchone():
        raise Exception(f"No such user: {username}")
    
    # Associate the specified roles with the user
    for role in roles:
        cursor.execute("INSERT INTO users_roles (user, role) VALUES (?, ?)", (username, role))
    
    # Commit and close the connection
    conn.commit()
    cursor.close()
    conn.close()

# Example usage
# associate_roles_with_user("example_user", ["admin", "editor"])

*/