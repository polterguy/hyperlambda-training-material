
// Create a Hyperlambda script to count the number of Hyperlambda files and nodes in a specified folder. - With Python equivalent
.folder:/
.loc:int:0
.files:int:0
unwrap:x:+/*
signal:magic.io.file.load-recursively
   .:x:@.folder
for-each:x:@signal/*
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda
         hyper2lambda:x:@.dp/#/0
         math.increment:x:@.loc
            get-count:x:@hyper2lambda/**
         math.increment:x:@.files
remove-nodes:x:@signal/*


/*

# Python equivalent
import os

def count_hyperlambda_files_and_nodes(folder_path):
    """
    This function counts the number of Hyperlambda files and nodes in a specified folder.
    
    :param folder_path: The path to the folder containing Hyperlambda files
    :return: A dictionary containing the count of files and lines of code (LOC)
    """
    loc = 0
    files_count = 0
    
    # List all files recursively in the specified folder
    files = list_files_recursively(folder_path)
    
    # Process each file
    for file_path in files:
        if file_path.endswith(".hl"):
            # Load and process the Hyperlambda file
            hyperlambda_content = load_file(file_path)
            loc += count_lines_of_code(hyperlambda_content)
            files_count += 1
    
    # Return the counts
    return {"files": files_count, "loc": loc}

def list_files_recursively(directory):
    # List all files in the directory recursively
    return [os.path.join(root, file) for root, _, files in os.walk(directory) for file in files]

def load_file(file_path):
    # Load the content of the specified file
    with open(file_path, 'r') as file:
        return file.read()

def count_lines_of_code(content):
    # Count the number of lines of code in the content
    return len(content.splitlines())

# Example usage
# count_hyperlambda_files_and_nodes("/")

*/