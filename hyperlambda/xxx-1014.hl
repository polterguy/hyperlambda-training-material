
// Update one record in your Shipments table in your logistics database
.arguments
   recaptcha:string

   // ShipmentID column value being primary key of record to update, mandatory argument
   ShipmentID:long

   // OrderID column's new value
   OrderID:long

   // ShipmentDate column's new value
   ShipmentDate:string

   // DeliveryDate column's new value
   DeliveryDate:string

   // Status column's new value
   Status:string

// Meta data description for endpoint
.description:Update one record in your Shipments table in your logistics database

// Type of endpoint
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/ShipmentID

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.3

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin
.foreign-keys
   .
      column:OrderID
      table:Orders
      foreign_column:OrderID
      foreign_name:OrderDate
      long:bool:true

// Opening up our database connection.
data.connect:[generic|logistics]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Shipments
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:logistics.Shipments.put
      args
      roles:enterprise,guest

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
