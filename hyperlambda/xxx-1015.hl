
// Returns minimum, maximum, average or sum from your Tracking table in your logistics database
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Tracking.TrackingID.mt:long
   Tracking.TrackingID.lt:long
   Tracking.TrackingID.mteq:long
   Tracking.TrackingID.lteq:long
   Tracking.TrackingID.neq:long
   Tracking.TrackingID.eq:long
   Tracking.ShipmentID.mt:long
   Tracking.ShipmentID.lt:long
   Tracking.ShipmentID.mteq:long
   Tracking.ShipmentID.lteq:long
   Tracking.ShipmentID.neq:long
   Tracking.ShipmentID.eq:long
   Tracking.Location.like:string
   Tracking.Location.mt:string
   Tracking.Location.lt:string
   Tracking.Location.mteq:string
   Tracking.Location.lteq:string
   Tracking.Location.neq:string
   Tracking.Location.eq:string
   Tracking.Timestamp.like:string
   Tracking.Timestamp.mt:string
   Tracking.Timestamp.lt:string
   Tracking.Timestamp.mteq:string
   Tracking.Timestamp.lteq:string
   Tracking.Timestamp.neq:string
   Tracking.Timestamp.eq:string
   Tracking.Status.like:string
   Tracking.Status.mt:string
   Tracking.Status.lt:string
   Tracking.Status.mteq:string
   Tracking.Status.lteq:string
   Tracking.Status.neq:string
   Tracking.Status.eq:string
   ShipmentID.ShipmentDate.eq:string
   ShipmentID.ShipmentDate.like:string

// Meta data description for endpoint
.description:Returns minimum, maximum, average or sum from your Tracking table in your logistics database

// Type of endpoint
.type:crud-aggregate

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Tracking.TrackingID
   .:Tracking.ShipmentID
   .:Tracking.Location
   .:Tracking.Timestamp
   .:Tracking.Status
   .:ShipmentID.ShipmentDate

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=50

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|logistics]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Tracking
         join:Shipments
            as:ShipmentID
            type:left
            on
               and
                  Tracking.ShipmentID:ShipmentID.ShipmentID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
