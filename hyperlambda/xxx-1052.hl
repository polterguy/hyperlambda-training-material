
// Read or list records from your Warehouses table in your logistics database
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Warehouses.WarehouseID.mt:long
   Warehouses.WarehouseID.lt:long
   Warehouses.WarehouseID.mteq:long
   Warehouses.WarehouseID.lteq:long
   Warehouses.WarehouseID.neq:long
   Warehouses.WarehouseID.eq:long
   Warehouses.Location.like:string
   Warehouses.Location.mt:string
   Warehouses.Location.lt:string
   Warehouses.Location.mteq:string
   Warehouses.Location.lteq:string
   Warehouses.Location.neq:string
   Warehouses.Location.eq:string
   Warehouses.Capacity.mt:double
   Warehouses.Capacity.lt:double
   Warehouses.Capacity.mteq:double
   Warehouses.Capacity.lteq:double
   Warehouses.Capacity.neq:double
   Warehouses.Capacity.eq:double

// Meta data description for endpoint
.description:Read or list records from your Warehouses table in your logistics database

// Type of endpoint
.type:crud-read

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=50

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|logistics]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Warehouses
      columns
         Warehouses.WarehouseID
         Warehouses.Location
         Warehouses.Capacity
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
