
// Create a Hyperlambda script to display 12 articles with pagination, including previous and next article URLs.
.found:bool:true

/*
 * Returns the HTML required to display 12 articles,
 * according to paging.
 */
.articles

   /*
    * Building our result HTML by listing all files and reading front matter
    * parts creating article cards.
    */
   .start:int:0
   .count:int:12
   .idx:int:0
   .result

   // Checking if user has paged blogs.
   if
      and
         exists:x:@.arguments/*/p
         neq:x:@.arguments/*/p
            .:1
      .lambda
         convert:x:@.arguments/*/p
            type:int
         math.decrement:x:-
         set-value:x:@.start
            math.multiply:x:@.count
               get-value:x:@convert

   // Listing all blog files.
   io.file.list:/etc/www/.blog/

   // Reversing order such that newest article comes first.
   .articles
   while
      exists:x:@io.file.list/0
      .lambda
         add:x:@.articles
            get-nodes:x:@io.file.list/0/-
         remove-nodes:x:@io.file.list/0/-

   // Iterating through all articles displaying the sub-section of items we're supposed to display.
   .found:bool:false
   .no:int:0
   for-each:x:@.articles/*

      // Checking if we're beyond start index and below count.
      if
         and
            mte:x:@.idx
               get-value:x:@.start
            mt:x:@.count
               .:int:0
         .lambda

            // Calculating wow time.
            math.modulo:x:@.no
               .:int:3
            math.add:x:-
               .:int:1
            math.multiply:x:-
               .:int:2

            // Making sure we update found to true.
            math.increment:x:@.no
            set-value:x:@.found
               .:bool:true

            // Loading file to retrieve front matter parts dynamically building our card.
            io.file.load:x:@.dp/#
            markdown2html:x:@io.file.load
            strings.split:x:@.dp/#
               .:/
            strings.split:x:@strings.split/0/-
               .:.
            strings.substring:x:@strings.split/0
               .:int:11
            .url
            set-value:x:@.url
               strings.concat
                  .:/blog/
                  get-value:x:@strings.substring
            .date
            strings.substring:x:@strings.split/0
               .:int:0
               .:int:10
            convert:x:@strings.substring
               type:date
            set-value:x:@.date
               date.format:x:@convert
                  format:d MMMM yyyy
            .image
            set-value:x:@.image
               get-first-value
                  get-value:x:@markdown2html/*/image
                  .:/assets/images/ainiro-chatgpt-website-chatbot.png
            .description
            set-value:x:@.description
               get-first-value
                  get-value:x:@markdown2html/*/description
                  .:ChatGPT, AI, and Machine Learning articles from AINIRO.IO
            strings.url-encode:x:@.image
            .resized
            set-value:x:@.resized
               strings.concat
                  .:/magic/modules/hub/resize-image?img=
                  get-value:x:@strings.url-encode
                  .:&type=webp&width=550
            set-value:x:@.result
               strings.concat
                  get-value:x:@.result
                  io.file.mixin:/etc/www/.components/blog-thumb-all.html
                     url:x:@.url
                     title:x:@markdown2html/*/title
                     date:x:@.date
                     image:x:@.resized
                     description:x:@.description
                     author:x:@markdown2html/*/author
                     wow:x:@math.multiply

            // Decrementing counter.
            math.decrement:x:@.count

      // Incrementing currently iterated article.
      math.increment:x:@.idx

   // Checking if we're at the end of articles.
   if
      mt:x:@.count
         .:int:0
      .lambda

         // Next page is disabled
         set-value:x:@.articles/@.articles/./*/.next-list-item
            .:"<li class=\"page-item disabled\" tabindex=\"-1\" aria-disabled=\"true\">"
   else

      // Next page is enabled.
      set-value:x:@.articles/@.articles/./*/.next-list-item
         .:"<li class=\"page-item\">"

   // Making sure we had a full list of articles.
   if
      lt:x:@.no
         get-value:x:@.count
      .lambda
         set-value:x:@.articles/@.articles/@.found
            .:bool:false

   // Making sure we found anything at all.
   if
      eq:x:@.found
         .:bool:false
      .lambda
         set-value:x:@.articles/@.articles/@.found
            .:bool:false
         response.status.set:404
         return:

   // Returning success to caller.
   return:x:@.result

// Returns the URL to previous blogs in paging.
.previous-article-url
   if
      or
         not-exists:x:@.arguments/*/p
         eq:x:@.arguments/*/p
            .:1
      .lambda
         return:/blog
   convert:x:@.arguments/*/p
      type:int
   math.decrement:x:@convert
   if
      eq:x:@math.decrement
         .:int:1
      .lambda
         return:/blog
   strings.concat
      .:/blog?p=
      get-value:x:@convert
   return:x:-

// Returns disabled class if previous button is disabled.
.prev-list-item
   if
      or
         not-exists:x:@.arguments/*/p
         eq:x:@.arguments/*/p
            .:1
      .lambda
         return:"<li class=\"disabled\" tabindex=\"-1\" aria-disabled=\"true\">"
   return:<li>

// Returns the URL to the next blogs in paging.
.next-article-url
   if
      eq:x:@.next-article-url/@.found
         .:bool:false
      .lambda
         return:#
   if
      or
         not-exists:x:@.arguments/*/p
         eq:x:@.arguments/*/p
            .:1
      .lambda
         return:/blog?p=2
   if
      eq:x:@.prev-disabled-class
         .:
      .lambda
         return:/blog
   convert:x:@.arguments/*/p
      type:int
   math.increment:x:@convert
   strings.concat
      .:/blog?p=
      get-value:x:@convert
   return:x:-

// Returns disabled class if next button should be disabled.
.next-list-item
.oninit
   response.headers.set
      Cache-Control:public, max-age=72000
