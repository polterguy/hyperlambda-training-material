
// Create a Hyperlambda script to display a blog article with related articles, author, published date, and formatted content.
.blog-title
.blog-content
.image
.description
.categories
.related-articles
   request.url
   strings.split:x:@request.url
      .:/
   .filename
   set-value:x:@.filename
      strings.concat
         .:-
         get-value:x:@strings.split/1
         .:.md
   io.file.list:/etc/www/.blog/
   .related
   .found:bool:false
   for-each:x:@io.file.list/*
      if
         strings.contains:x:@.dp/#
            get-value:x:@.filename
         .lambda
            set-value:x:@.found
               .:bool:true
      if
         eq:x:@.found
            .:bool:false
         .lambda
            unwrap:x:+/*/*
            add:x:@.related
               .
                  .:x:@.dp/#
            if
               mt
                  get-count:x:@.related/*
                  .:int:3
               .lambda
                  remove-nodes:x:@.related/0
   .result:
   for-each:x:@.related/*
      io.file.load:x:@.dp/#
      markdown2html:x:-
      strings.split:x:@.dp/#
         .:/
      strings.split:x:@strings.split/0/-
         .:.
      strings.substring:x:@strings.split/0
         .:int:11
      .url
      set-value:x:@.url
         strings.concat
            .:/blog/
            get-value:x:@strings.substring
      .date
      strings.substring:x:@strings.split/0
         .:int:0
         .:int:10
      convert:x:@strings.substring
         type:date
      set-value:x:@.date
         date.format:x:@convert
            format:d. MMM yyyy
      get-first-value
         get-value:x:@markdown2html/*/image
         .:/assets/images/ainiro-chatgpt-website-chatbot.png
      set-value:x:@.result
         strings.concat
            .:"\n      <div class=\"w-full md:w-2/3 lg:w-1/3\">\n         <div class=\"single-blog micro-blog shadow-sm hover:shadow-xl duration-300 rounded-lg px-5 py-8\">\n         <div class=\"mb-4 overflow-hidden blog-image rounded-xl\">"
            .:"\n            <a href=\""
            get-value:x:@.url
            .:"\">\n               <img class=\"w-full\" src=\"/magic/modules/hub/resize-image?img="
            strings.url-encode:x:@get-first-value
            .:&type=webp&width=550
            .:"\" loading=\"lazy\" alt=\""
            get-value:x:@markdown2html/*/title
            .:"\" title=\""
            get-value:x:@markdown2html/*/title
            .:"\">\n            </a>\n            </p>\n         </div>\n         <div>\n            <a href=\""
            get-value:x:@.url
            .:"\" class=\"\n                  mb-4\n                  text-xl\n                  leading-snug\n                  text-gray-900\n                  hover:text-theme-color\n                  block\n                  duration-300\n                  wow\n                  fadeIn\n               \">\n               <h2 class=\"clip-text\">"
            get-value:x:@markdown2html/*/title
            .:"\n               </h2>\n            </a>\n            <p class=\"blog-description text-sm mb-4\" style=\"height:60px;max-height:60px;min-height: unset;overflow-y:hidden;\">"
            get-value:x:@markdown2html/*/description
            .:"\n            </p>\n            <a class=\"text-theme-color-2 hover:tracking-wider duration-300\" href=\""
            get-value:x:@.url
            .:"\">\n               Read More\n               <i class=\"ml-2 lni lni-chevron-right text-sm font-bold\"></i>\n            </a>"
            .:"\n         </div>\n         </div>\n      </div>"
            get-value:x:@.result
   if
      mt
         get-count:x:@.related/*
         .:int:0
      .lambda
         set-value:x:@.result
            strings.concat
               .:"\n      <div class=\"justify-center flex flex-wrap mt-10\" style=\"margin-right:-10px;\">\n"
               get-value:x:@.result
               .:"      </div>\n    </div>\n"
   return:x:@.result

// Returns author component
.author
   .name
   strings.concat
      .:/etc/www/.components/authors/
      get-value:x:@.name
      .:.html
   io.file.mixin:x:@strings.concat
   return:x:-

// Figuring out partial filename.
.filepath
request.url
strings.split:x:@request.url
   .:/

// Listing all files in ".blog" folder such that we can find the correct file.
io.file.list:/etc/www/.blog/
.published
   .date
   convert:x:@.date
      type:date
   date.format:x:-
      format:d. MMM yyyy
   return:x:-

// Iterating through each file returned above to find the correct file.
for-each:x:@io.file.list/*

   // Checking if this was the file requested.
   strings.substring:x:@.dp/#
      .:int:26
   strings.split:x:@strings.substring
      .:.
   if
      eq:x:@strings.split/0
         get-value:x:@strings.split/@strings.split/0/-
      .lambda

         // This is the file that was requested.
         set-value:x:@.filepath
            get-value:x:@.dp/#

// Verifying file exists.
if
   or
      null:x:@.filepath
      not
         io.file.exists:x:@.filepath
   .lambda
      throw:Not found
         public:bool:true
         status:int:404

// Loading file and transforming to Markdown such that we can get front matter parts.
io.file.load:x:@.filepath
markdown2html:x:@io.file.load
   media
.html
set-value:x:@.html
   get-value:x:@markdown2html
set-value:x:@.published/*/.date
   get-value:x:@markdown2html/*/date

// Making sure YouTube videoes are full width.
html2lambda:x:@.html
insert-before:x:@html2lambda/*/p/*/iframe/./0
   .
      @class:youtube-embed
set-name:x:@html2lambda/*/p/*/iframe/.
   .:div

// Checking if article contains code elements, at which point we include syntax highlighter.
if
   exists:x:@html2lambda/**/pre
   .lambda

      // Injecting highlight.js
      insert-after:x:@html2lambda/0/-
         .
            div
               #text:"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n<script src=\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.7.0/build/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>"

// Changing all images to webp
for-each:x:@html2lambda/**/img
   if
      and
         exists:x:"@.dp/#/*/\\@src"
         strings.starts-with:x:"@.dp/#/*/\\@src"
            .:/
      .lambda
         strings.concat
            .:/etc/www/
            get-value:x:"@.dp/#/*/\\@src"
         image.size:x:-
         unwrap:x:+/*/*
         add:x:@.dp/#
            .
               @width:x:@image.size/*/width
               @height:x:@image.size/*/height
               @loading:lazy
         set-value:x:"@.dp/#/*/\\@src"
            strings.concat
               .:/magic/modules/hub/resize-image?type=webp&img=
               strings.url-encode:x:"@.dp/#/*/\\@src"

// Changing from lambda to HTML again, now with updated content.
set-value:x:@.html
   lambda2html:x:@html2lambda/*

// Setting header, content and image from front matter.
set-value:x:@.author/*/.name
   get-value:x:@markdown2html/*/author
set-value:x:@.blog-title
   get-value:x:@markdown2html/*/title
set-value:x:@.blog-content
   get-value:x:@.html
set-value:x:@.image
   get-first-value
      get-value:x:@markdown2html/*/image
      .:/assets/images/ainiro-chatgpt-website-chatbot.png
set-value:x:../*/.image/[0,1]
   get-first-value
      get-value:x:@markdown2html/*/image
      .:/assets/images/ainiro-chatgpt-website-chatbot.png
set-value:x:@.description
   get-value:x:@markdown2html/*/description
add:x:@.categories
   get-nodes:x:@markdown2html/*/categories/*
.interceptor
