
// Create a Hyperlambda script to create the magic database, apply migration scripts, and schedule a daily backup task.
.db-type
set-value:x:@.db-type
   config.get:"magic:databases:default"

/*
 * This one is true if database was corrupt, at which point we do not create a backup of
 * database further down in this file by executing backup task immediately.
 */
.corrupt:bool:false

// Checking if magic db exists, and if not, creating it.
.slot
set-value:x:@.slot
   strings.concat
      .:magic.db.
      get-value:x:@.db-type
      .:.databases
signal:x:@.slot
if
   not
      exists:x:@signal/*/*/=magic
   .lambda

      /*
       * Database does not exist.
       * 
       * Executing SQL script that creates database, but first we must dynamically
       * determine which script to execute, which differs according to what database
       * type Magic is configured to use as default database type.
       */
      strings.concat
         .:/misc/
         get-value:x:@.db-type
         .:/magic.sql

      // Loading create database SQL script file.
      io.file.load:x:@strings.concat

      /*
       * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
       * accommodate for "go" statements.
       * 
       * For PG SQL we'll need to first create the database in a separate [pgsql.connect] invocation,
       * then run the execute script with the created database as our selected database.
       */
      console.log:Trying to create Magic database
      switch:x:@.db-type

         // Special case for MS SQL to use [mssql.execute-batch].
         case:mssql
            mssql.connect
               mssql.execute-batch:x:@io.file.load

         // Special case for PG SQL to create database in a different connection.
         case:pgsql
            pgsql.connect:[generic|postgres]
               pgsql.execute:create database magic
            pgsql.connect:[generic|magic]
               pgsql.execute:x:@io.file.load

         // MySQL version, simply doing everything as normal and plain as possible.
         case:mysql

            // Executing create database SQL script without any special cases.
            mysql.connect
               mysql.execute:x:@io.file.load

         // SQLite version.
         case:sqlite

            // Executing create database SQL script without any special cases.
            sqlite.connect:[generic|magic]
               sqlite.execute:x:@io.file.load

      // Magic database successfully created
      console.log:Magic databases was successfully created
else-if
   eq:x:@.db-type
      .:sqlite
   .lambda

      /*
       * Default database is SQLite.
       * 
       * Verifying magic database is not corrupted, and if database is corrupt,
       * we revert to backup version.
       */
      try

         /*
          * The next two lines of Hyperlambda will throw an exception
          * if the magic database is corrupted.
          */
         data.connect:[generic|magic]
            data.select:select count(*) from log_entries

         // Logging to console.
         console.log:Successfully connected to magic database
      .catch

         // Logging to console.
         console.log:Magic database is corrupted

         /*
          * Could not connect to database, so we revert back to backup,
          * but only if backup exists.
          */
         if
            io.file.exists:/data/magic.backup
            .lambda

               // Flushing cached connections.
               sqlite.connections.flush

               // Deleting magic.db file.
               io.file.delete:/data/magic.db

               // Copying magic.backup to magic.db.
               io.file.copy:/data/magic.backup
                  .:/data/magic.db

               // Logging to console.
               console.log:Reverted to backup of magic database

               // Making sure code further down understands we had to revert to backup.
               set-value:x:@.corrupt
                  .:bool:true

/*
 * Listing all SQL migration scripts, and executing these sequentially,
 * making sure we're using the correct folder, according to what database
 * type Magic has been configured with.
 */
strings.concat
   .:/misc/
   get-value:x:@.db-type
   .:/migrations/
io.file.list:x:@strings.concat

// Connecting to Magic database.
data.connect:[generic|magic]

   // Iterating through each file in folder.
   for-each:x:@io.file.list/*

      // Verifying file ends with ".sql".
      if
         strings.ends-with:x:@.dp/#
            .:.sql
         .lambda

            // This is an SQL file, hence loading it and executing it.
            io.file.load:x:@.dp/#

            /*
             * Notice, to avoid having ONE failing migration script
             * aborting the entire migration job, we need to do a try/catch/ignore
             * here. This might occur if for instance some of the migration scripts
             * has executed successfully previously.
             */
            try

               // Ensuring we're doing the "batch execute" thing in case we're in MS SQL land.
               if
                  eq
                     get-value:x:@.db-type
                     .:mssql
                  .lambda
                     set-name:x:@if/./*/data.execute
                        .:mssql.execute-batch

               // Executing migration script and logging result.
               data.execute:x:@io.file.load
               strings.concat
                  .:"Script '"
                  get-value:x:@.dp/#
                  .:"' succeeded"
               console.log:x:@strings.concat
            .catch

               // We might end up here if migration script has been previously executed ...
               strings.concat
                  .:"Script '"
                  get-value:x:@.dp/#
                  .:"' failed"
               console.log:x:@strings.concat
               console.log:x:@.arguments/*/message

// Applying all common Hyperlambda files.
io.file.list-recursively:/misc/common-startup-files/
for-each:x:@io.file.list-recursively/*

   // Verifying file is a Hyperlambda file.
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda

         // Executes file.
         io.file.execute:x:@.dp/#
         strings.concat
            .:"Hyperlambda file '"
            get-value:x:@.dp/#
            .:"' successfully executed"
         console.log:x:@strings.concat

/*
 * Creates a scheduled task that periodically creates a backup of SQLite database,
 * but only if default database is SQLite.
 */
if
   eq
      config.get:"magic:databases:default"
      .:sqlite
   .lambda

      // Deleting previously created scheduled task with same name.
      tasks.list:sqlite.create-backup
      if
         exists:x:@tasks.list/*
         .lambda

            // Deleting previously created task.
            tasks.delete:sqlite.create-backup

      // Creating a new task that creates a backup of database, and scheduling it to execute 1AM UTC every day.
      tasks.create:sqlite.create-backup
         description:Creates a backup of your magic database 1AM UTC time every day.
         repeats:**.**.01.00.00
         .lambda

            // Connecting to database to create our backup.
            data.connect:[generic|magic]

               // Checking if old backup exists.
               if
                  io.file.exists:/data/magic.backup
                  .lambda

                     // Deleting old backup.
                     io.file.delete:/data/magic.backup

               // This ensures transaction is executed, since transactions are lazy in Magic.
               sqlite.backup:magic.backup

               /*
                * Flushing connections will remove cached connection to avoid connection
                * issues the next time we create a backup.
                */
               sqlite.connections.flush

               // Logging.
               log.info:Created backup of magic database

      // Logging success to console.
      console.log:Successfully created database backup task that creates a backup of magic.db 1AM UTC every day

      // Invoking task to make sure we've got one backup immediately.
      if
         eq:x:@.corrupt
            .:bool:false
         .lambda

            // Since database was not corrupt we create an immediate backup now.
            tasks.execute:sqlite.create-backup

            // Logging to console.
            console.log:Executed task that creates backup of magic database
