
// Create a Hyperlambda script that sets up authentication and other parts of the system according to the provided arguments, ensuring the user is authorized.
.arguments
   username:string
   password:string
   is_hashed:bool
   name:string
   email:string
.description:Setup authentication and other parts of the system according to the arguments provided
.type:internal

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Defaulting [is_hashed] to false and [username] to root.
validators.default:x:@.arguments
   is_hashed:bool:false
   username:root

/*
 * Checking if JWT secret has been changed, and if is has, we throw an exception, to prevent the
 * system from being setup again, overriding the default setup configuration.
 */
config.get:"magic:auth:secret"
if
   and
      not-null:x:@config.get
      mte
         strings.length:x:@config.get
         .:int:50
   .lambda

      // System has been setup before
      throw:Your system has already been setup
         status:401
         public:true

// Loading our appsettings.json file now.
config.load
json2lambda:x:@config.load

// Updating auth secret to some relatively CSRNG safe value.
set-value:x:@json2lambda/*/magic/*/auth/*/secret
   crypto.random
      min:100
      max:200

// Saving changed configuration now.
lambda2json:x:@json2lambda/*
config.save:x:-

/*
 * Sleeping for 2 seconds to allow configuration to kick
 * in on thread pools threads.
 * 
 * Notice, even though this is bananas, it is necessary since we're using the appsettings
 * connection string to connect to database further down in this file and the configuration
 * object is stale unless we sleep the thread for a couple of seconds.
 */
sleep:2000

// Ensuring our magic database is correctly created.
io.file.execute:/system/ensure-magic-database.hl

/*
 * We can start the setup process, inserting a root user, etc ...
 * 
 * We only insert a new root user if no root user exists in users table though.
 * If root user already exists, we change its password instead.
 * 
 * This allows users to "reset" their Magic backend by changing the JWT
 * secret to anything less than 50 characters in length, and such re-configure
 * their backend with a new root password.
 */
data.connect:[generic|magic]
   data.read
      table:users
      where
         and
            username.eq:x:@.arguments/*/username

   // Checking if root user already exists.
   if
      exists:x:@data.read/*/*
      .lambda

         // Root user already exists, hence simply changing its password.
         execute:magic.auth.change-password
            password:x:@.arguments/*/password
            is_hashed:x:@.arguments/*/is_hashed
   else

      // Inserting root user.
      execute:magic.auth.create-user
         username:x:@.arguments/*/username
         password:x:@.arguments/*/password
         is_hashed:x:@.arguments/*/is_hashed
         roles
            .:root
         extra
            email:x:@.arguments/*/email
            name:x:@.arguments/*/name

   // Authenticating user and returning new JWT token to client.
   auth.ticket.create
      username:x:@.arguments/*/username
      roles
         .:root
   yield
      ticket:x:@auth.ticket.create
