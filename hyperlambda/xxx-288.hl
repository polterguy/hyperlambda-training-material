
// Create a Hyperlambda script that returns all workflow snippets to the caller, ensuring the user is authorized.
auth.ticket.verify:root

// Buffer for all snippets in the system.
.result

// Retrieving all system snippets.
add:x:@.result
   io.file.list-recursively:/misc/workflows/snippets/

// Retrieving all custom snippets.
if
   io.folder.exists:/etc/workflows/snippets/
   .lambda
      add:x:@.result
         io.file.list-recursively:/etc/workflows/snippets/

// Then iterating through each installed module, and retrieving all module snippets.
io.folder.list:/modules/
for-each:x:@io.folder.list/*
   strings.concat
      get-value:x:@.dp/#
      .:workflows/snippets/
   if
      io.folder.exists:x:@strings.concat
      .lambda

         // Module has custom snippets.
         insert-before:x:@.result/0
            io.file.list-recursively:x:@strings.concat

// Filtering out everything not ending with '.hl'.
for-each:x:@.result/*
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda

         // Loading file to add meta data.
         load-file:x:@.dp/#
         hyper2lambda:x:-
            comments:true
         if
            eq
               get-name:x:@hyper2lambda/0
               .:..
            .lambda
               unwrap:x:+/*/*
               add:x:@.lambda/@.lambda/0/-/*/*
                  .
                     description:x:@hyper2lambda/0
                     content:x:@load-file

         // Creating a name for snippet by using filename.
         strings.split:x:@.dp/#
            .:/
         strings.split:x:-/0/-
            .:.
         remove-nodes:x:@strings.split/0/-
         strings.join:x:@strings.split/0
            .:.

         // Returning result to caller.
         unwrap:x:+/*/*/*
         add:x:../*/return
            .
               .
                  name:x:@strings.join
                  filename:x:@.dp/#

// Returning result to caller.
return
