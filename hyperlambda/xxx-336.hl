
// Write a Hyperlambda script to import a specified page as training data by scraping its content, with options for summarization and content types.
.arguments
   url:string
   type:string
   threshold:int
   summarize:bool
   images:bool
   lists:bool
   code:bool
   feedback-channel:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/threshold
validators.url:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/type
validators.integer:x:@.arguments/*/threshold
   min:25
validators.default:x:@.arguments
   summarize:bool:true
   images:bool:true
   lists:bool:true
   code:bool:true

// Doing some basic logging.
log.info:Crawling page generating OpenAI training snippets
   url:x:@.arguments/*/url
   type:x:@.arguments/*/type
   threshold:x:@.arguments/*/threshold

// Creating a thread and invoking file doing the heavy lifting.
insert-before:x:./*/fork/0
   get-nodes:x:@.arguments
fork

   // Making sure exceptions does not leave thread.
   try

      /*
       * Invoking crawl implementation file, now with explicit list of links,
       * informing invocation that we do NOT want to process links.
       */
      unwrap:x:+/*
      signal:magic.ai.url.scrape
         url:x:@.arguments/*/url
         type:x:@.arguments/*/type
         feedback-channel:x:@.arguments/*/feedback-channel
         threshold:x:@.arguments/*/threshold
         summarize:x:@.arguments/*/summarize
         lists:x:@.arguments/*/lists
         images:x:@.arguments/*/images
         code:x:@.arguments/*/code

      /*
       * Crawling is done.
       * Making sure we notify client that we're done and do some logging.
       */
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Done creating OpenAI training data from page
            type:success
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:Done!
            type:success

      // Basic logging.
      log.info:OpenAI training data successfully created from page
         url:x:@.arguments/*/url
         type:x:@.arguments/*/type
   .catch

      // Oops ...!!
      log.error:x:@.arguments/*/message
         url:x:@.arguments/*/url

// Returning success to caller.
return
   result:success
