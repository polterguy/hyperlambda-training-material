
// Write a Hyperlambda script to return the JavaScript required to embed a ChatGPT-based chatbot on a website, with various customization options.
.arguments
   type:string
   header:string
   button:string
   rtl:bool
   color:string
   start:string
   end:string
   link:string
   theme:string
   references:bool
   file:string
   placeholder:string
   position:string
   clear_button:bool
   copyButton:bool
   follow_up:bool
   new_tab:bool
   code:bool
   animation:string
   popup:string

   // Not used, but allows embedders to do a hard refresh to reload JavaScript.
   v:string
.description:Returns the JavaScript required to embed a ChatGPT based chatbot on some website to caller.

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type

// Applying default values if not specified.
validators.default:x:@.arguments
   rtl:bool:false
   references:bool:false
   file:modern
   position:right
   clear_button:bool:false
   copyButton:bool:false
   follow_up:bool:false
   new_tab:bool:false
   code:bool:false
   animation:
   popup:

// Checking if custom JavaScript file exists.
.filename
strings.concat
   .:/etc/system/openai/
   get-value:x:@.arguments/*/file
   .:.js
if
   io.file.exists:x:@strings.concat
   .lambda

      // We need to load a custom JavaScript file.
      set-value:x:@.filename
         get-value:x:@strings.concat
else

   // We need to load a system JavaScript file.
   strings.concat
      .:/system/openai/front.files/chat/
      get-value:x:@.arguments/*/file
      .:.js

   // System JavaScript file exists, making sure we use it.
   set-value:x:@.filename
      get-value:x:@strings.concat

// Checking if minified file exists.
strings.replace:x:@.filename
   .:.js
   .:.min.js
if
   io.file.exists:x:@strings.replace
   .lambda

      // Minified file exists.
      set-value:x:@.filename
         get-value:x:@strings.replace

// Loading JavaScript file.
.result
set-value:x:@.result
   io.file.load:x:@.filename

// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:http
else
   set-value:x:@.scheme
      .:https
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Retrieving reCAPTCHA key.
.captcha
set-value:x:@.captcha
   config.get:"magic:auth:recaptcha:key"
      .:

// Dynamically exchanging template fields in JavaScript file.
set-value:x:@.result
   strings.replace:x:@.result
      .:[[color]]
      get-value:x:@.arguments/*/color
set-value:x:@.result
   strings.replace:x:@.result
      .:[[start]]
      get-value:x:@.arguments/*/start
set-value:x:@.result
   strings.replace:x:@.result
      .:[[end]]
      get-value:x:@.arguments/*/end
set-value:x:@.result
   strings.replace:x:@.result
      .:[[link]]
      get-value:x:@.arguments/*/link
set-value:x:@.result
   strings.replace:x:@.result
      .:[[url]]
      get-value:x:@.url
set-value:x:@.result
   strings.replace:x:@.result
      .:[[ainiro_watermark]]
      get-first-value
         config.get:"magic:watermark"
         .:"Powered by <a href=\"https://ainiro.io\" target=\"_blank\">AINIRO.IO</a>"
set-value:x:@.result
   strings.replace:x:@.result
      .:[[version]]
      get-first-value
         get-value:x:@.arguments/*/v
         version
set-value:x:@.result
   strings.replace:x:@.result
      .:[[type]]
      get-value:x:@.arguments/*/type
set-value:x:@.result
   strings.replace:x:@.result
      .:[[header]]
      get-first-value
         strings.replace:x:@.arguments/*/header
            .:"\\"
            .:
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[placeholder]]
      get-first-value
         get-value:x:@.arguments/*/placeholder
         .:Ask me anything ...
set-value:x:@.result
   strings.replace:x:@.result
      .:[[position]]
      get-first-value
         get-value:x:@.arguments/*/position
         .:right
set-value:x:@.result
   strings.replace:x:@.result
      .:[[button]]
      get-first-value
         get-value:x:@.arguments/*/button
         .:
if:x:@.arguments/*/rtl
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[rtl]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[rtl]]
         .:false
if:x:@.arguments/*/references
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[references]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[references]]
         .:false
if:x:@.arguments/*/clear_button
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[clear_button]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[clear_button]]
         .:false
if:x:@.arguments/*/copyButton
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[copy_button]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[copy_button]]
         .:false
if:x:@.arguments/*/follow_up
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[follow_up]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[follow_up]]
         .:false
if:x:@.arguments/*/new_tab
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[new_tab]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[new_tab]]
         .:false
if:x:@.arguments/*/code
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[code]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[code]]
         .:false
set-value:x:@.result
   strings.replace:x:@.result
      .:[[theme]]
      get-first-value
         get-value:x:@.arguments/*/theme
         .:modern
set-value:x:@.result
   strings.replace:x:@.result
      .:[[animation]]
      get-value:x:@.arguments/*/animation
set-value:x:@.result
   strings.replace:x:@.result
      .:[[popup]]
      get-value:x:@.arguments/*/popup

// Fetching greeting for model.
data.connect:[generic|magic]
   data.read
      table:ml_types
      columns
         greeting
         recaptcha
      where
         and
            type.eq:x:@.arguments/*/type
   .greeting
   set-value:x:@.greeting
      get-first-value
         get-value:x:@data.read/*/*/greeting
         .:Hello there! How may I help you today?
   set-value:x:@.greeting
      strings.replace:x:@.greeting
         .:`
         .:"${\"`\"}"
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[greeting]]
         strings.replace:x:@.greeting
            .:"\\"
            .:
   if
      or
         null:x:@data.read/*/*/recaptcha
         eq:x:@data.read/*/*/recaptcha
            .:
         eq
            convert:x:@data.read/*/*/recaptcha
               type:decimal
            .:decimal:0
      .lambda
         set-value:x:@.captcha
            .:
   else-if
      lt
         convert:x:@data.read/*/*/recaptcha
            type:decimal
         .:decimal:0
      .lambda
         set-value:x:@.captcha
            .:-1
set-value:x:@.result
   strings.replace:x:@.result
      .:[[recaptcha]]
      get-value:x:@.captcha

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:application/javascript; charset=utf-8

// Returning result to caller.
return:x:@.result
