
// Search for patents using SERP API's patent API. Allows users to search for patents with various parameters.
.arguments

   // Page number to return, 1 equals the first page of result, 2 the second, etc.
   page:long

   // Optional parameter for how to sort results. Legal values are 'new' and 'old'.
   sort:string

   // Optional parameter being the maximum date of the result. The format of the field must be YYYYMMDD if specified.
   before:string

   // Optional parameter being the minimum date of the result. The format of the field must be YYYYMMDD if specified.
   after:string

   // Optional query to search for.
   query:string

   // Optional parameter being the inventor of the patent. Split multiple inventors with a "," comma.
   inventor:string

   // Optional parameter filtering patents by country. If specified must be a two letter country code such as US or NO.
   country:string
.type:public

// Retrieving SERP API's API key and making sure we've got one.
.api-key
set-value:x:@.api-key
   config.get:"magic:serp-api:api_key"
if
   or
      null:x:@.api-key
      eq:x:@.api-key
         .:
   .lambda

      // Oops ...!!
      throw:Could not find a SERP API key to use for fetching patents.

// Creating our URL.
.url
set-value:x:@.url
   strings.concat
      .:"https://serpapi.com/search.json?engine=google_patents&num=10&api_key="
      get-value:x:@.api-key

// Checking if we've got a query argument.
if
   and
      exists:x:@.arguments/*/query
      not-null:x:@.arguments/*/query
      neq:x:@.arguments/*/query
         .:
   .lambda

      // Concatenating query to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&q=
            strings.url-encode:x:@.arguments/*/query

// Checking if we've got a page argument.
if
   and
      exists:x:@.arguments/*/page
      not-null:x:@.arguments/*/page
      neq:x:@.arguments/*/page
         .:
   .lambda

      // Concatenating page to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&page=
            get-value:x:@.arguments/*/page

// Checking if we've got a sort argument.
if
   and
      exists:x:@.arguments/*/sort
      not-null:x:@.arguments/*/sort
      neq:x:@.arguments/*/sort
         .:
   .lambda

      // Concatenating sort to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&sort=
            get-value:x:@.arguments/*/sort

// Checking if we've got a before argument.
if
   and
      exists:x:@.arguments/*/before
      not-null:x:@.arguments/*/before
      neq:x:@.arguments/*/before
         .:
   .lambda

      // Concatenating before to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&before=
            get-value:x:@.arguments/*/before

// Checking if we've got an after argument.
if
   and
      exists:x:@.arguments/*/after
      not-null:x:@.arguments/*/after
      neq:x:@.arguments/*/after
         .:
   .lambda

      // Concatenating after to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&after=
            get-value:x:@.arguments/*/after

// Checking if we've got an inventor argument.
if
   and
      exists:x:@.arguments/*/inventor
      not-null:x:@.arguments/*/inventor
      neq:x:@.arguments/*/inventor
         .:
   .lambda

      // Concatenating after to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&inventor=
            strings.url-encode:x:@.arguments/*/inventor

// Checking if we've got an country argument.
if
   and
      exists:x:@.arguments/*/country
      not-null:x:@.arguments/*/country
      neq:x:@.arguments/*/country
         .:
   .lambda

      // Concatenating country to URL.
      set-value:x:@.url
         strings.concat
            get-value:x:@.url
            .:&country=
            strings.url-encode:x:@.arguments/*/country

// Retrieving result.
http.get:x:@.url
   convert:true

// Sanity checking result of above invocation.
if
   not
      and
         mte:x:@http.get
            .:int:200
         lt:x:@http.get
            .:int:300
   .lambda
      lambda2hyper:x:../*
      log.info:x:-
      throw:Something went wrong while invoking SERP API

// Iterating through result, making sure we return the result to caller.
for-each:x:@http.get/*/content/*/organic_results/*
   unwrap:x:+/*/*/*
   add:x:../*/return-nodes/*/patents
      .
         .
            url:x:@.dp/#/*/serpapi_link
            title:x:@.dp/#/*/title
            description:x:@.dp/#/*/snippet
            publication_number:x:@.dp/#/*/publication_number
            patent_id:x:@.dp/#/*/patent_id
            inventor:x:@.dp/#/*/inventor
            pdf:x:@.dp/#/*/pdf
            priority_date:x:@.dp/#/*/priority_date
            filing_date:x:@.dp/#/*/filing_date
            grant_date:x:@.dp/#/*/grant_date
            publication_date:x:@.dp/#/*/publication_date

   // Adding figures.
   .figures
   for-each:x:@.dp/#/*/figures/*/[0,2]
      if
         and
            exists:x:@.dp/#/*/full
            not-null:x:@.dp/#/*/full
            neq:x:@.dp/#/*/full
               .:
         .lambda
            unwrap:x:+/*/*
            add:x:@.figures
               .
                  .:x:@.dp/#/*/full
   if
      exists:x:@.figures/*
      .lambda
         add:x:+/*/*
            get-nodes:x:@.figures/*
         add:x:../*/return-nodes/*/patents/0/-
            .
               figures

// Returning result to caller.
unwrap:x:+/*
return-nodes
   patents
   count:x:@http.get/*/content/*/search_information/*/total_results
