
// Count unique and distinct items from your Customer table in your chinook database.
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.

   // Offset into the dataset of where to start retrieving records

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   Customer.CustomerId.eq:long
   Customer.FirstName.like:string
   Customer.FirstName.eq:string
   Customer.LastName.like:string
   Customer.LastName.eq:string
   Customer.Company.like:string
   Customer.Company.eq:string
   Customer.Address.like:string
   Customer.Address.eq:string
   Customer.City.like:string
   Customer.City.eq:string
   Customer.State.like:string
   Customer.State.eq:string
   Customer.Country.like:string
   Customer.Country.eq:string
   Customer.PostalCode.like:string
   Customer.PostalCode.eq:string
   Customer.Phone.like:string
   Customer.Phone.eq:string
   Customer.Fax.like:string
   Customer.Fax.eq:string
   Customer.Email.like:string
   Customer.Email.eq:string
   Customer.SupportRepId.eq:long
   SupportRepId.LastName.eq:string
   SupportRepId.LastName.like:string

// Type of endpoint
.type:crud-count-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Customer.CustomerId
   .:Customer.FirstName
   .:Customer.LastName
   .:Customer.Company
   .:Customer.Address
   .:Customer.City
   .:Customer.State
   .:Customer.Country
   .:Customer.PostalCode
   .:Customer.Phone
   .:Customer.Fax
   .:Customer.Email
   .:Customer.SupportRepId
   .:SupportRepId.LastName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=500

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customer
         join:Employee
            as:SupportRepId
            type:left
            on
               and
                  Customer.SupportRepId:SupportRepId.EmployeeId
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
