
// Read or list records from your Customer table in your chinook database.
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.

   // Offset into the dataset of where to start retrieving records

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   Customer.CustomerId.eq:long
   Customer.FirstName.like:string
   Customer.FirstName.eq:string
   Customer.LastName.like:string
   Customer.LastName.eq:string
   Customer.Company.like:string
   Customer.Company.eq:string
   Customer.Address.like:string
   Customer.Address.eq:string
   Customer.City.like:string
   Customer.City.eq:string
   Customer.State.like:string
   Customer.State.eq:string
   Customer.Country.like:string
   Customer.Country.eq:string
   Customer.PostalCode.like:string
   Customer.PostalCode.eq:string
   Customer.Phone.like:string
   Customer.Phone.eq:string
   Customer.Fax.like:string
   Customer.Fax.eq:string
   Customer.Email.like:string
   Customer.Email.eq:string
   Customer.SupportRepId.eq:long
   SupportRepId.LastName.eq:string
   SupportRepId.LastName.like:string

// Meta data description for endpoint
.description:Read or list records from your Customer table in your chinook database

// Type of endpoint
.type:crud-read

// Columns with custom handling as frontend is generated.
.handling
   Customer.Phone:phone
   Customer.Email:email

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=500

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customer
         join:Employee
            as:SupportRepId
            type:left
            on
               and
                  Customer.SupportRepId:SupportRepId.EmployeeId
      columns
         Customer.CustomerId
         Customer.FirstName
         Customer.LastName
         Customer.Company
         Customer.Address
         Customer.City
         Customer.State
         Customer.Country
         Customer.PostalCode
         Customer.Phone
         Customer.Fax
         Customer.Email
         Customer.SupportRepId
         SupportRepId.LastName
            as:SupportRepId.LastName
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
