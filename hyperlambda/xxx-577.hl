
// Count unique and distinct items from your Employee table in your chinook database.
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.

   // Offset into the dataset of where to start retrieving records
   Employee.EmployeeId.eq:long
   Employee.LastName.like:string
   Employee.LastName.eq:string
   Employee.FirstName.like:string
   Employee.FirstName.eq:string
   Employee.Title.like:string
   Employee.Title.eq:string
   Employee.ReportsTo.eq:long
   Employee.BirthDate.eq:date
   Employee.HireDate.eq:date
   Employee.Address.like:string
   Employee.Address.eq:string
   Employee.City.like:string
   Employee.City.eq:string
   Employee.State.like:string
   Employee.State.eq:string
   Employee.Country.like:string
   Employee.Country.eq:string
   Employee.PostalCode.like:string
   Employee.PostalCode.eq:string
   Employee.Phone.like:string
   Employee.Phone.eq:string
   Employee.Fax.like:string
   Employee.Fax.eq:string
   Employee.Email.like:string
   Employee.Email.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Employee.EmployeeId
   .:Employee.LastName
   .:Employee.FirstName
   .:Employee.Title
   .:Employee.ReportsTo
   .:Employee.BirthDate
   .:Employee.HireDate
   .:Employee.Address
   .:Employee.City
   .:Employee.State
   .:Employee.Country
   .:Employee.PostalCode
   .:Employee.Phone
   .:Employee.Fax
   .:Employee.Email

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,basic

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Employee
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
