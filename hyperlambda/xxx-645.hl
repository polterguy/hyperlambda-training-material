
// Counts items from your Track table in your chinook database
.arguments

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Track.TrackId.mt:long
   Track.TrackId.lt:long
   Track.TrackId.mteq:long
   Track.TrackId.lteq:long
   Track.TrackId.neq:long
   Track.TrackId.eq:long
   Track.Name.like:string
   Track.Name.mt:string
   Track.Name.lt:string
   Track.Name.mteq:string
   Track.Name.lteq:string
   Track.Name.neq:string
   Track.Name.eq:string
   Track.AlbumId.mt:long
   Track.AlbumId.lt:long
   Track.AlbumId.mteq:long
   Track.AlbumId.lteq:long
   Track.AlbumId.neq:long
   Track.AlbumId.eq:long
   Track.MediaTypeId.mt:long
   Track.MediaTypeId.lt:long
   Track.MediaTypeId.mteq:long
   Track.MediaTypeId.lteq:long
   Track.MediaTypeId.neq:long
   Track.MediaTypeId.eq:long
   Track.GenreId.mt:long
   Track.GenreId.lt:long
   Track.GenreId.mteq:long
   Track.GenreId.lteq:long
   Track.GenreId.neq:long
   Track.GenreId.eq:long
   Track.Composer.like:string
   Track.Composer.mt:string
   Track.Composer.lt:string
   Track.Composer.mteq:string
   Track.Composer.lteq:string
   Track.Composer.neq:string
   Track.Composer.eq:string
   Track.Milliseconds.mt:long
   Track.Milliseconds.lt:long
   Track.Milliseconds.mteq:long
   Track.Milliseconds.lteq:long
   Track.Milliseconds.neq:long
   Track.Milliseconds.eq:long
   Track.Bytes.mt:long
   Track.Bytes.lt:long
   Track.Bytes.mteq:long
   Track.Bytes.lteq:long
   Track.Bytes.neq:long
   Track.Bytes.eq:long
   Track.UnitPrice.mt:decimal
   Track.UnitPrice.lt:decimal
   Track.UnitPrice.mteq:decimal
   Track.UnitPrice.lteq:decimal
   Track.UnitPrice.neq:decimal
   Track.UnitPrice.eq:decimal
   AlbumId.Title.eq:string
   AlbumId.Title.like:string
   MediaTypeId.Name.eq:string
   MediaTypeId.Name.like:string
   GenreId.Name.eq:string
   GenreId.Name.like:string

// Meta data description for endpoint
.description:Counts items from your Track table in your chinook database

// Type of endpoint
.type:crud-count

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Track
         join:Album
            as:AlbumId
            type:left
            on
               and
                  Track.AlbumId:AlbumId.AlbumId
         join:MediaType
            as:MediaTypeId
            type:left
            on
               and
                  Track.MediaTypeId:MediaTypeId.MediaTypeId
         join:Genre
            as:GenreId
            type:left
            on
               and
                  Track.GenreId:GenreId.GenreId
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
