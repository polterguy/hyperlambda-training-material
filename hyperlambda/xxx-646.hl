
// Returns unique and distinct values from your Track table in your chinook database
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Track.TrackId.mt:long
   Track.TrackId.lt:long
   Track.TrackId.mteq:long
   Track.TrackId.lteq:long
   Track.TrackId.neq:long
   Track.TrackId.eq:long
   Track.Name.like:string
   Track.Name.mt:string
   Track.Name.lt:string
   Track.Name.mteq:string
   Track.Name.lteq:string
   Track.Name.neq:string
   Track.Name.eq:string
   Track.AlbumId.mt:long
   Track.AlbumId.lt:long
   Track.AlbumId.mteq:long
   Track.AlbumId.lteq:long
   Track.AlbumId.neq:long
   Track.AlbumId.eq:long
   Track.MediaTypeId.mt:long
   Track.MediaTypeId.lt:long
   Track.MediaTypeId.mteq:long
   Track.MediaTypeId.lteq:long
   Track.MediaTypeId.neq:long
   Track.MediaTypeId.eq:long
   Track.GenreId.mt:long
   Track.GenreId.lt:long
   Track.GenreId.mteq:long
   Track.GenreId.lteq:long
   Track.GenreId.neq:long
   Track.GenreId.eq:long
   Track.Composer.like:string
   Track.Composer.mt:string
   Track.Composer.lt:string
   Track.Composer.mteq:string
   Track.Composer.lteq:string
   Track.Composer.neq:string
   Track.Composer.eq:string
   Track.Milliseconds.mt:long
   Track.Milliseconds.lt:long
   Track.Milliseconds.mteq:long
   Track.Milliseconds.lteq:long
   Track.Milliseconds.neq:long
   Track.Milliseconds.eq:long
   Track.Bytes.mt:long
   Track.Bytes.lt:long
   Track.Bytes.mteq:long
   Track.Bytes.lteq:long
   Track.Bytes.neq:long
   Track.Bytes.eq:long
   Track.UnitPrice.mt:decimal
   Track.UnitPrice.lt:decimal
   Track.UnitPrice.mteq:decimal
   Track.UnitPrice.lteq:decimal
   Track.UnitPrice.neq:decimal
   Track.UnitPrice.eq:decimal
   AlbumId.Title.eq:string
   AlbumId.Title.like:string
   MediaTypeId.Name.eq:string
   MediaTypeId.Name.like:string
   GenreId.Name.eq:string
   GenreId.Name.like:string

// Meta data description for endpoint
.description:Returns unique and distinct values from your Track table in your chinook database

// Type of endpoint
.type:crud-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Track.TrackId
   .:Track.Name
   .:Track.AlbumId
   .:Track.MediaTypeId
   .:Track.GenreId
   .:Track.Composer
   .:Track.Milliseconds
   .:Track.Bytes
   .:Track.UnitPrice
   .:AlbumId.Title
   .:MediaTypeId.Name
   .:GenreId.Name

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Track
         join:Album
            as:AlbumId
            type:left
            on
               and
                  Track.AlbumId:AlbumId.AlbumId
         join:MediaType
            as:MediaTypeId
            type:left
            on
               and
                  Track.MediaTypeId:MediaTypeId.MediaTypeId
         join:Genre
            as:GenreId
            type:left
            on
               and
                  Track.GenreId:GenreId.GenreId
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
