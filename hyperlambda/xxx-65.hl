
// Create a Hyperlambda script to find and delete all images not referenced in any HTML, JS, CSS, or Markdown file.
.not-used
.html
.images
io.file.list-recursively:/etc/www/
for-each:x:-/*
   strings.split:x:@.dp/#
      .:.
   switch:x:-/0/-
      case:html
      case:md
         .html
         set-value:x:@.html
            io.file.load:x:@.dp/#
         if
            eq
               get-value:x:@strings.split/0/-
               .:md
            .lambda
               markdown2html:x:@.html
               set-value:x:@.html
                  get-value:x:@markdown2html
               if
                  exists:x:@markdown2html/*/image
                  .lambda
                     strings.concat
                        .:/etc/www
                        get-value:x:@markdown2html/*/image
                     unwrap:x:+/*/*
                     add:x:@.html/@.html
                        .
                           .:x:@strings.concat
         html2lambda:x:@.html
         for-each:x:"@html2lambda/**/img/*/\\@src"
            if
               strings.starts-with:x:@.dp/#
                  .:/assets/
               .lambda
                  strings.concat
                     .:/etc/www
                     get-value:x:@.dp/#
                  unwrap:x:+/*/*
                  add:x:@.html/@.html
                     .
                        .:x:@strings.concat
add:x:@.images
   io.file.list-recursively:/etc/www/assets/images/
for-each:x:@.images/*
   if
      not
         exists:x:"@.html/*/\"={@.dp/#}\""
      .lambda
         unwrap:x:+/*/*
         add:x:@.not-used
            .
               .:x:@.dp/#
for-each:x:@.not-used/*
   io.file.delete:x:@.dp/#
