
// Read or list records from your activities table
.arguments

   // Number of records to return
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, implying TABLE_NAME.COLUMN_NAME.
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // activities table activity_id column equality exact match filtering
   activities.activity_id.eq:long

   // activities table type column equality exact match filtering
   activities.type.eq:string

   // activities table contact_id column equality exact match filtering
   activities.contact_id.eq:long

   // activities table description column wildcard filtering with SQL like '%' comparison
   activities.description.like:string

   // activities table description column equality exact match filtering
   activities.description.eq:string

   // contacts table name column equality exact match filtering
   contact_id.name.eq:string

   // contacts table name column wildcard filtering with SQL like '%' comparison
   contact_id.name.like:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|robo-crm]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:activities
         join:contacts
            as:contact_id
            type:left
            on
               and
                  activities.contact_id:contact_id.contact_id
      columns
         activities.activity_id
         activities.type
         activities.contact_id
         activities.created
         activities.description
         contact_id.name
            as:contact_id.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
