
// Read or list records from your Customer table in your saas database
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Customer.CustomerId.mt:long
   Customer.CustomerId.lt:long
   Customer.CustomerId.mteq:long
   Customer.CustomerId.lteq:long
   Customer.CustomerId.neq:long
   Customer.CustomerId.eq:long
   Customer.CompanyName.like:string
   Customer.CompanyName.mt:string
   Customer.CompanyName.lt:string
   Customer.CompanyName.mteq:string
   Customer.CompanyName.lteq:string
   Customer.CompanyName.neq:string
   Customer.CompanyName.eq:string
   Customer.ContactName.like:string
   Customer.ContactName.mt:string
   Customer.ContactName.lt:string
   Customer.ContactName.mteq:string
   Customer.ContactName.lteq:string
   Customer.ContactName.neq:string
   Customer.ContactName.eq:string
   Customer.Email.like:string
   Customer.Email.mt:string
   Customer.Email.lt:string
   Customer.Email.mteq:string
   Customer.Email.lteq:string
   Customer.Email.neq:string
   Customer.Email.eq:string
   Customer.Phone.like:string
   Customer.Phone.mt:string
   Customer.Phone.lt:string
   Customer.Phone.mteq:string
   Customer.Phone.lteq:string
   Customer.Phone.neq:string
   Customer.Phone.eq:string
   Customer.Address.like:string
   Customer.Address.mt:string
   Customer.Address.lt:string
   Customer.Address.mteq:string
   Customer.Address.lteq:string
   Customer.Address.neq:string
   Customer.Address.eq:string
   Customer.City.like:string
   Customer.City.mt:string
   Customer.City.lt:string
   Customer.City.mteq:string
   Customer.City.lteq:string
   Customer.City.neq:string
   Customer.City.eq:string
   Customer.State.like:string
   Customer.State.mt:string
   Customer.State.lt:string
   Customer.State.mteq:string
   Customer.State.lteq:string
   Customer.State.neq:string
   Customer.State.eq:string
   Customer.Country.like:string
   Customer.Country.mt:string
   Customer.Country.lt:string
   Customer.Country.mteq:string
   Customer.Country.lteq:string
   Customer.Country.neq:string
   Customer.Country.eq:string
   Customer.CreatedAt.mt:date
   Customer.CreatedAt.lt:date
   Customer.CreatedAt.mteq:date
   Customer.CreatedAt.lteq:date
   Customer.CreatedAt.neq:date
   Customer.CreatedAt.eq:date

// Columns with custom handling as frontend is generated.
.handling
   Customer.Email:email
   Customer.Phone:phone

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=50

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|saas]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customer
      columns
         Customer.CustomerId
         Customer.CompanyName
         Customer.ContactName
         Customer.Email
         Customer.Phone
         Customer.Address
         Customer.City
         Customer.State
         Customer.Country
         Customer.CreatedAt
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
