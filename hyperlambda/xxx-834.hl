
// Create a function that updates one record in the Payment table in the saas database with specified new column values.
.arguments

   // PaymentId column value being primary key of record to update, mandatory argument
   PaymentId:long

   // CustomerId column's new value
   CustomerId:long

   // StripeSubscriptionId column's new value
   StripeSubscriptionId:string

   // Amount column's new value
   Amount:decimal

   // PaymentMethod column's new value
   PaymentMethod:string

// Meta data description for endpoint
.description:Update one record in your Payment table in your saas database

// Type of endpoint
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/PaymentId

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin
.foreign-keys
   .
      column:CustomerId
      table:Customer
      foreign_column:CustomerId
      foreign_name:CompanyName
      long:bool:true

// Opening up our database connection.
data.connect:[generic|saas]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Payment
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:saas.Payment.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
