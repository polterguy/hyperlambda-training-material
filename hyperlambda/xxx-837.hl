
// Create a function that counts items from the SubscriptionPlan table in the saas database based on specified conditions.
.arguments

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   SubscriptionPlan.PlanId.mt:long
   SubscriptionPlan.PlanId.lt:long
   SubscriptionPlan.PlanId.mteq:long
   SubscriptionPlan.PlanId.lteq:long
   SubscriptionPlan.PlanId.neq:long
   SubscriptionPlan.PlanId.eq:long
   SubscriptionPlan.PlanName.like:string
   SubscriptionPlan.PlanName.mt:string
   SubscriptionPlan.PlanName.lt:string
   SubscriptionPlan.PlanName.mteq:string
   SubscriptionPlan.PlanName.lteq:string
   SubscriptionPlan.PlanName.neq:string
   SubscriptionPlan.PlanName.eq:string
   SubscriptionPlan.MonthlyPrice.mt:decimal
   SubscriptionPlan.MonthlyPrice.lt:decimal
   SubscriptionPlan.MonthlyPrice.mteq:decimal
   SubscriptionPlan.MonthlyPrice.lteq:decimal
   SubscriptionPlan.MonthlyPrice.neq:decimal
   SubscriptionPlan.MonthlyPrice.eq:decimal
   SubscriptionPlan.MonthlyQuota.mt:long
   SubscriptionPlan.MonthlyQuota.lt:long
   SubscriptionPlan.MonthlyQuota.mteq:long
   SubscriptionPlan.MonthlyQuota.lteq:long
   SubscriptionPlan.MonthlyQuota.neq:long
   SubscriptionPlan.MonthlyQuota.eq:long
   SubscriptionPlan.Features.like:string
   SubscriptionPlan.Features.mt:string
   SubscriptionPlan.Features.lt:string
   SubscriptionPlan.Features.mteq:string
   SubscriptionPlan.Features.lteq:string
   SubscriptionPlan.Features.neq:string
   SubscriptionPlan.Features.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=50

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|saas]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:SubscriptionPlan
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
