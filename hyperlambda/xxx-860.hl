
// Deletes a specified cloudlet and its associated subscription.
.arguments
   id:long
.description:Deletes a specified cloudlet and its associated subscription
.type:crud-delete

// Ensuring user is authorised to invoke endpoint.
auth.ticket.verify:root, admin, account_manager

// Sanity checking invocation
validators.mandatory:x:@.arguments/*/id

// Retrieving name of cloudlet.
.name
.username
.cluster
data.connect:[generic|hub]
   data.read
      table:cloudlets
      columns
         name
         user
         cluster
      where
         and
            id.eq:x:@.arguments/*/id

   // Making sure cloudlet exists
   if
      not-exists:x:@data.read/*
      .lambda
         throw:Cloudlet does not exist
            public:true
            status:404

   // Setting temporary values.
   set-value:x:@.name
      get-value:x:@data.read/*/*/name
   set-value:x:@.username
      get-value:x:@data.read/*/*/user
   set-value:x:@.cluster
      get-value:x:@data.read/*/*/cluster

/*
 * Checking if there exists a subscription for cloudlet,
 * at which point we forward deletion to stripe module since the Stripe
 * module will delete the cloudlet automatically through its callback sinks.
 */
data.connect:[generic|stripe]

   // Checking if we can find subscription for cloudlet.
   data.read
      table:subscriptions
      values
         subscription
      where
         and
            username.eq:x:@.username
            meta.eq:x:@.name

   // Checking if subscription exists for cloudlet.
   if
      exists:x:@data.read/*/*
      .lambda

         /*
          * Deleting subscription information associated with cloudlet.
          * Due to the way the Stripe module and HUB is connected, this will invoke
          * Stripe callback sink, deleting the cloudlet after the subscription is deleted.
          */
         unwrap:x:+/*
         io.file.execute:/modules/stripe/admin/subscriptions.delete.hl
            subscription:x:@data.read/*/*/subscription
            username:x:../*/.username

         // Returning success to caller
         return
            affected:int:1
            subscriptions_deleted:int:1
   else

      // No Stripe subscription associated with cloudlet, hence manually deleting it.
      .name
      set-value:x:@.name
         strings.concat
            get-value:x:../*/.name
            .:-
            get-value:x:@.username
      unwrap:x:+/*
      signal:hub.cloudlets.hard-delete
         cluster:x:@.cluster
         name:x:@.name

      /*
       * Checking if there exists scheduled tasks associated with the cloudlet,
       * and if so deleting all tasks associated with cloudlet.
       */
      strings.concat
         .:cloudlet-
         get-value:x:@.name
         .:-%
      tasks.list:x:@strings.concat
         limit:1000
      for-each:x:@tasks.list/*
         tasks.delete:x:@.dp/#/*/id

      // Doing some basic logging.
      get-count:x:@tasks.list/*
      log.debug:Tasks associated with cloudlet has been deleted
         name:x:@.name
         user:x:@.username
         no_tasks:x:@get-count

      // Deleting item from database.
      data.connect:[generic|hub]
         data.delete
            table:cloudlets
            where
               and
                  name.eq:x:../*/.name
                  user.eq:x:@.username

         // Doing some basic logging
         log.info:Cloudlet successfully destroyed
            name:x:../*/.name
            user:x:@.username

         // Returning result of above invocation to caller.
         unwrap:x:+/*
         return
            affected:x:@data.delete
