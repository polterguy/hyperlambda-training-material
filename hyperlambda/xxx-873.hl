
// Upgrades existing cloudlet to a professional plan without associating a subscription with it.
.arguments
   id:long
   plan:string
.description:Upgrades existing cloudlet to a professional plan without associating a subscription with it

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root, admin, account_manager

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/id
validators.mandatory:x:@.arguments/*/plan

// Opening up our database connection.
data.connect:[generic|hub]

   // Getting cloudlet information from database
   data.read
      table:cloudlets
      columns
         name
         user
      where
         and
            id.eq:x:@.arguments/*/id

   // Updating database record.
   data.update
      table:cloudlets
      values
         plan:x:@.arguments/*/plan
      where
         and
            id.eq:x:@.arguments/*/id

   /*
    * Removing scheduled tasks that soft deletes cloudlet once trial period
    * is over if existing.
    */
   strings.concat
      .:cloudlet-
      get-value:x:@data.read/*/*/name
      .:-
      get-value:x:@data.read/*/*/user
      .:-delete
   tasks.list:x:-
   if
      exists:x:@tasks.list/0/*/id
      .lambda
         tasks.delete:x:@tasks.list/0/*/id
         log.info:Task to automatically soft delete cloudlet was deleted
            task-name:x:@strings.concat
            cloudlet:x:@.cloudlet
            username:x:@.arguments/*/username
            cluster:x:@.cluster
   else
      log.error:Could not find task to delete
         task-name:x:@strings.concat
   strings.concat
      .:cloudlet-
      get-value:x:@data.read/*/*/name
      .:-
      get-value:x:@data.read/*/*/user
      .:-hard-delete
   tasks.list:x:-
   if
      exists:x:@tasks.list/0/*/id
      .lambda
         tasks.delete:x:@tasks.list/0/*/id
         log.info:Task to automatically hard delete cloudlet was deleted
            task-name:x:@strings.concat
            cloudlet:x:@.cloudlet
            username:x:@.arguments/*/username
            cluster:x:@.cluster
   else
      log.error:Could not find task to delete
         task-name:x:@strings.concat
   strings.concat
      .:cloudlet-
      get-value:x:@data.read/*/*/name
      .:-
      get-value:x:@data.read/*/*/user
      .:-warn-about-destruction
   tasks.list:x:-
   if
      exists:x:@tasks.list/0/*/id
      .lambda
         tasks.delete:x:@tasks.list/0/*/id
         log.info:Task to automatically warn user was deleted
            task-name:x:@strings.concat
            cloudlet:x:@.cloudlet
            username:x:@.arguments/*/username
            cluster:x:@.cluster
   else
      log.error:Could not find task to delete
         task-name:x:@strings.concat

   // Returning success to caller.
   response.status.set:202
   return
      result:success
