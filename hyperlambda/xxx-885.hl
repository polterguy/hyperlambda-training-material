
// Enables a cloudlet when a subscription payment has gone through.
slots.create:payments.subscriptions.unsubscribed.cloudlets.destroy

   // Checking if invocation is for us.
   if
      neq:x:@.arguments/*/type
         .:subscription
      .lambda

         // Not our guy.
         return:bool:false

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/meta
   validators.mandatory:x:@.arguments/*/username

   // Invoking slot responsible for deleting cloudlet.
   .name
   set-value:x:@.name
      strings.concat
         get-value:x:@.arguments/*/meta
         .:-
         get-value:x:@.arguments/*/username

   // Finding cluster for cloudlet.
   .cluster
   data.connect:[generic|hub]
      data.read
         table:cloudlets
         values
            cluster
         where
            and
               user.eq:x:@.arguments/*/username
               name.eq:x:@.arguments/*/meta
      set-value:x:@.cluster
         get-value:x:@data.read/*/*/cluster
   unwrap:x:+/*
   signal:hub.cloudlets.hard-delete
      cluster:x:@.cluster
      name:x:@.name

   // Deleting cloudlet from database.
   data.connect:[generic|hub]
      data.delete
         table:cloudlets
         where
            and
               name.eq:x:@.arguments/*/meta
               user.eq:x:@.arguments/*/username

   // Returning true to indicate we handled the callback.
   return:bool:true
