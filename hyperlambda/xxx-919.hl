
// Counts items from your Customers table in your logistics database.
.arguments

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Customers.CustomerID.mt:long
   Customers.CustomerID.lt:long
   Customers.CustomerID.mteq:long
   Customers.CustomerID.lteq:long
   Customers.CustomerID.neq:long
   Customers.CustomerID.eq:long
   Customers.Name.like:string
   Customers.Name.mt:string
   Customers.Name.lt:string
   Customers.Name.mteq:string
   Customers.Name.lteq:string
   Customers.Name.neq:string
   Customers.Name.eq:string
   Customers.Address.like:string
   Customers.Address.mt:string
   Customers.Address.lt:string
   Customers.Address.mteq:string
   Customers.Address.lteq:string
   Customers.Address.neq:string
   Customers.Address.eq:string
   Customers.Phone.like:string
   Customers.Phone.mt:string
   Customers.Phone.lt:string
   Customers.Phone.mteq:string
   Customers.Phone.lteq:string
   Customers.Phone.neq:string
   Customers.Phone.eq:string
   Customers.Email.like:string
   Customers.Email.mt:string
   Customers.Email.lt:string
   Customers.Email.mteq:string
   Customers.Email.lteq:string
   Customers.Email.neq:string
   Customers.Email.eq:string

// Meta data description for endpoint
.description:Counts items from your Customers table in your logistics database

// Type of endpoint
.type:crud-count

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=50

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|logistics]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
