
// Returns unique and distinct values from your Drivers table in your logistics database.
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string
   Drivers.DriverID.mt:long
   Drivers.DriverID.lt:long
   Drivers.DriverID.mteq:long
   Drivers.DriverID.lteq:long
   Drivers.DriverID.neq:long
   Drivers.DriverID.eq:long
   Drivers.CarrierID.mt:long
   Drivers.CarrierID.lt:long
   Drivers.CarrierID.mteq:long
   Drivers.CarrierID.lteq:long
   Drivers.CarrierID.neq:long
   Drivers.CarrierID.eq:long
   Drivers.Name.like:string
   Drivers.Name.mt:string
   Drivers.Name.lt:string
   Drivers.Name.mteq:string
   Drivers.Name.lteq:string
   Drivers.Name.neq:string
   Drivers.Name.eq:string
   Drivers.LicenseNumber.like:string
   Drivers.LicenseNumber.mt:string
   Drivers.LicenseNumber.lt:string
   Drivers.LicenseNumber.mteq:string
   Drivers.LicenseNumber.lteq:string
   Drivers.LicenseNumber.neq:string
   Drivers.LicenseNumber.eq:string
   Drivers.Phone.like:string
   Drivers.Phone.mt:string
   Drivers.Phone.lt:string
   Drivers.Phone.mteq:string
   Drivers.Phone.lteq:string
   Drivers.Phone.neq:string
   Drivers.Phone.eq:string
   CarrierID.Name.eq:string
   CarrierID.Name.like:string

// Meta data description for endpoint
.description:Returns unique and distinct values from your Drivers table in your logistics database

// Type of endpoint
.type:crud-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Drivers.DriverID
   .:Drivers.CarrierID
   .:Drivers.Name
   .:Drivers.LicenseNumber
   .:Drivers.Phone
   .:CarrierID.Name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=50

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|logistics]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Drivers
         join:Carriers
            as:CarrierID
            type:left
            on
               and
                  Drivers.CarrierID:CarrierID.CarrierID
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
