
// Create endpoint inserting one record into your products table in your shopping-cart-demo database. - With Python equivalent
.arguments

   // name column value
   name:string

   // description column value
   description:string

   // sku column value
   sku:string

   // price column value
   price:decimal

   // image_url column value
   image_url:string

// Meta data description for endpoint

// Type of endpoint
.type:crud-create

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up database connection.
data.connect:[generic|shopping-cart-demo]
   database-type:sqlite

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      database-type:sqlite
      table:products
      return-id:bool:true
      values

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      id:x:@data.create


/*

# Python equivalent
import sqlite3

def create_product(name, description, sku, price, image_url):
    """
    This function inserts one record into the products table in the shopping-cart-demo database.
    
    :param name: The name of the product
    :param description: The description of the product
    :param sku: The SKU of the product
    :param price: The price of the product
    :param image_url: The image URL of the product
    :return: The ID of the created record
    :raises ValueError: If any of the arguments are not provided
    """
    # Verify authentication
    verify_authentication(["root", "admin"])
    
    # Validate mandatory fields
    if not all([name, description, sku, price, image_url]):
        raise ValueError("All product fields are mandatory")
    
    # Connect to the SQLite database
    conn = sqlite3.connect('shopping-cart-demo.db')
    cursor = conn.cursor()
    
    # Insert the record
    cursor.execute("INSERT INTO products (name, description, sku, price, image_url) VALUES (?, ?, ?, ?, ?)", (name, description, sku, price, image_url))
    record_id = cursor.lastrowid
    
    # Commit and close the connection
    conn.commit()
    cursor.close()
    conn.close()
    
    # Return the ID of the created record
    return record_id

def verify_authentication(roles):
    # Placeholder for authentication verification logic
    pass

# Example usage
# create_product("Product Name", "Product Description", "SKU123", 19.99, "http://example.com/image.jpg")

*/